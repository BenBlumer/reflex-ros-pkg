
bin/reflex:     file format elf32-littlearm


Disassembly of section .text:

08000000 <g_vectors>:
 8000000:	68 3d 01 20 cd 04 00 08 c9 04 00 08 c9 04 00 08     h=. ............
 8000010:	c9 04 00 08 c9 04 00 08 c9 04 00 08 00 00 00 00     ................
	...
 800002c:	c9 04 00 08 c9 04 00 08 00 00 00 00 c9 04 00 08     ................
 800003c:	c9 04 00 08 c9 04 00 08 c9 04 00 08 c9 04 00 08     ................
 800004c:	c9 04 00 08 c9 04 00 08 c9 04 00 08 c9 04 00 08     ................
 800005c:	c9 04 00 08 c9 04 00 08 c9 04 00 08 c9 04 00 08     ................
 800006c:	c9 04 00 08 c9 04 00 08 c9 04 00 08 c9 04 00 08     ................
 800007c:	c9 04 00 08 c9 04 00 08 c9 04 00 08 c9 04 00 08     ................
 800008c:	c9 04 00 08 c9 04 00 08 c9 04 00 08 c9 04 00 08     ................
 800009c:	c9 04 00 08 c9 04 00 08 c9 04 00 08 c9 04 00 08     ................
 80000ac:	c9 04 00 08 c9 04 00 08 c9 04 00 08 c9 04 00 08     ................
 80000bc:	c9 04 00 08 c9 04 00 08 c9 04 00 08 c9 04 00 08     ................
 80000cc:	c9 04 00 08 c9 04 00 08 c9 04 00 08 c9 04 00 08     ................
 80000dc:	25 12 00 08 c9 04 00 08 c9 04 00 08 c9 04 00 08     %...............
 80000ec:	c9 04 00 08 c9 04 00 08 c9 04 00 08 c9 04 00 08     ................
 80000fc:	c9 04 00 08 c9 04 00 08 c9 04 00 08 c9 04 00 08     ................
 800010c:	c9 04 00 08 61 12 00 08 a1 12 00 08 c9 04 00 08     ....a...........
 800011c:	c9 04 00 08 c9 04 00 08 c9 04 00 08 c9 04 00 08     ................
 800012c:	c9 04 00 08 c9 04 00 08 f5 0c 00 08 c9 04 00 08     ................
 800013c:	c9 04 00 08 c9 04 00 08 c9 04 00 08 c9 04 00 08     ................
 800014c:	c9 04 00 08 c9 04 00 08 c9 04 00 08 c9 04 00 08     ................
 800015c:	e1 12 00 08 c9 04 00 08 c9 04 00 08 c9 04 00 08     ................
 800016c:	c9 04 00 08 c9 04 00 08 c9 04 00 08 c9 04 00 08     ................
 800017c:	c9 04 00 08 c9 04 00 08 c9 04 00 08 c9 04 00 08     ................
 800018c:	c9 04 00 08 c9 04 00 08 c9 04 00 08 c9 04 00 08     ................
 800019c:	c9 04 00 08 c9 04 00 08 c9 04 00 08 c9 04 00 08     ................
	...

08000400 <__do_global_dtors_aux>:
 8000400:	b510      	push	{r4, lr}
 8000402:	4c05      	ldr	r4, [pc, #20]	; (8000418 <__do_global_dtors_aux+0x18>)
 8000404:	7823      	ldrb	r3, [r4, #0]
 8000406:	b933      	cbnz	r3, 8000416 <__do_global_dtors_aux+0x16>
 8000408:	4b04      	ldr	r3, [pc, #16]	; (800041c <__do_global_dtors_aux+0x1c>)
 800040a:	b113      	cbz	r3, 8000412 <__do_global_dtors_aux+0x12>
 800040c:	4804      	ldr	r0, [pc, #16]	; (8000420 <__do_global_dtors_aux+0x20>)
 800040e:	f3af 8000 	nop.w
 8000412:	2301      	movs	r3, #1
 8000414:	7023      	strb	r3, [r4, #0]
 8000416:	bd10      	pop	{r4, pc}
 8000418:	20000930 	.word	0x20000930
 800041c:	00000000 	.word	0x00000000
 8000420:	0800935c 	.word	0x0800935c

08000424 <frame_dummy>:
 8000424:	b508      	push	{r3, lr}
 8000426:	4b06      	ldr	r3, [pc, #24]	; (8000440 <frame_dummy+0x1c>)
 8000428:	b11b      	cbz	r3, 8000432 <frame_dummy+0xe>
 800042a:	4806      	ldr	r0, [pc, #24]	; (8000444 <frame_dummy+0x20>)
 800042c:	4906      	ldr	r1, [pc, #24]	; (8000448 <frame_dummy+0x24>)
 800042e:	f3af 8000 	nop.w
 8000432:	4806      	ldr	r0, [pc, #24]	; (800044c <frame_dummy+0x28>)
 8000434:	6803      	ldr	r3, [r0, #0]
 8000436:	b113      	cbz	r3, 800043e <frame_dummy+0x1a>
 8000438:	4b05      	ldr	r3, [pc, #20]	; (8000450 <frame_dummy+0x2c>)
 800043a:	b103      	cbz	r3, 800043e <frame_dummy+0x1a>
 800043c:	4798      	blx	r3
 800043e:	bd08      	pop	{r3, pc}
 8000440:	00000000 	.word	0x00000000
 8000444:	0800935c 	.word	0x0800935c
 8000448:	20000934 	.word	0x20000934
 800044c:	08009360 	.word	0x08009360
 8000450:	00000000 	.word	0x00000000

08000454 <_mainCRTStartup>:
 8000454:	4b15      	ldr	r3, [pc, #84]	; (80004ac <_mainCRTStartup+0x58>)
 8000456:	2b00      	cmp	r3, #0
 8000458:	bf08      	it	eq
 800045a:	4b13      	ldreq	r3, [pc, #76]	; (80004a8 <_mainCRTStartup+0x54>)
 800045c:	469d      	mov	sp, r3
 800045e:	f5a3 3a80 	sub.w	sl, r3, #65536	; 0x10000
 8000462:	2100      	movs	r1, #0
 8000464:	468b      	mov	fp, r1
 8000466:	460f      	mov	r7, r1
 8000468:	4813      	ldr	r0, [pc, #76]	; (80004b8 <_mainCRTStartup+0x64>)
 800046a:	4a14      	ldr	r2, [pc, #80]	; (80004bc <_mainCRTStartup+0x68>)
 800046c:	1a12      	subs	r2, r2, r0
 800046e:	f001 ff4d 	bl	800230c <memset>
 8000472:	4b0f      	ldr	r3, [pc, #60]	; (80004b0 <_mainCRTStartup+0x5c>)
 8000474:	2b00      	cmp	r3, #0
 8000476:	d000      	beq.n	800047a <_mainCRTStartup+0x26>
 8000478:	4798      	blx	r3
 800047a:	4b0e      	ldr	r3, [pc, #56]	; (80004b4 <_mainCRTStartup+0x60>)
 800047c:	2b00      	cmp	r3, #0
 800047e:	d000      	beq.n	8000482 <_mainCRTStartup+0x2e>
 8000480:	4798      	blx	r3
 8000482:	2000      	movs	r0, #0
 8000484:	2100      	movs	r1, #0
 8000486:	0004      	movs	r4, r0
 8000488:	000d      	movs	r5, r1
 800048a:	480d      	ldr	r0, [pc, #52]	; (80004c0 <_mainCRTStartup+0x6c>)
 800048c:	2800      	cmp	r0, #0
 800048e:	d002      	beq.n	8000496 <_mainCRTStartup+0x42>
 8000490:	480c      	ldr	r0, [pc, #48]	; (80004c4 <_mainCRTStartup+0x70>)
 8000492:	f003 fbdd 	bl	8003c50 <atexit>
 8000496:	f001 fe77 	bl	8002188 <__libc_init_array>
 800049a:	0020      	movs	r0, r4
 800049c:	0029      	movs	r1, r5
 800049e:	f000 f8bb 	bl	8000618 <main>
 80004a2:	f001 fe61 	bl	8002168 <exit>
 80004a6:	bf00      	nop
 80004a8:	00080000 	.word	0x00080000
	...
 80004b8:	20000930 	.word	0x20000930
 80004bc:	2000fd70 	.word	0x2000fd70
 80004c0:	08003c51 	.word	0x08003c51
 80004c4:	08004f9d 	.word	0x08004f9d

080004c8 <unmapped_vector>:
  main(); // jump to application main()
  while (1) { } // hopefully we never get here...
}

void unmapped_vector()
{
 80004c8:	e7fe      	b.n	80004c8 <unmapped_vector>
 80004ca:	bf00      	nop

080004cc <reset_vector>:
extern int main();

void startup_clock_init_fail() { while (1) { } }

void reset_vector()
{
 80004cc:	b510      	push	{r4, lr}
 80004ce:	b082      	sub	sp, #8
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004d0:	b672      	cpsid	i
  //WDT->WDT_MR = WDT_MR_WDDIS; // disable watchdog for now
  // set up data segment
  __disable_irq();
  pSrc = &_srelocate_flash;
  pDest = &_srelocate;
  if (pSrc != pDest)
 80004d2:	4845      	ldr	r0, [pc, #276]	; (80005e8 <reset_vector+0x11c>)
 80004d4:	4a45      	ldr	r2, [pc, #276]	; (80005ec <reset_vector+0x120>)
 80004d6:	4290      	cmp	r0, r2
 80004d8:	d00d      	beq.n	80004f6 <reset_vector+0x2a>
    for (; pDest < &_erelocate; )
 80004da:	4b45      	ldr	r3, [pc, #276]	; (80005f0 <reset_vector+0x124>)
 80004dc:	429a      	cmp	r2, r3
 80004de:	d20a      	bcs.n	80004f6 <reset_vector+0x2a>
 80004e0:	43d1      	mvns	r1, r2
 80004e2:	440b      	add	r3, r1
 80004e4:	f023 0403 	bic.w	r4, r3, #3
 80004e8:	3404      	adds	r4, #4
 80004ea:	2300      	movs	r3, #0
      *pDest++ = *pSrc++;
 80004ec:	58c1      	ldr	r1, [r0, r3]
 80004ee:	50d1      	str	r1, [r2, r3]
 80004f0:	3304      	adds	r3, #4
  // set up data segment
  __disable_irq();
  pSrc = &_srelocate_flash;
  pDest = &_srelocate;
  if (pSrc != pDest)
    for (; pDest < &_erelocate; )
 80004f2:	42a3      	cmp	r3, r4
 80004f4:	d1fa      	bne.n	80004ec <reset_vector+0x20>
      *pDest++ = *pSrc++;
  // set up bss segment
  for (pDest = &_sbss; pDest < &_ebss; )
 80004f6:	4b3f      	ldr	r3, [pc, #252]	; (80005f4 <reset_vector+0x128>)
 80004f8:	4a3f      	ldr	r2, [pc, #252]	; (80005f8 <reset_vector+0x12c>)
 80004fa:	4293      	cmp	r3, r2
 80004fc:	d20a      	bcs.n	8000514 <reset_vector+0x48>
 80004fe:	43d9      	mvns	r1, r3
 8000500:	440a      	add	r2, r1
 8000502:	f022 0103 	bic.w	r1, r2, #3
 8000506:	4419      	add	r1, r3
    *pDest++ = 0;
 8000508:	2200      	movs	r2, #0
 800050a:	3b04      	subs	r3, #4
 800050c:	f843 2f04 	str.w	r2, [r3, #4]!
  pDest = &_srelocate;
  if (pSrc != pDest)
    for (; pDest < &_erelocate; )
      *pDest++ = *pSrc++;
  // set up bss segment
  for (pDest = &_sbss; pDest < &_ebss; )
 8000510:	428b      	cmp	r3, r1
 8000512:	d1fb      	bne.n	800050c <reset_vector+0x40>
    *pDest++ = 0;
  //__libc_init_array() ;
  SCB->CPACR |= ((3UL << (10*2)) | (3UL << (11*2))); // activate the FPU
 8000514:	4a39      	ldr	r2, [pc, #228]	; (80005fc <reset_vector+0x130>)
  RCC->CR |= 0x1; // ensure the HSI (internal) oscillator is on
 8000516:	4b3a      	ldr	r3, [pc, #232]	; (8000600 <reset_vector+0x134>)
      *pDest++ = *pSrc++;
  // set up bss segment
  for (pDest = &_sbss; pDest < &_ebss; )
    *pDest++ = 0;
  //__libc_init_array() ;
  SCB->CPACR |= ((3UL << (10*2)) | (3UL << (11*2))); // activate the FPU
 8000518:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
  RCC->CR |= 0x1; // ensure the HSI (internal) oscillator is on
  RCC->CFGR = 0; // ensure the HSI oscillator is the clock source
  RCC->CR &= 0xfef6ffff; // turn off the main PLL and HSE oscillator
  RCC->PLLCFGR = 0x24003010; // ensure PLLCFGR is at reset state
 800051c:	4839      	ldr	r0, [pc, #228]	; (8000604 <reset_vector+0x138>)
      *pDest++ = *pSrc++;
  // set up bss segment
  for (pDest = &_sbss; pDest < &_ebss; )
    *pDest++ = 0;
  //__libc_init_array() ;
  SCB->CPACR |= ((3UL << (10*2)) | (3UL << (11*2))); // activate the FPU
 800051e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000522:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
  RCC->CR |= 0x1; // ensure the HSI (internal) oscillator is on
 8000526:	6819      	ldr	r1, [r3, #0]
  RCC->CFGR = 0; // ensure the HSI oscillator is the clock source
 8000528:	2200      	movs	r2, #0
  // set up bss segment
  for (pDest = &_sbss; pDest < &_ebss; )
    *pDest++ = 0;
  //__libc_init_array() ;
  SCB->CPACR |= ((3UL << (10*2)) | (3UL << (11*2))); // activate the FPU
  RCC->CR |= 0x1; // ensure the HSI (internal) oscillator is on
 800052a:	f041 0101 	orr.w	r1, r1, #1
 800052e:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0; // ensure the HSI oscillator is the clock source
 8000530:	609a      	str	r2, [r3, #8]
  RCC->CR &= 0xfef6ffff; // turn off the main PLL and HSE oscillator
 8000532:	6819      	ldr	r1, [r3, #0]
 8000534:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 8000538:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800053c:	6019      	str	r1, [r3, #0]
  RCC->PLLCFGR = 0x24003010; // ensure PLLCFGR is at reset state
 800053e:	6058      	str	r0, [r3, #4]
  RCC->CR &= 0xfffbffff; // reset HSEBYP (i.e., HSE is *not* bypassed)
 8000540:	6819      	ldr	r1, [r3, #0]
 8000542:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8000546:	6019      	str	r1, [r3, #0]
  RCC->CIR = 0x0; // disable all RCC interrupts
 8000548:	60da      	str	r2, [r3, #12]
  RCC->CR |= RCC_CR_HSEON; // enable HSE oscillator (off-chip crystal)
 800054a:	6819      	ldr	r1, [r3, #0]
 800054c:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8000550:	6019      	str	r1, [r3, #0]
  for (volatile uint32_t i = 0; 
 8000552:	9201      	str	r2, [sp, #4]
       i < HSE_STARTUP_TIMEOUT && !(RCC->CR & RCC_CR_HSERDY); i++)
 8000554:	9a01      	ldr	r2, [sp, #4]
  RCC->CR &= 0xfef6ffff; // turn off the main PLL and HSE oscillator
  RCC->PLLCFGR = 0x24003010; // ensure PLLCFGR is at reset state
  RCC->CR &= 0xfffbffff; // reset HSEBYP (i.e., HSE is *not* bypassed)
  RCC->CIR = 0x0; // disable all RCC interrupts
  RCC->CR |= RCC_CR_HSEON; // enable HSE oscillator (off-chip crystal)
  for (volatile uint32_t i = 0; 
 8000556:	f5b2 4fa0 	cmp.w	r2, #20480	; 0x5000
 800055a:	d307      	bcc.n	800056c <reset_vector+0xa0>
 800055c:	e009      	b.n	8000572 <reset_vector+0xa6>
       i < HSE_STARTUP_TIMEOUT && !(RCC->CR & RCC_CR_HSERDY); i++)
 800055e:	9a01      	ldr	r2, [sp, #4]
 8000560:	3201      	adds	r2, #1
 8000562:	9201      	str	r2, [sp, #4]
 8000564:	9a01      	ldr	r2, [sp, #4]
  RCC->CR &= 0xfef6ffff; // turn off the main PLL and HSE oscillator
  RCC->PLLCFGR = 0x24003010; // ensure PLLCFGR is at reset state
  RCC->CR &= 0xfffbffff; // reset HSEBYP (i.e., HSE is *not* bypassed)
  RCC->CIR = 0x0; // disable all RCC interrupts
  RCC->CR |= RCC_CR_HSEON; // enable HSE oscillator (off-chip crystal)
  for (volatile uint32_t i = 0; 
 8000566:	f5b2 4fa0 	cmp.w	r2, #20480	; 0x5000
 800056a:	d202      	bcs.n	8000572 <reset_vector+0xa6>
       i < HSE_STARTUP_TIMEOUT && !(RCC->CR & RCC_CR_HSERDY); i++)
 800056c:	681a      	ldr	r2, [r3, #0]
 800056e:	0390      	lsls	r0, r2, #14
 8000570:	d5f5      	bpl.n	800055e <reset_vector+0x92>
  { } // wait for either timeout or HSE to spin up
  FLASH->ACR = 0; // ensure the caches are turned off, so we can reset them
 8000572:	4a25      	ldr	r2, [pc, #148]	; (8000608 <reset_vector+0x13c>)
  FLASH->ACR = FLASH_ACR_DCRST | FLASH_ACR_ICRST; // flush the cache
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN | 
               FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS; // re-enable the caches
  if (!(RCC->CR & RCC_CR_HSERDY))
 8000574:	4b22      	ldr	r3, [pc, #136]	; (8000600 <reset_vector+0x134>)
  RCC->CIR = 0x0; // disable all RCC interrupts
  RCC->CR |= RCC_CR_HSEON; // enable HSE oscillator (off-chip crystal)
  for (volatile uint32_t i = 0; 
       i < HSE_STARTUP_TIMEOUT && !(RCC->CR & RCC_CR_HSERDY); i++)
  { } // wait for either timeout or HSE to spin up
  FLASH->ACR = 0; // ensure the caches are turned off, so we can reset them
 8000576:	2400      	movs	r4, #0
  FLASH->ACR = FLASH_ACR_DCRST | FLASH_ACR_ICRST; // flush the cache
 8000578:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN | 
 800057c:	f240 7105 	movw	r1, #1797	; 0x705
  RCC->CIR = 0x0; // disable all RCC interrupts
  RCC->CR |= RCC_CR_HSEON; // enable HSE oscillator (off-chip crystal)
  for (volatile uint32_t i = 0; 
       i < HSE_STARTUP_TIMEOUT && !(RCC->CR & RCC_CR_HSERDY); i++)
  { } // wait for either timeout or HSE to spin up
  FLASH->ACR = 0; // ensure the caches are turned off, so we can reset them
 8000580:	6014      	str	r4, [r2, #0]
  FLASH->ACR = FLASH_ACR_DCRST | FLASH_ACR_ICRST; // flush the cache
 8000582:	6010      	str	r0, [r2, #0]
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN | 
 8000584:	6011      	str	r1, [r2, #0]
               FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS; // re-enable the caches
  if (!(RCC->CR & RCC_CR_HSERDY))
 8000586:	681a      	ldr	r2, [r3, #0]
 8000588:	0394      	lsls	r4, r2, #14
 800058a:	d400      	bmi.n	800058e <reset_vector+0xc2>
 800058c:	e7fe      	b.n	800058c <reset_vector+0xc0>
    startup_clock_init_fail(); // go there and spin forever. BUH BYE
  RCC->APB1ENR |= RCC_APB1ENR_PWREN; // clock up the power controller
 800058e:	6c18      	ldr	r0, [r3, #64]	; 0x40
  PWR->CR |= PWR_CR_VOS; // ensure the voltage regulator is at max beef
 8000590:	4a1e      	ldr	r2, [pc, #120]	; (800060c <reset_vector+0x140>)
  // PLL_VCO = 25 mhz / PLL_M * PLL_N = 336 MHz
  #define PLL_P   2
  // SYSCLK = PLL_VCO / PLL_P = 168 MHz
  #define PLL_Q   7
  // USB clock = PLL_VCO / PLL_Q = 48 MHz
  RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1)-1) << 16) |
 8000592:	491f      	ldr	r1, [pc, #124]	; (8000610 <reset_vector+0x144>)
  FLASH->ACR = FLASH_ACR_DCRST | FLASH_ACR_ICRST; // flush the cache
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN | 
               FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS; // re-enable the caches
  if (!(RCC->CR & RCC_CR_HSERDY))
    startup_clock_init_fail(); // go there and spin forever. BUH BYE
  RCC->APB1ENR |= RCC_APB1ENR_PWREN; // clock up the power controller
 8000594:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8000598:	6418      	str	r0, [r3, #64]	; 0x40
  PWR->CR |= PWR_CR_VOS; // ensure the voltage regulator is at max beef
 800059a:	6810      	ldr	r0, [r2, #0]
 800059c:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 80005a0:	6010      	str	r0, [r2, #0]
                         // this will let us run at 168 MHz without overdrive
  RCC->CFGR |= RCC_CFGR_HPRE_DIV1; // set HCLK (AHB clock) to sysclock
 80005a2:	689a      	ldr	r2, [r3, #8]
 80005a4:	609a      	str	r2, [r3, #8]
  RCC->CFGR |= RCC_CFGR_PPRE2_DIV2; // set APB high-speed clock to sysclock/2
 80005a6:	689a      	ldr	r2, [r3, #8]
 80005a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80005ac:	609a      	str	r2, [r3, #8]
  RCC->CFGR |= RCC_CFGR_PPRE1_DIV4; // set APB  low-speed clock to sysclock/4
 80005ae:	689a      	ldr	r2, [r3, #8]
 80005b0:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 80005b4:	609a      	str	r2, [r3, #8]
  // PLL_VCO = 25 mhz / PLL_M * PLL_N = 336 MHz
  #define PLL_P   2
  // SYSCLK = PLL_VCO / PLL_P = 168 MHz
  #define PLL_Q   7
  // USB clock = PLL_VCO / PLL_Q = 48 MHz
  RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1)-1) << 16) |
 80005b6:	6059      	str	r1, [r3, #4]
                 (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
  RCC->CR |= RCC_CR_PLLON; // start spinning up the PLL
 80005b8:	681a      	ldr	r2, [r3, #0]
 80005ba:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80005be:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_PLLRDY)) { } // wait until it's spun up
 80005c0:	6819      	ldr	r1, [r3, #0]
 80005c2:	4a0f      	ldr	r2, [pc, #60]	; (8000600 <reset_vector+0x134>)
 80005c4:	0189      	lsls	r1, r1, #6
 80005c6:	d5fb      	bpl.n	80005c0 <reset_vector+0xf4>
  RCC->CFGR &= ~((uint32_t)RCC_CFGR_SW); // select internal oscillator
 80005c8:	6893      	ldr	r3, [r2, #8]
 80005ca:	f023 0303 	bic.w	r3, r3, #3
 80005ce:	6093      	str	r3, [r2, #8]
  RCC->CFGR |= RCC_CFGR_SW_PLL; // select PLL as clock source
 80005d0:	6893      	ldr	r3, [r2, #8]
 80005d2:	f043 0302 	orr.w	r3, r3, #2
 80005d6:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL) { } // wait for it...
 80005d8:	6893      	ldr	r3, [r2, #8]
 80005da:	f003 030c 	and.w	r3, r3, #12
 80005de:	2b08      	cmp	r3, #8
 80005e0:	d1fa      	bne.n	80005d8 <reset_vector+0x10c>
  // hooray we're done! we're now running at 168 MHz.
  main(); // jump to application main()
 80005e2:	f000 f819 	bl	8000618 <main>
 80005e6:	e7fe      	b.n	80005e6 <reset_vector+0x11a>
 80005e8:	0800936c 	.word	0x0800936c
 80005ec:	20000000 	.word	0x20000000
 80005f0:	2000092c 	.word	0x2000092c
 80005f4:	20000930 	.word	0x20000930
 80005f8:	2000fd70 	.word	0x2000fd70
 80005fc:	e000ed00 	.word	0xe000ed00
 8000600:	40023800 	.word	0x40023800
 8000604:	24003010 	.word	0x24003010
 8000608:	40023c00 	.word	0x40023c00
 800060c:	40007000 	.word	0x40007000
 8000610:	07405419 	.word	0x07405419

08000614 <startup_clock_init_fail>:
#include "stm32f4xx.h"

extern uint32_t _srelocate_flash, _srelocate, _erelocate, _ebss, _sbss;
extern int main();

void startup_clock_init_fail() { while (1) { } }
 8000614:	e7fe      	b.n	8000614 <startup_clock_init_fail>
 8000616:	bf00      	nop

08000618 <main>:
#include "state.h"

//#define PRINT_TACTILE_TIMING

int main()
{
 8000618:	b538      	push	{r3, r4, r5, lr}
  console_init();
 800061a:	f000 f87f 	bl	800071c <console_init>
  systime_init();
 800061e:	f000 fd61 	bl	80010e4 <systime_init>
  printf("=== RESET ===\r\n");
 8000622:	481c      	ldr	r0, [pc, #112]	; (8000694 <main+0x7c>)
 8000624:	f001 ff0e 	bl	8002444 <puts>
  leds_init();
 8000628:	f000 f83a 	bl	80006a0 <leds_init>
  leds_on(0);
 800062c:	2000      	movs	r0, #0
 800062e:	f000 f847 	bl	80006c0 <leds_on>
  enet_init();
 8000632:	f000 f93f 	bl	80008b4 <enet_init>
  dmxl_init();
 8000636:	f000 fe73 	bl	8001320 <dmxl_init>
  fan_init();
 800063a:	f001 f8fd 	bl	8001838 <fan_init>
  tactile_init();
 800063e:	f001 f9d1 	bl	80019e4 <tactile_init>
  enc_init();
 8000642:	f001 fd39 	bl	80020b8 <enc_init>
  state_init();
 8000646:	f001 fd6b 	bl	8002120 <state_init>
  printf("init complete; entering main loop.\r\n");
 800064a:	4813      	ldr	r0, [pc, #76]	; (8000698 <main+0x80>)
 800064c:	f001 fefa 	bl	8002444 <puts>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000650:	b662      	cpsie	i
  __enable_irq();
  /*
  dmxl_set_torque_enable(1, 2, 1);
  */
  //printf("entering main loop\r\n");
  fan_on(); // todo: be smarter. probably doesn't need to run all the time.
 8000652:	f001 f901 	bl	8001858 <fan_on>
 8000656:	4c11      	ldr	r4, [pc, #68]	; (800069c <main+0x84>)
  for (uint_fast32_t loop_count = 1; ; loop_count++)
  {
    //if (loop_count % 2000000 == 0)
    {
      g_state.systime = SYSTIME;
 8000658:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 800065c:	e003      	b.n	8000666 <main+0x4e>
      dmxl_poll();
      enet_link_status_t link_status = enet_get_link_status();
      if (link_status == ENET_LINK_UP)
        enet_send_state();
    }
    enet_process_rx_ring();
 800065e:	f000 fc85 	bl	8000f6c <enet_process_rx_ring>
    dmxl_process_rings();
 8000662:	f000 ff13 	bl	800148c <dmxl_process_rings>
  fan_on(); // todo: be smarter. probably doesn't need to run all the time.
  for (uint_fast32_t loop_count = 1; ; loop_count++)
  {
    //if (loop_count % 2000000 == 0)
    {
      g_state.systime = SYSTIME;
 8000666:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000668:	6862      	ldr	r2, [r4, #4]
 800066a:	6063      	str	r3, [r4, #4]
      leds_toggle(0);
 800066c:	2000      	movs	r0, #0
 800066e:	f000 f843 	bl	80006f8 <leds_toggle>
      leds_toggle(1);
 8000672:	2001      	movs	r0, #1
 8000674:	f000 f840 	bl	80006f8 <leds_toggle>
#ifdef PRINT_TACTILE_TIMING
      volatile uint32_t t_start = SYSTIME;
#endif
      tactile_poll();
 8000678:	f001 fbd6 	bl	8001e28 <tactile_poll>
#ifdef PRINT_TACTILE_TIMING
      volatile uint32_t tactile_dt = SYSTIME - t_start;
      t_start = SYSTIME;
#endif
      enc_poll();
 800067c:	f001 fcd8 	bl	8002030 <enc_poll>
#ifdef PRINT_TACTILE_TIMING
      volatile uint32_t enc_dt = SYSTIME - t_start;
      printf("tactile_dt: %u  enc_dt: %u\r\n", 
             (unsigned)tactile_dt, (unsigned)enc_dt);
#endif
      dmxl_poll();
 8000680:	f001 f8a0 	bl	80017c4 <dmxl_poll>
      enet_link_status_t link_status = enet_get_link_status();
 8000684:	f000 fba2 	bl	8000dcc <enet_get_link_status>
      if (link_status == ENET_LINK_UP)
 8000688:	2801      	cmp	r0, #1
 800068a:	d1e8      	bne.n	800065e <main+0x46>
        enet_send_state();
 800068c:	f000 fd14 	bl	80010b8 <enet_send_state>
 8000690:	e7e5      	b.n	800065e <main+0x46>
 8000692:	bf00      	nop
 8000694:	08008f38 	.word	0x08008f38
 8000698:	08008f48 	.word	0x08008f48
 800069c:	2000fca0 	.word	0x2000fca0

080006a0 <leds_init>:
#define PORTE_LED0 3
#define PORTE_LED1 4

void leds_init()
{
  RCC->AHB1ENR   |= RCC_AHB1ENR_GPIOEEN;
 80006a0:	4a05      	ldr	r2, [pc, #20]	; (80006b8 <leds_init+0x18>)
  GPIOE->MODER   |= (1 << (PORTE_LED0 * 2)) |
 80006a2:	4b06      	ldr	r3, [pc, #24]	; (80006bc <leds_init+0x1c>)
#define PORTE_LED0 3
#define PORTE_LED1 4

void leds_init()
{
  RCC->AHB1ENR   |= RCC_AHB1ENR_GPIOEEN;
 80006a4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80006a6:	f041 0110 	orr.w	r1, r1, #16
 80006aa:	6311      	str	r1, [r2, #48]	; 0x30
  GPIOE->MODER   |= (1 << (PORTE_LED0 * 2)) |
 80006ac:	681a      	ldr	r2, [r3, #0]
 80006ae:	f442 72a0 	orr.w	r2, r2, #320	; 0x140
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40021000 	.word	0x40021000

080006c0 <leds_on>:
                    (1 << (PORTE_LED1 * 2));
}

void leds_on(uint8_t led)
{
  if (led == 0)
 80006c0:	b130      	cbz	r0, 80006d0 <leds_on+0x10>
    GPIOE->BSRRL = 1 << PORTE_LED0;
  else if (led == 1)
 80006c2:	2801      	cmp	r0, #1
 80006c4:	d000      	beq.n	80006c8 <leds_on+0x8>
 80006c6:	4770      	bx	lr
    GPIOE->BSRRL = 1 << PORTE_LED1;
 80006c8:	4b03      	ldr	r3, [pc, #12]	; (80006d8 <leds_on+0x18>)
 80006ca:	2210      	movs	r2, #16
 80006cc:	831a      	strh	r2, [r3, #24]
 80006ce:	4770      	bx	lr
}

void leds_on(uint8_t led)
{
  if (led == 0)
    GPIOE->BSRRL = 1 << PORTE_LED0;
 80006d0:	4b01      	ldr	r3, [pc, #4]	; (80006d8 <leds_on+0x18>)
 80006d2:	2208      	movs	r2, #8
 80006d4:	831a      	strh	r2, [r3, #24]
 80006d6:	4770      	bx	lr
 80006d8:	40021000 	.word	0x40021000

080006dc <leds_off>:
    GPIOE->BSRRL = 1 << PORTE_LED1;
}

void leds_off(uint8_t led)
{
  if (led == 0)
 80006dc:	b130      	cbz	r0, 80006ec <leds_off+0x10>
    GPIOE->BSRRH = 1 << PORTE_LED0;
  else if (led == 1)
 80006de:	2801      	cmp	r0, #1
 80006e0:	d000      	beq.n	80006e4 <leds_off+0x8>
 80006e2:	4770      	bx	lr
    GPIOE->BSRRH = 1 << PORTE_LED1;
 80006e4:	4b03      	ldr	r3, [pc, #12]	; (80006f4 <leds_off+0x18>)
 80006e6:	2210      	movs	r2, #16
 80006e8:	835a      	strh	r2, [r3, #26]
 80006ea:	4770      	bx	lr
}

void leds_off(uint8_t led)
{
  if (led == 0)
    GPIOE->BSRRH = 1 << PORTE_LED0;
 80006ec:	4b01      	ldr	r3, [pc, #4]	; (80006f4 <leds_off+0x18>)
 80006ee:	2208      	movs	r2, #8
 80006f0:	835a      	strh	r2, [r3, #26]
 80006f2:	4770      	bx	lr
 80006f4:	40021000 	.word	0x40021000

080006f8 <leds_toggle>:
    GPIOE->BSRRH = 1 << PORTE_LED1;
}

void leds_toggle(uint8_t led)
{
  if (led == 0)
 80006f8:	b140      	cbz	r0, 800070c <leds_toggle+0x14>
    GPIOE->ODR ^= 1 << PORTE_LED0;
  else if (led == 1)
 80006fa:	2801      	cmp	r0, #1
 80006fc:	d000      	beq.n	8000700 <leds_toggle+0x8>
 80006fe:	4770      	bx	lr
    GPIOE->ODR ^= 1 << PORTE_LED1;
 8000700:	4b05      	ldr	r3, [pc, #20]	; (8000718 <leds_toggle+0x20>)
 8000702:	695a      	ldr	r2, [r3, #20]
 8000704:	f082 0210 	eor.w	r2, r2, #16
 8000708:	615a      	str	r2, [r3, #20]
 800070a:	4770      	bx	lr
}

void leds_toggle(uint8_t led)
{
  if (led == 0)
    GPIOE->ODR ^= 1 << PORTE_LED0;
 800070c:	4b02      	ldr	r3, [pc, #8]	; (8000718 <leds_toggle+0x20>)
 800070e:	695a      	ldr	r2, [r3, #20]
 8000710:	f082 0208 	eor.w	r2, r2, #8
 8000714:	615a      	str	r2, [r3, #20]
 8000716:	4770      	bx	lr
 8000718:	40021000 	.word	0x40021000

0800071c <console_init>:

static volatile uint8_t s_console_init_complete = 0;

void console_init()
{
  s_console_init_complete = 1;
 800071c:	4815      	ldr	r0, [pc, #84]	; (8000774 <console_init+0x58>)
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 800071e:	4916      	ldr	r1, [pc, #88]	; (8000778 <console_init+0x5c>)
  RCC->APB1ENR |= RCC_APB1ENR_UART8EN;
  GPIOE->MODER   |= (0x2) << (PORTE_TX * 2);
 8000720:	4a16      	ldr	r2, [pc, #88]	; (800077c <console_init+0x60>)
  GPIOE->AFR[0]  |= (0x8) << (PORTE_TX * 4);
  // RX not used at the moment. TX only used for stdout
  UART8->CR1 &= ~USART_CR1_UE;
 8000722:	4b17      	ldr	r3, [pc, #92]	; (8000780 <console_init+0x64>)
#define PORTE_TX 1

static volatile uint8_t s_console_init_complete = 0;

void console_init()
{
 8000724:	b410      	push	{r4}
  s_console_init_complete = 1;
 8000726:	2401      	movs	r4, #1
 8000728:	7004      	strb	r4, [r0, #0]
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 800072a:	6b08      	ldr	r0, [r1, #48]	; 0x30
  UART8->CR1 &= ~USART_CR1_UE;
  UART8->CR1 |=  USART_CR1_TE | USART_CR1_RE;
  // we want 1 megabit. do this with mantissa=2 and fraction (sixteenths)=10
  UART8->BRR  = (((uint16_t)2) << 4) | 10;
  UART8->CR1 |=  USART_CR1_UE;
}
 800072c:	f85d 4b04 	ldr.w	r4, [sp], #4
static volatile uint8_t s_console_init_complete = 0;

void console_init()
{
  s_console_init_complete = 1;
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 8000730:	f040 0010 	orr.w	r0, r0, #16
 8000734:	6308      	str	r0, [r1, #48]	; 0x30
  RCC->APB1ENR |= RCC_APB1ENR_UART8EN;
 8000736:	6c08      	ldr	r0, [r1, #64]	; 0x40
 8000738:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800073c:	6408      	str	r0, [r1, #64]	; 0x40
  GPIOE->MODER   |= (0x2) << (PORTE_TX * 2);
 800073e:	6811      	ldr	r1, [r2, #0]
 8000740:	f041 0108 	orr.w	r1, r1, #8
 8000744:	6011      	str	r1, [r2, #0]
  GPIOE->AFR[0]  |= (0x8) << (PORTE_TX * 4);
 8000746:	6a11      	ldr	r1, [r2, #32]
 8000748:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800074c:	6211      	str	r1, [r2, #32]
  // RX not used at the moment. TX only used for stdout
  UART8->CR1 &= ~USART_CR1_UE;
 800074e:	899a      	ldrh	r2, [r3, #12]
 8000750:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000754:	0412      	lsls	r2, r2, #16
 8000756:	0c12      	lsrs	r2, r2, #16
 8000758:	819a      	strh	r2, [r3, #12]
  UART8->CR1 |=  USART_CR1_TE | USART_CR1_RE;
 800075a:	8999      	ldrh	r1, [r3, #12]
 800075c:	b289      	uxth	r1, r1
  // we want 1 megabit. do this with mantissa=2 and fraction (sixteenths)=10
  UART8->BRR  = (((uint16_t)2) << 4) | 10;
 800075e:	222a      	movs	r2, #42	; 0x2a
  RCC->APB1ENR |= RCC_APB1ENR_UART8EN;
  GPIOE->MODER   |= (0x2) << (PORTE_TX * 2);
  GPIOE->AFR[0]  |= (0x8) << (PORTE_TX * 4);
  // RX not used at the moment. TX only used for stdout
  UART8->CR1 &= ~USART_CR1_UE;
  UART8->CR1 |=  USART_CR1_TE | USART_CR1_RE;
 8000760:	f041 010c 	orr.w	r1, r1, #12
 8000764:	8199      	strh	r1, [r3, #12]
  // we want 1 megabit. do this with mantissa=2 and fraction (sixteenths)=10
  UART8->BRR  = (((uint16_t)2) << 4) | 10;
 8000766:	811a      	strh	r2, [r3, #8]
  UART8->CR1 |=  USART_CR1_UE;
 8000768:	899a      	ldrh	r2, [r3, #12]
 800076a:	b292      	uxth	r2, r2
 800076c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000770:	819a      	strh	r2, [r3, #12]
}
 8000772:	4770      	bx	lr
 8000774:	2000094c 	.word	0x2000094c
 8000778:	40023800 	.word	0x40023800
 800077c:	40021000 	.word	0x40021000
 8000780:	40007c00 	.word	0x40007c00

08000784 <console_send_block>:

void console_send_block(const uint8_t *buf, uint32_t len)
{
 8000784:	b538      	push	{r3, r4, r5, lr}
  if (!s_console_init_complete)
 8000786:	4b0d      	ldr	r3, [pc, #52]	; (80007bc <console_send_block+0x38>)
 8000788:	781b      	ldrb	r3, [r3, #0]
  UART8->BRR  = (((uint16_t)2) << 4) | 10;
  UART8->CR1 |=  USART_CR1_UE;
}

void console_send_block(const uint8_t *buf, uint32_t len)
{
 800078a:	4605      	mov	r5, r0
 800078c:	460c      	mov	r4, r1
  if (!s_console_init_complete)
 800078e:	b18b      	cbz	r3, 80007b4 <console_send_block+0x30>
    console_init();
  for (uint32_t i = 0; i < len; i++)
 8000790:	b15c      	cbz	r4, 80007aa <console_send_block+0x26>
  {
    while (!(UART8->SR & USART_SR_TXE)) { } // wait for tx buffer to clear
 8000792:	4a0b      	ldr	r2, [pc, #44]	; (80007c0 <console_send_block+0x3c>)
 8000794:	4628      	mov	r0, r5
 8000796:	442c      	add	r4, r5
 8000798:	4611      	mov	r1, r2
 800079a:	8813      	ldrh	r3, [r2, #0]
 800079c:	061d      	lsls	r5, r3, #24
 800079e:	d5fc      	bpl.n	800079a <console_send_block+0x16>
    UART8->DR = buf[i];
 80007a0:	f810 3b01 	ldrb.w	r3, [r0], #1
 80007a4:	808b      	strh	r3, [r1, #4]

void console_send_block(const uint8_t *buf, uint32_t len)
{
  if (!s_console_init_complete)
    console_init();
  for (uint32_t i = 0; i < len; i++)
 80007a6:	42a0      	cmp	r0, r4
 80007a8:	d1f7      	bne.n	800079a <console_send_block+0x16>
  {
    while (!(UART8->SR & USART_SR_TXE)) { } // wait for tx buffer to clear
    UART8->DR = buf[i];
  }
  while (!(UART8->SR & USART_SR_TC)) { } // wait for TX to finish
 80007aa:	4a05      	ldr	r2, [pc, #20]	; (80007c0 <console_send_block+0x3c>)
 80007ac:	8813      	ldrh	r3, [r2, #0]
 80007ae:	065b      	lsls	r3, r3, #25
 80007b0:	d5fc      	bpl.n	80007ac <console_send_block+0x28>
  //for (volatile int i = 0; i < 100000; i++) { } // give usb uart some time...
}
 80007b2:	bd38      	pop	{r3, r4, r5, pc}
}

void console_send_block(const uint8_t *buf, uint32_t len)
{
  if (!s_console_init_complete)
    console_init();
 80007b4:	f7ff ffb2 	bl	800071c <console_init>
 80007b8:	e7ea      	b.n	8000790 <console_send_block+0xc>
 80007ba:	bf00      	nop
 80007bc:	2000094c 	.word	0x2000094c
 80007c0:	40007c00 	.word	0x40007c00

080007c4 <_sbrk>:

caddr_t _sbrk(int incr)
{
  static unsigned char *heap = NULL ;
  unsigned char *prev_heap ;
  if ( heap == NULL )
 80007c4:	4a04      	ldr	r2, [pc, #16]	; (80007d8 <_sbrk+0x14>)
 80007c6:	4905      	ldr	r1, [pc, #20]	; (80007dc <_sbrk+0x18>)
 80007c8:	6813      	ldr	r3, [r2, #0]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	bf08      	it	eq
 80007ce:	460b      	moveq	r3, r1
    heap = (unsigned char *)&_end ;
  prev_heap = heap;
  heap += incr ;
 80007d0:	4418      	add	r0, r3
 80007d2:	6010      	str	r0, [r2, #0]
  return (caddr_t) prev_heap ;
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	4770      	bx	lr
 80007d8:	20000950 	.word	0x20000950
 80007dc:	20013d70 	.word	0x20013d70

080007e0 <_kill>:

int _kill(__attribute__((unused)) int pid, 
          __attribute__((unused)) int sig) { return -1; }
 80007e0:	f04f 30ff 	mov.w	r0, #4294967295
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop

080007e8 <_exit>:
void _exit(__attribute__((unused)) int status) { while (1) {} } // spin...
 80007e8:	e7fe      	b.n	80007e8 <_exit>
 80007ea:	bf00      	nop

080007ec <_getpid>:
int _getpid() { return 1; }
 80007ec:	2001      	movs	r0, #1
 80007ee:	4770      	bx	lr

080007f0 <_write>:

int _write(__attribute__((unused)) int fd, const void *buf, size_t count)
{
 80007f0:	b510      	push	{r4, lr}
  console_send_block((uint8_t *)buf, count);
 80007f2:	4608      	mov	r0, r1
          __attribute__((unused)) int sig) { return -1; }
void _exit(__attribute__((unused)) int status) { while (1) {} } // spin...
int _getpid() { return 1; }

int _write(__attribute__((unused)) int fd, const void *buf, size_t count)
{
 80007f4:	4614      	mov	r4, r2
  console_send_block((uint8_t *)buf, count);
 80007f6:	4611      	mov	r1, r2
 80007f8:	f7ff ffc4 	bl	8000784 <console_send_block>
  return count;
}
 80007fc:	4620      	mov	r0, r4
 80007fe:	bd10      	pop	{r4, pc}

08000800 <_close>:
int _close(__attribute__((unused)) int fd) { return -1; }
 8000800:	f04f 30ff 	mov.w	r0, #4294967295
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop

08000808 <_fstat>:
int _fstat(__attribute__((unused)) int fd, 
           __attribute__((unused)) struct stat *st)
{
  st->st_mode = S_IFCHR;
 8000808:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800080c:	604b      	str	r3, [r1, #4]
  return 0;
}
 800080e:	2000      	movs	r0, #0
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop

08000814 <_isatty>:
int _isatty(__attribute__((unused)) int fd) { return 1; }
 8000814:	2001      	movs	r0, #1
 8000816:	4770      	bx	lr

08000818 <_lseek>:
off_t _lseek(__attribute__((unused)) int fd, 
             __attribute__((unused)) off_t offset, 
             __attribute__((unused)) int whence) { return 0; }
 8000818:	2000      	movs	r0, #0
 800081a:	4770      	bx	lr

0800081c <_read>:
ssize_t _read(__attribute__((unused)) int fd, 
              __attribute__((unused)) void *buf, 
              __attribute__((unused)) size_t count) { return 0; }
 800081c:	2000      	movs	r0, #0
 800081e:	4770      	bx	lr

08000820 <fputc>:
FILE __stdout;
FILE __stderr;
int fputc(__attribute__((unused)) int ch, __attribute__((unused)) FILE *f)
{
  return 0;
}
 8000820:	2000      	movs	r0, #0
 8000822:	4770      	bx	lr

08000824 <_ttywrch>:
void _ttywrch(__attribute__((unused)) int ch) { }
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop

08000828 <enet_read_phy_reg>:

///////////////////////////////////////////////////////////////////////////

uint16_t enet_read_phy_reg(const uint8_t reg_idx)
{
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // ensure MII is idle
 8000828:	4909      	ldr	r1, [pc, #36]	; (8000850 <enet_read_phy_reg+0x28>)
 800082a:	690b      	ldr	r3, [r1, #16]
 800082c:	4a08      	ldr	r2, [pc, #32]	; (8000850 <enet_read_phy_reg+0x28>)
 800082e:	07db      	lsls	r3, r3, #31
 8000830:	d4fb      	bmi.n	800082a <enet_read_phy_reg+0x2>
  ETH->MACMIIAR = (ENET_PHY_ADDR << 11) | 
                  ((reg_idx & 0x1f) << 6) |
 8000832:	f000 031f 	and.w	r3, r0, #31
 8000836:	019b      	lsls	r3, r3, #6
                  ETH_MACMIIAR_CR_Div102  | // clock divider
 8000838:	f443 6301 	orr.w	r3, r3, #2064	; 0x810
 800083c:	f043 0301 	orr.w	r3, r3, #1
///////////////////////////////////////////////////////////////////////////

uint16_t enet_read_phy_reg(const uint8_t reg_idx)
{
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // ensure MII is idle
  ETH->MACMIIAR = (ENET_PHY_ADDR << 11) | 
 8000840:	6113      	str	r3, [r2, #16]
                  ((reg_idx & 0x1f) << 6) |
                  ETH_MACMIIAR_CR_Div102  | // clock divider
                  ETH_MACMIIAR_MB; 
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // spin waiting for MII to finish
 8000842:	6913      	ldr	r3, [r2, #16]
 8000844:	4902      	ldr	r1, [pc, #8]	; (8000850 <enet_read_phy_reg+0x28>)
 8000846:	07db      	lsls	r3, r3, #31
 8000848:	d4fb      	bmi.n	8000842 <enet_read_phy_reg+0x1a>
  return ETH->MACMIIDR & 0xffff;
 800084a:	6948      	ldr	r0, [r1, #20]
}
 800084c:	b280      	uxth	r0, r0
 800084e:	4770      	bx	lr
 8000850:	40028000 	.word	0x40028000

08000854 <enet_write_phy_reg>:

void enet_write_phy_reg(const uint8_t reg_idx, const uint16_t reg_val)
{
 8000854:	b470      	push	{r4, r5, r6}
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // ensure MII is idle
 8000856:	4d15      	ldr	r5, [pc, #84]	; (80008ac <enet_write_phy_reg+0x58>)
 8000858:	692b      	ldr	r3, [r5, #16]
 800085a:	4c14      	ldr	r4, [pc, #80]	; (80008ac <enet_write_phy_reg+0x58>)
 800085c:	07de      	lsls	r6, r3, #31
 800085e:	d4fb      	bmi.n	8000858 <enet_write_phy_reg+0x4>
  ETH->MACMIIDR = reg_val; // set the outgoing data word
  ETH->MACMIIAR = (ENET_PHY_ADDR << 11)   |
                  ((reg_idx & 0x1f) << 6) |
 8000860:	f000 061f 	and.w	r6, r0, #31
 8000864:	01b6      	lsls	r6, r6, #6
                  ETH_MACMIIAR_CR_Div102  | // MDC clock divider
                  ETH_MACMIIAR_MW         | // set the write bit
 8000866:	f446 6201 	orr.w	r2, r6, #2064	; 0x810
 800086a:	f042 0203 	orr.w	r2, r2, #3
}

void enet_write_phy_reg(const uint8_t reg_idx, const uint16_t reg_val)
{
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // ensure MII is idle
  ETH->MACMIIDR = reg_val; // set the outgoing data word
 800086e:	6161      	str	r1, [r4, #20]
  ETH->MACMIIAR = (ENET_PHY_ADDR << 11)   |
                  ((reg_idx & 0x1f) << 6) |
                  ETH_MACMIIAR_CR_Div102  | // MDC clock divider
                  ETH_MACMIIAR_MW         | // set the write bit
                  ETH_MACMIIAR_MB; // start it up
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // spin waiting for MII to finish
 8000870:	4625      	mov	r5, r4

void enet_write_phy_reg(const uint8_t reg_idx, const uint16_t reg_val)
{
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // ensure MII is idle
  ETH->MACMIIDR = reg_val; // set the outgoing data word
  ETH->MACMIIAR = (ENET_PHY_ADDR << 11)   |
 8000872:	6122      	str	r2, [r4, #16]
                  ((reg_idx & 0x1f) << 6) |
                  ETH_MACMIIAR_CR_Div102  | // MDC clock divider
                  ETH_MACMIIAR_MW         | // set the write bit
                  ETH_MACMIIAR_MB; // start it up
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // spin waiting for MII to finish
 8000874:	692b      	ldr	r3, [r5, #16]
 8000876:	07dc      	lsls	r4, r3, #31
 8000878:	d4fc      	bmi.n	8000874 <enet_write_phy_reg+0x20>

///////////////////////////////////////////////////////////////////////////

uint16_t enet_read_phy_reg(const uint8_t reg_idx)
{
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // ensure MII is idle
 800087a:	4d0c      	ldr	r5, [pc, #48]	; (80008ac <enet_write_phy_reg+0x58>)
 800087c:	692b      	ldr	r3, [r5, #16]
 800087e:	4c0b      	ldr	r4, [pc, #44]	; (80008ac <enet_write_phy_reg+0x58>)
 8000880:	07da      	lsls	r2, r3, #31
 8000882:	d4fb      	bmi.n	800087c <enet_write_phy_reg+0x28>
  ETH->MACMIIAR = (ENET_PHY_ADDR << 11) | 
                  ((reg_idx & 0x1f) << 6) |
                  ETH_MACMIIAR_CR_Div102  | // clock divider
 8000884:	f446 6301 	orr.w	r3, r6, #2064	; 0x810
 8000888:	f043 0301 	orr.w	r3, r3, #1
///////////////////////////////////////////////////////////////////////////

uint16_t enet_read_phy_reg(const uint8_t reg_idx)
{
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // ensure MII is idle
  ETH->MACMIIAR = (ENET_PHY_ADDR << 11) | 
 800088c:	6123      	str	r3, [r4, #16]
                  ((reg_idx & 0x1f) << 6) |
                  ETH_MACMIIAR_CR_Div102  | // clock divider
                  ETH_MACMIIAR_MB; 
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // spin waiting for MII to finish
 800088e:	6923      	ldr	r3, [r4, #16]
 8000890:	4d06      	ldr	r5, [pc, #24]	; (80008ac <enet_write_phy_reg+0x58>)
 8000892:	07db      	lsls	r3, r3, #31
 8000894:	d4fb      	bmi.n	800088e <enet_write_phy_reg+0x3a>
  return ETH->MACMIIDR & 0xffff;
 8000896:	696b      	ldr	r3, [r5, #20]
                  ETH_MACMIIAR_CR_Div102  | // MDC clock divider
                  ETH_MACMIIAR_MW         | // set the write bit
                  ETH_MACMIIAR_MB; // start it up
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // spin waiting for MII to finish
  uint16_t readback_val = enet_read_phy_reg(reg_idx);
  if (readback_val != reg_val)
 8000898:	b29b      	uxth	r3, r3
 800089a:	4299      	cmp	r1, r3
 800089c:	d004      	beq.n	80008a8 <enet_write_phy_reg+0x54>
  {
    printf("woah there. tried to write 0x%04x to reg %02d but it read back %04x\r\n",
 800089e:	4602      	mov	r2, r0
           reg_val, reg_idx, readback_val);
  }
}
 80008a0:	bc70      	pop	{r4, r5, r6}
                  ETH_MACMIIAR_MB; // start it up
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // spin waiting for MII to finish
  uint16_t readback_val = enet_read_phy_reg(reg_idx);
  if (readback_val != reg_val)
  {
    printf("woah there. tried to write 0x%04x to reg %02d but it read back %04x\r\n",
 80008a2:	4803      	ldr	r0, [pc, #12]	; (80008b0 <enet_write_phy_reg+0x5c>)
 80008a4:	f001 bd8c 	b.w	80023c0 <printf>
           reg_val, reg_idx, readback_val);
  }
}
 80008a8:	bc70      	pop	{r4, r5, r6}
 80008aa:	4770      	bx	lr
 80008ac:	40028000 	.word	0x40028000
 80008b0:	08008f6c 	.word	0x08008f6c

080008b4 <enet_init>:

void enet_init()
{
 80008b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  printf("enet_init()\r\n");
 80008b8:	48a1      	ldr	r0, [pc, #644]	; (8000b40 <enet_init+0x28c>)
           reg_val, reg_idx, readback_val);
  }
}

void enet_init()
{
 80008ba:	b08f      	sub	sp, #60	; 0x3c
  printf("enet_init()\r\n");
 80008bc:	f001 fdc2 	bl	8002444 <puts>
  // set up the pins on port a
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN     |  // and all the i/o ports we 
 80008c0:	4aa0      	ldr	r2, [pc, #640]	; (8000b44 <enet_init+0x290>)
                  RCC_AHB1ENR_GPIOBEN     |  // will be using to talk to
                  RCC_AHB1ENR_GPIOCEN;       // the ethernet PHY

  GPIOA->MODER |= (2 << (PORTA_ETH_REFCLK * 2)) |
 80008c2:	48a1      	ldr	r0, [pc, #644]	; (8000b48 <enet_init+0x294>)

void enet_init()
{
  printf("enet_init()\r\n");
  // set up the pins on port a
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN     |  // and all the i/o ports we 
 80008c4:	6b14      	ldr	r4, [r2, #48]	; 0x30
  GPIOA->AFR[0] |= (11 << (PORTA_ETH_REFCLK * 4)) |
                   (11 << (PORTA_ETH_MDIO   * 4)) |
                   (11 << (PORTA_ETH_CRSDV  * 4));

  // set up the ethernet pins on port b
  GPIOB->MODER |= (2 << (PORTB_ETH_TXEN * 2)) |
 80008c6:	4ba1      	ldr	r3, [pc, #644]	; (8000b4c <enet_init+0x298>)
                    (3 << (PORTB_ETH_TXD0 * 2)) |
                    (3 << (PORTB_ETH_TXD1 * 2)); // make the tx pins go fast
  GPIOB->MODER |= (1 << (PORTB_PHY_RESET * 2)); // reset = gpio output pin

  // set up the ethernet pins on port c
  GPIOC->MODER  |= ( 2 << (PORTC_ETH_MDC  * 2)) |
 80008c8:	49a1      	ldr	r1, [pc, #644]	; (8000b50 <enet_init+0x29c>)

void enet_init()
{
  printf("enet_init()\r\n");
  // set up the pins on port a
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN     |  // and all the i/o ports we 
 80008ca:	f044 0407 	orr.w	r4, r4, #7
 80008ce:	6314      	str	r4, [r2, #48]	; 0x30
                  RCC_AHB1ENR_GPIOBEN     |  // will be using to talk to
                  RCC_AHB1ENR_GPIOCEN;       // the ethernet PHY

  GPIOA->MODER |= (2 << (PORTA_ETH_REFCLK * 2)) |
 80008d0:	6804      	ldr	r4, [r0, #0]
 80008d2:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 80008d6:	f044 0428 	orr.w	r4, r4, #40	; 0x28
 80008da:	6004      	str	r4, [r0, #0]
                  (2 << (PORTA_ETH_MDIO   * 2)) |
                  (2 << (PORTA_ETH_CRSDV  * 2)); // set these guys as AF pins
  GPIOA->AFR[0] |= (11 << (PORTA_ETH_REFCLK * 4)) |
 80008dc:	6a04      	ldr	r4, [r0, #32]
 80008de:	f044 4430 	orr.w	r4, r4, #2952790016	; 0xb0000000
 80008e2:	f444 643b 	orr.w	r4, r4, #2992	; 0xbb0
 80008e6:	6204      	str	r4, [r0, #32]
                   (11 << (PORTA_ETH_MDIO   * 4)) |
                   (11 << (PORTA_ETH_CRSDV  * 4));

  // set up the ethernet pins on port b
  GPIOB->MODER |= (2 << (PORTB_ETH_TXEN * 2)) |
 80008e8:	6818      	ldr	r0, [r3, #0]
 80008ea:	f040 6028 	orr.w	r0, r0, #176160768	; 0xa800000
 80008ee:	6018      	str	r0, [r3, #0]
                  (2 << (PORTB_ETH_TXD0 * 2)) |
                  (2 << (PORTB_ETH_TXD1 * 2));
  GPIOB->AFR[1] |= (11 << ((PORTB_ETH_TXEN - 8) * 4)) |
 80008f0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80008f2:	f440 003b 	orr.w	r0, r0, #12255232	; 0xbb0000
 80008f6:	f440 4030 	orr.w	r0, r0, #45056	; 0xb000
 80008fa:	6258      	str	r0, [r3, #36]	; 0x24
                   (11 << ((PORTB_ETH_TXD0 - 8) * 4)) |
                   (11 << ((PORTB_ETH_TXD1 - 8) * 4));
  GPIOB->OSPEEDR |= (3 << (PORTB_ETH_TXEN * 2)) |
 80008fc:	6898      	ldr	r0, [r3, #8]
 80008fe:	f040 607c 	orr.w	r0, r0, #264241152	; 0xfc00000
 8000902:	6098      	str	r0, [r3, #8]
                    (3 << (PORTB_ETH_TXD0 * 2)) |
                    (3 << (PORTB_ETH_TXD1 * 2)); // make the tx pins go fast
  GPIOB->MODER |= (1 << (PORTB_PHY_RESET * 2)); // reset = gpio output pin
 8000904:	6818      	ldr	r0, [r3, #0]
 8000906:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 800090a:	6018      	str	r0, [r3, #0]

  // set up the ethernet pins on port c
  GPIOC->MODER  |= ( 2 << (PORTC_ETH_MDC  * 2)) |
 800090c:	680b      	ldr	r3, [r1, #0]
 800090e:	f443 6320 	orr.w	r3, r3, #2560	; 0xa00
 8000912:	f043 0308 	orr.w	r3, r3, #8
 8000916:	600b      	str	r3, [r1, #0]
                   ( 2 << (PORTC_ETH_RXD0 * 2)) |
                   ( 2 << (PORTC_ETH_RXD1 * 2));
  GPIOC->AFR[0] |= (11 << (PORTC_ETH_MDC  * 4)) |
 8000918:	6a0b      	ldr	r3, [r1, #32]
 800091a:	f443 033b 	orr.w	r3, r3, #12255232	; 0xbb0000
 800091e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8000922:	620b      	str	r3, [r1, #32]
                   (11 << (PORTC_ETH_RXD0 * 4)) |
                   (11 << (PORTC_ETH_RXD1 * 4));

  RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN; // enable the sysconfig block
 8000924:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8000926:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800092a:	6453      	str	r3, [r2, #68]	; 0x44
  RCC->AHB1RSTR |= RCC_AHB1RSTR_ETHMACRST;
 800092c:	6911      	ldr	r1, [r2, #16]
  for (volatile int i = 0; i < 1000; i++) { } // wait for sysconfig to come up
 800092e:	2300      	movs	r3, #0
  GPIOC->AFR[0] |= (11 << (PORTC_ETH_MDC  * 4)) |
                   (11 << (PORTC_ETH_RXD0 * 4)) |
                   (11 << (PORTC_ETH_RXD1 * 4));

  RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN; // enable the sysconfig block
  RCC->AHB1RSTR |= RCC_AHB1RSTR_ETHMACRST;
 8000930:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8000934:	6111      	str	r1, [r2, #16]
  for (volatile int i = 0; i < 1000; i++) { } // wait for sysconfig to come up
 8000936:	9301      	str	r3, [sp, #4]
 8000938:	9b01      	ldr	r3, [sp, #4]
 800093a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800093e:	da06      	bge.n	800094e <enet_init+0x9a>
 8000940:	9b01      	ldr	r3, [sp, #4]
 8000942:	3301      	adds	r3, #1
 8000944:	9301      	str	r3, [sp, #4]
 8000946:	9b01      	ldr	r3, [sp, #4]
 8000948:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800094c:	dbf8      	blt.n	8000940 <enet_init+0x8c>
  // hold the MAC in reset while we set it to RMII mode
  for (volatile int i = 0; i < 1000; i++) { } // wait for sysconfig to come up
 800094e:	2300      	movs	r3, #0
 8000950:	9302      	str	r3, [sp, #8]
 8000952:	9b02      	ldr	r3, [sp, #8]
 8000954:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000958:	da06      	bge.n	8000968 <enet_init+0xb4>
 800095a:	9b02      	ldr	r3, [sp, #8]
 800095c:	3301      	adds	r3, #1
 800095e:	9302      	str	r3, [sp, #8]
 8000960:	9b02      	ldr	r3, [sp, #8]
 8000962:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000966:	dbf8      	blt.n	800095a <enet_init+0xa6>
  SYSCFG->PMC |= SYSCFG_PMC_MII_RMII_SEL; // set the MAC in RMII mode  
 8000968:	4b7a      	ldr	r3, [pc, #488]	; (8000b54 <enet_init+0x2a0>)
  for (volatile int i = 0; i < 100000; i++) { } // wait for sysconfig to come up
 800096a:	4a7b      	ldr	r2, [pc, #492]	; (8000b58 <enet_init+0x2a4>)
  RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN; // enable the sysconfig block
  RCC->AHB1RSTR |= RCC_AHB1RSTR_ETHMACRST;
  for (volatile int i = 0; i < 1000; i++) { } // wait for sysconfig to come up
  // hold the MAC in reset while we set it to RMII mode
  for (volatile int i = 0; i < 1000; i++) { } // wait for sysconfig to come up
  SYSCFG->PMC |= SYSCFG_PMC_MII_RMII_SEL; // set the MAC in RMII mode  
 800096c:	6858      	ldr	r0, [r3, #4]
  for (volatile int i = 0; i < 100000; i++) { } // wait for sysconfig to come up
 800096e:	2100      	movs	r1, #0
  RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN; // enable the sysconfig block
  RCC->AHB1RSTR |= RCC_AHB1RSTR_ETHMACRST;
  for (volatile int i = 0; i < 1000; i++) { } // wait for sysconfig to come up
  // hold the MAC in reset while we set it to RMII mode
  for (volatile int i = 0; i < 1000; i++) { } // wait for sysconfig to come up
  SYSCFG->PMC |= SYSCFG_PMC_MII_RMII_SEL; // set the MAC in RMII mode  
 8000970:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000974:	6058      	str	r0, [r3, #4]
  for (volatile int i = 0; i < 100000; i++) { } // wait for sysconfig to come up
 8000976:	9103      	str	r1, [sp, #12]
 8000978:	9b03      	ldr	r3, [sp, #12]
 800097a:	4293      	cmp	r3, r2
 800097c:	dc05      	bgt.n	800098a <enet_init+0xd6>
 800097e:	9b03      	ldr	r3, [sp, #12]
 8000980:	3301      	adds	r3, #1
 8000982:	9303      	str	r3, [sp, #12]
 8000984:	9b03      	ldr	r3, [sp, #12]
 8000986:	4293      	cmp	r3, r2
 8000988:	ddf9      	ble.n	800097e <enet_init+0xca>
  RCC->AHB1ENR |= RCC_AHB1ENR_ETHMACRXEN  |
 800098a:	4b6e      	ldr	r3, [pc, #440]	; (8000b44 <enet_init+0x290>)
                  RCC_AHB1ENR_ETHMACTXEN  |
                  RCC_AHB1ENR_ETHMACEN    ;  // turn on ur ethernet plz
  for (volatile int i = 0; i < 100000; i++) { } // wait 
 800098c:	4a72      	ldr	r2, [pc, #456]	; (8000b58 <enet_init+0x2a4>)
  for (volatile int i = 0; i < 1000; i++) { } // wait for sysconfig to come up
  // hold the MAC in reset while we set it to RMII mode
  for (volatile int i = 0; i < 1000; i++) { } // wait for sysconfig to come up
  SYSCFG->PMC |= SYSCFG_PMC_MII_RMII_SEL; // set the MAC in RMII mode  
  for (volatile int i = 0; i < 100000; i++) { } // wait for sysconfig to come up
  RCC->AHB1ENR |= RCC_AHB1ENR_ETHMACRXEN  |
 800098e:	6b18      	ldr	r0, [r3, #48]	; 0x30
                  RCC_AHB1ENR_ETHMACTXEN  |
                  RCC_AHB1ENR_ETHMACEN    ;  // turn on ur ethernet plz
  for (volatile int i = 0; i < 100000; i++) { } // wait 
 8000990:	2100      	movs	r1, #0
  for (volatile int i = 0; i < 1000; i++) { } // wait for sysconfig to come up
  // hold the MAC in reset while we set it to RMII mode
  for (volatile int i = 0; i < 1000; i++) { } // wait for sysconfig to come up
  SYSCFG->PMC |= SYSCFG_PMC_MII_RMII_SEL; // set the MAC in RMII mode  
  for (volatile int i = 0; i < 100000; i++) { } // wait for sysconfig to come up
  RCC->AHB1ENR |= RCC_AHB1ENR_ETHMACRXEN  |
 8000992:	f040 6060 	orr.w	r0, r0, #234881024	; 0xe000000
 8000996:	6318      	str	r0, [r3, #48]	; 0x30
                  RCC_AHB1ENR_ETHMACTXEN  |
                  RCC_AHB1ENR_ETHMACEN    ;  // turn on ur ethernet plz
  for (volatile int i = 0; i < 100000; i++) { } // wait 
 8000998:	9104      	str	r1, [sp, #16]
 800099a:	9b04      	ldr	r3, [sp, #16]
 800099c:	4293      	cmp	r3, r2
 800099e:	dc05      	bgt.n	80009ac <enet_init+0xf8>
 80009a0:	9b04      	ldr	r3, [sp, #16]
 80009a2:	3301      	adds	r3, #1
 80009a4:	9304      	str	r3, [sp, #16]
 80009a6:	9b04      	ldr	r3, [sp, #16]
 80009a8:	4293      	cmp	r3, r2
 80009aa:	ddf9      	ble.n	80009a0 <enet_init+0xec>
  RCC->AHB1RSTR &= ~RCC_AHB1RSTR_ETHMACRST; // release MAC reset
 80009ac:	4b65      	ldr	r3, [pc, #404]	; (8000b44 <enet_init+0x290>)
  for (volatile int i = 0; i < 100000; i++) { } // wait 
 80009ae:	4a6a      	ldr	r2, [pc, #424]	; (8000b58 <enet_init+0x2a4>)
  for (volatile int i = 0; i < 100000; i++) { } // wait for sysconfig to come up
  RCC->AHB1ENR |= RCC_AHB1ENR_ETHMACRXEN  |
                  RCC_AHB1ENR_ETHMACTXEN  |
                  RCC_AHB1ENR_ETHMACEN    ;  // turn on ur ethernet plz
  for (volatile int i = 0; i < 100000; i++) { } // wait 
  RCC->AHB1RSTR &= ~RCC_AHB1RSTR_ETHMACRST; // release MAC reset
 80009b0:	6918      	ldr	r0, [r3, #16]
  for (volatile int i = 0; i < 100000; i++) { } // wait 
 80009b2:	2100      	movs	r1, #0
  for (volatile int i = 0; i < 100000; i++) { } // wait for sysconfig to come up
  RCC->AHB1ENR |= RCC_AHB1ENR_ETHMACRXEN  |
                  RCC_AHB1ENR_ETHMACTXEN  |
                  RCC_AHB1ENR_ETHMACEN    ;  // turn on ur ethernet plz
  for (volatile int i = 0; i < 100000; i++) { } // wait 
  RCC->AHB1RSTR &= ~RCC_AHB1RSTR_ETHMACRST; // release MAC reset
 80009b4:	f020 7000 	bic.w	r0, r0, #33554432	; 0x2000000
 80009b8:	6118      	str	r0, [r3, #16]
  for (volatile int i = 0; i < 100000; i++) { } // wait 
 80009ba:	9105      	str	r1, [sp, #20]
 80009bc:	9b05      	ldr	r3, [sp, #20]
 80009be:	4293      	cmp	r3, r2
 80009c0:	dc05      	bgt.n	80009ce <enet_init+0x11a>
 80009c2:	9b05      	ldr	r3, [sp, #20]
 80009c4:	3301      	adds	r3, #1
 80009c6:	9305      	str	r3, [sp, #20]
 80009c8:	9b05      	ldr	r3, [sp, #20]
 80009ca:	4293      	cmp	r3, r2
 80009cc:	ddf9      	ble.n	80009c2 <enet_init+0x10e>
  RCC->AHB1RSTR |= RCC_AHB1RSTR_ETHMACRST;
 80009ce:	4b5d      	ldr	r3, [pc, #372]	; (8000b44 <enet_init+0x290>)
  for (volatile int i = 0; i < 100000; i++) { } // wait 
 80009d0:	4a61      	ldr	r2, [pc, #388]	; (8000b58 <enet_init+0x2a4>)
                  RCC_AHB1ENR_ETHMACTXEN  |
                  RCC_AHB1ENR_ETHMACEN    ;  // turn on ur ethernet plz
  for (volatile int i = 0; i < 100000; i++) { } // wait 
  RCC->AHB1RSTR &= ~RCC_AHB1RSTR_ETHMACRST; // release MAC reset
  for (volatile int i = 0; i < 100000; i++) { } // wait 
  RCC->AHB1RSTR |= RCC_AHB1RSTR_ETHMACRST;
 80009d2:	6918      	ldr	r0, [r3, #16]
  for (volatile int i = 0; i < 100000; i++) { } // wait 
 80009d4:	2100      	movs	r1, #0
                  RCC_AHB1ENR_ETHMACTXEN  |
                  RCC_AHB1ENR_ETHMACEN    ;  // turn on ur ethernet plz
  for (volatile int i = 0; i < 100000; i++) { } // wait 
  RCC->AHB1RSTR &= ~RCC_AHB1RSTR_ETHMACRST; // release MAC reset
  for (volatile int i = 0; i < 100000; i++) { } // wait 
  RCC->AHB1RSTR |= RCC_AHB1RSTR_ETHMACRST;
 80009d6:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 80009da:	6118      	str	r0, [r3, #16]
  for (volatile int i = 0; i < 100000; i++) { } // wait 
 80009dc:	9106      	str	r1, [sp, #24]
 80009de:	9b06      	ldr	r3, [sp, #24]
 80009e0:	4293      	cmp	r3, r2
 80009e2:	dc05      	bgt.n	80009f0 <enet_init+0x13c>
 80009e4:	9b06      	ldr	r3, [sp, #24]
 80009e6:	3301      	adds	r3, #1
 80009e8:	9306      	str	r3, [sp, #24]
 80009ea:	9b06      	ldr	r3, [sp, #24]
 80009ec:	4293      	cmp	r3, r2
 80009ee:	ddf9      	ble.n	80009e4 <enet_init+0x130>
  RCC->AHB1RSTR &= ~RCC_AHB1RSTR_ETHMACRST; // release MAC reset
 80009f0:	4b54      	ldr	r3, [pc, #336]	; (8000b44 <enet_init+0x290>)
  for (volatile int i = 0; i < 100000; i++) { } // wait for sysconfig ... (?)
 80009f2:	4a59      	ldr	r2, [pc, #356]	; (8000b58 <enet_init+0x2a4>)
  for (volatile int i = 0; i < 100000; i++) { } // wait 
  RCC->AHB1RSTR &= ~RCC_AHB1RSTR_ETHMACRST; // release MAC reset
  for (volatile int i = 0; i < 100000; i++) { } // wait 
  RCC->AHB1RSTR |= RCC_AHB1RSTR_ETHMACRST;
  for (volatile int i = 0; i < 100000; i++) { } // wait 
  RCC->AHB1RSTR &= ~RCC_AHB1RSTR_ETHMACRST; // release MAC reset
 80009f4:	6918      	ldr	r0, [r3, #16]
  for (volatile int i = 0; i < 100000; i++) { } // wait for sysconfig ... (?)
 80009f6:	2100      	movs	r1, #0
  for (volatile int i = 0; i < 100000; i++) { } // wait 
  RCC->AHB1RSTR &= ~RCC_AHB1RSTR_ETHMACRST; // release MAC reset
  for (volatile int i = 0; i < 100000; i++) { } // wait 
  RCC->AHB1RSTR |= RCC_AHB1RSTR_ETHMACRST;
  for (volatile int i = 0; i < 100000; i++) { } // wait 
  RCC->AHB1RSTR &= ~RCC_AHB1RSTR_ETHMACRST; // release MAC reset
 80009f8:	f020 7000 	bic.w	r0, r0, #33554432	; 0x2000000
 80009fc:	6118      	str	r0, [r3, #16]
  for (volatile int i = 0; i < 100000; i++) { } // wait for sysconfig ... (?)
 80009fe:	9107      	str	r1, [sp, #28]
 8000a00:	9b07      	ldr	r3, [sp, #28]
 8000a02:	4293      	cmp	r3, r2
 8000a04:	dc05      	bgt.n	8000a12 <enet_init+0x15e>
 8000a06:	9b07      	ldr	r3, [sp, #28]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	9307      	str	r3, [sp, #28]
 8000a0c:	9b07      	ldr	r3, [sp, #28]
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	ddf9      	ble.n	8000a06 <enet_init+0x152>

  ETH->DMABMR |= ETH_DMABMR_SR;
 8000a12:	4b52      	ldr	r3, [pc, #328]	; (8000b5c <enet_init+0x2a8>)
  for (volatile uint32_t i = 0; i < 100000; i++) { } 
 8000a14:	4a50      	ldr	r2, [pc, #320]	; (8000b58 <enet_init+0x2a4>)
  RCC->AHB1RSTR |= RCC_AHB1RSTR_ETHMACRST;
  for (volatile int i = 0; i < 100000; i++) { } // wait 
  RCC->AHB1RSTR &= ~RCC_AHB1RSTR_ETHMACRST; // release MAC reset
  for (volatile int i = 0; i < 100000; i++) { } // wait for sysconfig ... (?)

  ETH->DMABMR |= ETH_DMABMR_SR;
 8000a16:	6818      	ldr	r0, [r3, #0]
  for (volatile uint32_t i = 0; i < 100000; i++) { } 
 8000a18:	2100      	movs	r1, #0
  RCC->AHB1RSTR |= RCC_AHB1RSTR_ETHMACRST;
  for (volatile int i = 0; i < 100000; i++) { } // wait 
  RCC->AHB1RSTR &= ~RCC_AHB1RSTR_ETHMACRST; // release MAC reset
  for (volatile int i = 0; i < 100000; i++) { } // wait for sysconfig ... (?)

  ETH->DMABMR |= ETH_DMABMR_SR;
 8000a1a:	f040 0001 	orr.w	r0, r0, #1
 8000a1e:	6018      	str	r0, [r3, #0]
  for (volatile uint32_t i = 0; i < 100000; i++) { } 
 8000a20:	9108      	str	r1, [sp, #32]
 8000a22:	9b08      	ldr	r3, [sp, #32]
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d805      	bhi.n	8000a34 <enet_init+0x180>
 8000a28:	9b08      	ldr	r3, [sp, #32]
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	9308      	str	r3, [sp, #32]
 8000a2e:	9b08      	ldr	r3, [sp, #32]
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d9f9      	bls.n	8000a28 <enet_init+0x174>
  while (ETH->DMABMR & ETH_DMABMR_SR) { } // wait for it to reset
 8000a34:	4a49      	ldr	r2, [pc, #292]	; (8000b5c <enet_init+0x2a8>)
 8000a36:	6813      	ldr	r3, [r2, #0]
 8000a38:	f013 0301 	ands.w	r3, r3, #1
 8000a3c:	d1fb      	bne.n	8000a36 <enet_init+0x182>
  for (volatile uint32_t i = 0; i < 100000; i++) { } 
 8000a3e:	9309      	str	r3, [sp, #36]	; 0x24
 8000a40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000a42:	4a45      	ldr	r2, [pc, #276]	; (8000b58 <enet_init+0x2a4>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d805      	bhi.n	8000a54 <enet_init+0x1a0>
 8000a48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	9309      	str	r3, [sp, #36]	; 0x24
 8000a4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d9f9      	bls.n	8000a48 <enet_init+0x194>
  ETH->DMAOMR |= ETH_DMAOMR_FTF; // flush DMA
 8000a54:	4a42      	ldr	r2, [pc, #264]	; (8000b60 <enet_init+0x2ac>)
  while (ETH->DMAOMR & ETH_DMAOMR_FTF) { } // wait for it to flush
 8000a56:	4943      	ldr	r1, [pc, #268]	; (8000b64 <enet_init+0x2b0>)

  ETH->DMABMR |= ETH_DMABMR_SR;
  for (volatile uint32_t i = 0; i < 100000; i++) { } 
  while (ETH->DMABMR & ETH_DMABMR_SR) { } // wait for it to reset
  for (volatile uint32_t i = 0; i < 100000; i++) { } 
  ETH->DMAOMR |= ETH_DMAOMR_FTF; // flush DMA
 8000a58:	f241 0318 	movw	r3, #4120	; 0x1018
 8000a5c:	58d0      	ldr	r0, [r2, r3]
 8000a5e:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
 8000a62:	50d0      	str	r0, [r2, r3]
  while (ETH->DMAOMR & ETH_DMAOMR_FTF) { } // wait for it to flush
 8000a64:	680b      	ldr	r3, [r1, #0]
 8000a66:	4a3e      	ldr	r2, [pc, #248]	; (8000b60 <enet_init+0x2ac>)
 8000a68:	f413 1380 	ands.w	r3, r3, #1048576	; 0x100000
 8000a6c:	d1fa      	bne.n	8000a64 <enet_init+0x1b0>

  // now, configure the ethernet peripheral
  ETH->MACCR |= 0x02000000 | // CSTF = strip FCS. why isn't there a symbol ?
 8000a6e:	6811      	ldr	r1, [r2, #0]
                ETH_MACCR_DM   | // full duplex
                ETH_MACCR_IPCO | // ipv4 checksum auto-generation for RX
                ETH_MACCR_APCS;  // automatically remove pad+CRC from frames
  ETH->MACFFR |= ETH_MACFFR_RA; // for now, don't try to filter in hardware
  // generate a decent reset pulse now
  GPIOB->BSRRL = 1 << PORTB_PHY_RESET;
 8000a70:	4c36      	ldr	r4, [pc, #216]	; (8000b4c <enet_init+0x298>)
  for (volatile uint32_t i = 0; i < 100000; i++) { } 
 8000a72:	4839      	ldr	r0, [pc, #228]	; (8000b58 <enet_init+0x2a4>)
  for (volatile uint32_t i = 0; i < 100000; i++) { } 
  ETH->DMAOMR |= ETH_DMAOMR_FTF; // flush DMA
  while (ETH->DMAOMR & ETH_DMAOMR_FTF) { } // wait for it to flush

  // now, configure the ethernet peripheral
  ETH->MACCR |= 0x02000000 | // CSTF = strip FCS. why isn't there a symbol ?
 8000a74:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8000a78:	f441 4199 	orr.w	r1, r1, #19584	; 0x4c80
 8000a7c:	6011      	str	r1, [r2, #0]
                ETH_MACCR_FES  | // enable 100 mbit mode
                ETH_MACCR_DM   | // full duplex
                ETH_MACCR_IPCO | // ipv4 checksum auto-generation for RX
                ETH_MACCR_APCS;  // automatically remove pad+CRC from frames
  ETH->MACFFR |= ETH_MACFFR_RA; // for now, don't try to filter in hardware
 8000a7e:	6855      	ldr	r5, [r2, #4]
  // generate a decent reset pulse now
  GPIOB->BSRRL = 1 << PORTB_PHY_RESET;
 8000a80:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  ETH->MACCR |= 0x02000000 | // CSTF = strip FCS. why isn't there a symbol ?
                ETH_MACCR_FES  | // enable 100 mbit mode
                ETH_MACCR_DM   | // full duplex
                ETH_MACCR_IPCO | // ipv4 checksum auto-generation for RX
                ETH_MACCR_APCS;  // automatically remove pad+CRC from frames
  ETH->MACFFR |= ETH_MACFFR_RA; // for now, don't try to filter in hardware
 8000a84:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8000a88:	6055      	str	r5, [r2, #4]
  // generate a decent reset pulse now
  GPIOB->BSRRL = 1 << PORTB_PHY_RESET;
 8000a8a:	8321      	strh	r1, [r4, #24]
  for (volatile uint32_t i = 0; i < 100000; i++) { } 
 8000a8c:	930a      	str	r3, [sp, #40]	; 0x28
 8000a8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000a90:	4283      	cmp	r3, r0
 8000a92:	bf98      	it	ls
 8000a94:	4602      	movls	r2, r0
 8000a96:	d805      	bhi.n	8000aa4 <enet_init+0x1f0>
 8000a98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	930a      	str	r3, [sp, #40]	; 0x28
 8000a9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d9f9      	bls.n	8000a98 <enet_init+0x1e4>
  GPIOB->BSRRH = 1 << PORTB_PHY_RESET; // assert reset (pull it low)
 8000aa4:	4929      	ldr	r1, [pc, #164]	; (8000b4c <enet_init+0x298>)
  for (volatile uint32_t i = 0; i < 100000; i++) { } // let some time pass
 8000aa6:	4a2c      	ldr	r2, [pc, #176]	; (8000b58 <enet_init+0x2a4>)
 8000aa8:	2300      	movs	r3, #0
                ETH_MACCR_APCS;  // automatically remove pad+CRC from frames
  ETH->MACFFR |= ETH_MACFFR_RA; // for now, don't try to filter in hardware
  // generate a decent reset pulse now
  GPIOB->BSRRL = 1 << PORTB_PHY_RESET;
  for (volatile uint32_t i = 0; i < 100000; i++) { } 
  GPIOB->BSRRH = 1 << PORTB_PHY_RESET; // assert reset (pull it low)
 8000aaa:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000aae:	8348      	strh	r0, [r1, #26]
  for (volatile uint32_t i = 0; i < 100000; i++) { } // let some time pass
 8000ab0:	930b      	str	r3, [sp, #44]	; 0x2c
 8000ab2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d805      	bhi.n	8000ac4 <enet_init+0x210>
 8000ab8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8000aba:	3301      	adds	r3, #1
 8000abc:	930b      	str	r3, [sp, #44]	; 0x2c
 8000abe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d9f9      	bls.n	8000ab8 <enet_init+0x204>
  GPIOB->BSRRL = 1 << PORTB_PHY_RESET; // de-assert reset (pull it high)
 8000ac4:	4921      	ldr	r1, [pc, #132]	; (8000b4c <enet_init+0x298>)
  // todo: only need to wait until registers read back something other
  // than 0xffff . then we don't have to wait as long.
  for (volatile uint32_t i = 0; i < 1000000; i++) { } // let it initialize
 8000ac6:	4a28      	ldr	r2, [pc, #160]	; (8000b68 <enet_init+0x2b4>)
 8000ac8:	2300      	movs	r3, #0
  // generate a decent reset pulse now
  GPIOB->BSRRL = 1 << PORTB_PHY_RESET;
  for (volatile uint32_t i = 0; i < 100000; i++) { } 
  GPIOB->BSRRH = 1 << PORTB_PHY_RESET; // assert reset (pull it low)
  for (volatile uint32_t i = 0; i < 100000; i++) { } // let some time pass
  GPIOB->BSRRL = 1 << PORTB_PHY_RESET; // de-assert reset (pull it high)
 8000aca:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000ace:	8308      	strh	r0, [r1, #24]
  // todo: only need to wait until registers read back something other
  // than 0xffff . then we don't have to wait as long.
  for (volatile uint32_t i = 0; i < 1000000; i++) { } // let it initialize
 8000ad0:	930c      	str	r3, [sp, #48]	; 0x30
 8000ad2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d805      	bhi.n	8000ae4 <enet_init+0x230>
 8000ad8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000ada:	3301      	adds	r3, #1
 8000adc:	930c      	str	r3, [sp, #48]	; 0x30
 8000ade:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d9f9      	bls.n	8000ad8 <enet_init+0x224>
  printf("waiting for PHY to wake up...\r\n");
 8000ae4:	4821      	ldr	r0, [pc, #132]	; (8000b6c <enet_init+0x2b8>)
 8000ae6:	f001 fcad 	bl	8002444 <puts>

///////////////////////////////////////////////////////////////////////////

uint16_t enet_read_phy_reg(const uint8_t reg_idx)
{
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // ensure MII is idle
 8000aea:	4a1d      	ldr	r2, [pc, #116]	; (8000b60 <enet_init+0x2ac>)
  ETH->MACMIIAR = (ENET_PHY_ADDR << 11) | 
 8000aec:	f640 0511 	movw	r5, #2065	; 0x811

///////////////////////////////////////////////////////////////////////////

uint16_t enet_read_phy_reg(const uint8_t reg_idx)
{
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // ensure MII is idle
 8000af0:	4611      	mov	r1, r2
  GPIOB->BSRRL = 1 << PORTB_PHY_RESET; // de-assert reset (pull it high)
  // todo: only need to wait until registers read back something other
  // than 0xffff . then we don't have to wait as long.
  for (volatile uint32_t i = 0; i < 1000000; i++) { } // let it initialize
  printf("waiting for PHY to wake up...\r\n");
  while (enet_read_phy_reg(0) == 0xffff) { }
 8000af2:	f64f 74ff 	movw	r4, #65535	; 0xffff

///////////////////////////////////////////////////////////////////////////

uint16_t enet_read_phy_reg(const uint8_t reg_idx)
{
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // ensure MII is idle
 8000af6:	6913      	ldr	r3, [r2, #16]
 8000af8:	07d8      	lsls	r0, r3, #31
 8000afa:	d4fc      	bmi.n	8000af6 <enet_init+0x242>
  ETH->MACMIIAR = (ENET_PHY_ADDR << 11) | 
 8000afc:	610d      	str	r5, [r1, #16]
                  ((reg_idx & 0x1f) << 6) |
                  ETH_MACMIIAR_CR_Div102  | // clock divider
                  ETH_MACMIIAR_MB; 
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // spin waiting for MII to finish
 8000afe:	6913      	ldr	r3, [r2, #16]
 8000b00:	f013 0301 	ands.w	r3, r3, #1
 8000b04:	d1fb      	bne.n	8000afe <enet_init+0x24a>
  return ETH->MACMIIDR & 0xffff;
 8000b06:	6948      	ldr	r0, [r1, #20]
  GPIOB->BSRRL = 1 << PORTB_PHY_RESET; // de-assert reset (pull it high)
  // todo: only need to wait until registers read back something other
  // than 0xffff . then we don't have to wait as long.
  for (volatile uint32_t i = 0; i < 1000000; i++) { } // let it initialize
  printf("waiting for PHY to wake up...\r\n");
  while (enet_read_phy_reg(0) == 0xffff) { }
 8000b08:	b280      	uxth	r0, r0
 8000b0a:	42a0      	cmp	r0, r4
 8000b0c:	d0f3      	beq.n	8000af6 <enet_init+0x242>
  for (volatile uint32_t i = 0; i < 1000000; i++) { } // let it initialize
 8000b0e:	930d      	str	r3, [sp, #52]	; 0x34
 8000b10:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8000b12:	4a15      	ldr	r2, [pc, #84]	; (8000b68 <enet_init+0x2b4>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d805      	bhi.n	8000b24 <enet_init+0x270>
 8000b18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	930d      	str	r3, [sp, #52]	; 0x34
 8000b1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d9f9      	bls.n	8000b18 <enet_init+0x264>
  printf("done with PHY reset.\r\n");
 8000b24:	4812      	ldr	r0, [pc, #72]	; (8000b70 <enet_init+0x2bc>)

///////////////////////////////////////////////////////////////////////////

uint16_t enet_read_phy_reg(const uint8_t reg_idx)
{
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // ensure MII is idle
 8000b26:	4c0e      	ldr	r4, [pc, #56]	; (8000b60 <enet_init+0x2ac>)
  // than 0xffff . then we don't have to wait as long.
  for (volatile uint32_t i = 0; i < 1000000; i++) { } // let it initialize
  printf("waiting for PHY to wake up...\r\n");
  while (enet_read_phy_reg(0) == 0xffff) { }
  for (volatile uint32_t i = 0; i < 1000000; i++) { } // let it initialize
  printf("done with PHY reset.\r\n");
 8000b28:	f001 fc8c 	bl	8002444 <puts>
  printf("setting software strap registers...\r\n");
 8000b2c:	4811      	ldr	r0, [pc, #68]	; (8000b74 <enet_init+0x2c0>)
 8000b2e:	f001 fc89 	bl	8002444 <puts>
  enet_write_phy_reg(0x09, 0x7821); // enable auto MDIX,
 8000b32:	2009      	movs	r0, #9
 8000b34:	f647 0121 	movw	r1, #30753	; 0x7821
 8000b38:	f7ff fe8c 	bl	8000854 <enet_write_phy_reg>
                                    // set INT/PWDN to be interrupt output
                                    // enable auto-negotiation
  enet_write_phy_reg(0x09, 0xf821); // exit software-strap mode
 8000b3c:	2009      	movs	r0, #9
 8000b3e:	e01b      	b.n	8000b78 <enet_init+0x2c4>
 8000b40:	08008fb4 	.word	0x08008fb4
 8000b44:	40023800 	.word	0x40023800
 8000b48:	40020000 	.word	0x40020000
 8000b4c:	40020400 	.word	0x40020400
 8000b50:	40020800 	.word	0x40020800
 8000b54:	40013800 	.word	0x40013800
 8000b58:	0001869f 	.word	0x0001869f
 8000b5c:	40029000 	.word	0x40029000
 8000b60:	40028000 	.word	0x40028000
 8000b64:	40029018 	.word	0x40029018
 8000b68:	000f423f 	.word	0x000f423f
 8000b6c:	08008fc4 	.word	0x08008fc4
 8000b70:	08008fe4 	.word	0x08008fe4
 8000b74:	08008ffc 	.word	0x08008ffc
 8000b78:	f64f 0121 	movw	r1, #63521	; 0xf821
 8000b7c:	f7ff fe6a 	bl	8000854 <enet_write_phy_reg>
  enet_write_phy_reg(0x04, 0x0101); // only advertise 100-FD mode
 8000b80:	2004      	movs	r0, #4
 8000b82:	f240 1101 	movw	r1, #257	; 0x101
 8000b86:	f7ff fe65 	bl	8000854 <enet_write_phy_reg>

///////////////////////////////////////////////////////////////////////////

uint16_t enet_read_phy_reg(const uint8_t reg_idx)
{
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // ensure MII is idle
 8000b8a:	4627      	mov	r7, r4
                                    // enable auto-negotiation
  enet_write_phy_reg(0x09, 0xf821); // exit software-strap mode
  enet_write_phy_reg(0x04, 0x0101); // only advertise 100-FD mode

  // cycle through and read a bunch of PHY registers to make sure it's alive
  for (int i = 0; i < 32; i++)
 8000b8c:	2600      	movs	r6, #0

///////////////////////////////////////////////////////////////////////////

uint16_t enet_read_phy_reg(const uint8_t reg_idx)
{
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // ensure MII is idle
 8000b8e:	6923      	ldr	r3, [r4, #16]
 8000b90:	07db      	lsls	r3, r3, #31
 8000b92:	d4fc      	bmi.n	8000b8e <enet_init+0x2da>
  ETH->MACMIIAR = (ENET_PHY_ADDR << 11) | 
                  ((reg_idx & 0x1f) << 6) |
 8000b94:	01b3      	lsls	r3, r6, #6
                  ETH_MACMIIAR_CR_Div102  | // clock divider
 8000b96:	f443 6301 	orr.w	r3, r3, #2064	; 0x810
 8000b9a:	f043 0301 	orr.w	r3, r3, #1
///////////////////////////////////////////////////////////////////////////

uint16_t enet_read_phy_reg(const uint8_t reg_idx)
{
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // ensure MII is idle
  ETH->MACMIIAR = (ENET_PHY_ADDR << 11) | 
 8000b9e:	613b      	str	r3, [r7, #16]
                  ((reg_idx & 0x1f) << 6) |
                  ETH_MACMIIAR_CR_Div102  | // clock divider
                  ETH_MACMIIAR_MB; 
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // spin waiting for MII to finish
 8000ba0:	6923      	ldr	r3, [r4, #16]
 8000ba2:	f013 0501 	ands.w	r5, r3, #1
 8000ba6:	d1fb      	bne.n	8000ba0 <enet_init+0x2ec>
  return ETH->MACMIIDR & 0xffff;
 8000ba8:	697a      	ldr	r2, [r7, #20]
  enet_write_phy_reg(0x09, 0xf821); // exit software-strap mode
  enet_write_phy_reg(0x04, 0x0101); // only advertise 100-FD mode

  // cycle through and read a bunch of PHY registers to make sure it's alive
  for (int i = 0; i < 32; i++)
    printf("PHY reg %02d = 0x%04x\r\n", i, enet_read_phy_reg(i));
 8000baa:	4845      	ldr	r0, [pc, #276]	; (8000cc0 <enet_init+0x40c>)
 8000bac:	4631      	mov	r1, r6
 8000bae:	b292      	uxth	r2, r2
                                    // enable auto-negotiation
  enet_write_phy_reg(0x09, 0xf821); // exit software-strap mode
  enet_write_phy_reg(0x04, 0x0101); // only advertise 100-FD mode

  // cycle through and read a bunch of PHY registers to make sure it's alive
  for (int i = 0; i < 32; i++)
 8000bb0:	3601      	adds	r6, #1
    printf("PHY reg %02d = 0x%04x\r\n", i, enet_read_phy_reg(i));
 8000bb2:	f001 fc05 	bl	80023c0 <printf>
                                    // enable auto-negotiation
  enet_write_phy_reg(0x09, 0xf821); // exit software-strap mode
  enet_write_phy_reg(0x04, 0x0101); // only advertise 100-FD mode

  // cycle through and read a bunch of PHY registers to make sure it's alive
  for (int i = 0; i < 32; i++)
 8000bb6:	2e20      	cmp	r6, #32
 8000bb8:	d1e9      	bne.n	8000b8e <enet_init+0x2da>

  ////////////////////////////////////////////////////////////////////////
  // set up ethernet TX descriptors
  for (int i = 0; i < ETH_DMA_NTXD; i++)
  {
    g_eth_dma_tx_desc[i].des0 = 0x00100000 | // set address-chained bit
 8000bba:	4b42      	ldr	r3, [pc, #264]	; (8000cc4 <enet_init+0x410>)
                                0x00c00000 ; // set insert-checksum bits
    g_eth_dma_tx_desc[i].des1 = 0;
    g_eth_dma_tx_desc[i].des2 = (uint32_t)&g_eth_dma_tx_buf[i][0]; // pointer to buf
 8000bbc:	4a42      	ldr	r2, [pc, #264]	; (8000cc8 <enet_init+0x414>)

  ////////////////////////////////////////////////////////////////////////
  // set up ethernet TX descriptors
  for (int i = 0; i < ETH_DMA_NTXD; i++)
  {
    g_eth_dma_tx_desc[i].des0 = 0x00100000 | // set address-chained bit
 8000bbe:	f44f 0150 	mov.w	r1, #13631488	; 0xd00000
 8000bc2:	6019      	str	r1, [r3, #0]
 8000bc4:	4688      	mov	r8, r1
                                0x00c00000 ; // set insert-checksum bits
    g_eth_dma_tx_desc[i].des1 = 0;
 8000bc6:	605d      	str	r5, [r3, #4]
    g_eth_dma_tx_desc[i].des2 = (uint32_t)&g_eth_dma_tx_buf[i][0]; // pointer to buf
 8000bc8:	462c      	mov	r4, r5
 8000bca:	f502 6000 	add.w	r0, r2, #2048	; 0x800
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	f103 0110 	add.w	r1, r3, #16
  // set up ethernet TX descriptors
  for (int i = 0; i < ETH_DMA_NTXD; i++)
  {
    g_eth_dma_tx_desc[i].des0 = 0x00100000 | // set address-chained bit
                                0x00c00000 ; // set insert-checksum bits
    g_eth_dma_tx_desc[i].des1 = 0;
 8000bd4:	462f      	mov	r7, r5
    g_eth_dma_tx_desc[i].des2 = (uint32_t)&g_eth_dma_tx_buf[i][0]; // pointer to buf
    if (i < ETH_DMA_NTXD-1)
      g_eth_dma_tx_desc[i].des3 = (uint32_t)&g_eth_dma_tx_desc[i+1]; // chain to next 
 8000bd6:	1c62      	adds	r2, r4, #1

  ////////////////////////////////////////////////////////////////////////
  // set up ethernet TX descriptors
  for (int i = 0; i < ETH_DMA_NTXD; i++)
  {
    g_eth_dma_tx_desc[i].des0 = 0x00100000 | // set address-chained bit
 8000bd8:	0115      	lsls	r5, r2, #4
                                0x00c00000 ; // set insert-checksum bits
    g_eth_dma_tx_desc[i].des1 = 0;
    g_eth_dma_tx_desc[i].des2 = (uint32_t)&g_eth_dma_tx_buf[i][0]; // pointer to buf
    if (i < ETH_DMA_NTXD-1)
      g_eth_dma_tx_desc[i].des3 = (uint32_t)&g_eth_dma_tx_desc[i+1]; // chain to next 
 8000bda:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 8000bde:	f104 0608 	add.w	r6, r4, #8

  ////////////////////////////////////////////////////////////////////////
  // set up ethernet TX descriptors
  for (int i = 0; i < ETH_DMA_NTXD; i++)
  {
    g_eth_dma_tx_desc[i].des0 = 0x00100000 | // set address-chained bit
 8000be2:	195c      	adds	r4, r3, r5
                                0x00c00000 ; // set insert-checksum bits
    g_eth_dma_tx_desc[i].des1 = 0;
    g_eth_dma_tx_desc[i].des2 = (uint32_t)&g_eth_dma_tx_buf[i][0]; // pointer to buf
    if (i < ETH_DMA_NTXD-1)
 8000be4:	2a03      	cmp	r2, #3
      g_eth_dma_tx_desc[i].des3 = (uint32_t)&g_eth_dma_tx_desc[i+1]; // chain to next 
 8000be6:	6071      	str	r1, [r6, #4]
 8000be8:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 8000cc4 <enet_init+0x410>

  ////////////////////////////////////////////////////////////////////////
  // set up ethernet TX descriptors
  for (int i = 0; i < ETH_DMA_NTXD; i++)
  {
    g_eth_dma_tx_desc[i].des0 = 0x00100000 | // set address-chained bit
 8000bec:	f843 8005 	str.w	r8, [r3, r5]
 8000bf0:	f101 0110 	add.w	r1, r1, #16
                                0x00c00000 ; // set insert-checksum bits
    g_eth_dma_tx_desc[i].des1 = 0;
 8000bf4:	6067      	str	r7, [r4, #4]
    g_eth_dma_tx_desc[i].des2 = (uint32_t)&g_eth_dma_tx_buf[i][0]; // pointer to buf
 8000bf6:	60a0      	str	r0, [r4, #8]
 8000bf8:	f500 6000 	add.w	r0, r0, #2048	; 0x800
    if (i < ETH_DMA_NTXD-1)
 8000bfc:	d001      	beq.n	8000c02 <enet_init+0x34e>
  for (int i = 0; i < 32; i++)
    printf("PHY reg %02d = 0x%04x\r\n", i, enet_read_phy_reg(i));

  ////////////////////////////////////////////////////////////////////////
  // set up ethernet TX descriptors
  for (int i = 0; i < ETH_DMA_NTXD; i++)
 8000bfe:	4614      	mov	r4, r2
 8000c00:	e7e9      	b.n	8000bd6 <enet_init+0x322>
  }
  ////////////////////////////////////////////////////////////////////////
  // set up ethernet RX descriptors
  for (int i = 0; i < ETH_DMA_NRXD; i++)
  {
    g_eth_dma_rx_desc[i].des0 = 0x80000000; // set "own" bit = DMA has control
 8000c02:	4a32      	ldr	r2, [pc, #200]	; (8000ccc <enet_init+0x418>)
    g_eth_dma_rx_desc[i].des1 = 0x00004000 | // set the RCH bit = chained addr2
                            ETH_NBUF; // buffer size in addr1
    g_eth_dma_rx_desc[i].des2 = (uint32_t)&g_eth_dma_rx_buf[i][0];
 8000c04:	4832      	ldr	r0, [pc, #200]	; (8000cd0 <enet_init+0x41c>)
    g_eth_dma_tx_desc[i].des1 = 0;
    g_eth_dma_tx_desc[i].des2 = (uint32_t)&g_eth_dma_tx_buf[i][0]; // pointer to buf
    if (i < ETH_DMA_NTXD-1)
      g_eth_dma_tx_desc[i].des3 = (uint32_t)&g_eth_dma_tx_desc[i+1]; // chain to next 
    else
      g_eth_dma_tx_desc[i].des3 = (uint32_t)&g_eth_dma_tx_desc[0]; // loop to first 
 8000c06:	f8cc c03c 	str.w	ip, [ip, #60]	; 0x3c
  }
  ////////////////////////////////////////////////////////////////////////
  // set up ethernet RX descriptors
  for (int i = 0; i < ETH_DMA_NRXD; i++)
  {
    g_eth_dma_rx_desc[i].des0 = 0x80000000; // set "own" bit = DMA has control
 8000c0a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    g_eth_dma_rx_desc[i].des1 = 0x00004000 | // set the RCH bit = chained addr2
 8000c0e:	f44f 4390 	mov.w	r3, #18432	; 0x4800
  }
  ////////////////////////////////////////////////////////////////////////
  // set up ethernet RX descriptors
  for (int i = 0; i < ETH_DMA_NRXD; i++)
  {
    g_eth_dma_rx_desc[i].des0 = 0x80000000; // set "own" bit = DMA has control
 8000c12:	6011      	str	r1, [r2, #0]
 8000c14:	4689      	mov	r9, r1
    g_eth_dma_rx_desc[i].des1 = 0x00004000 | // set the RCH bit = chained addr2
 8000c16:	6053      	str	r3, [r2, #4]
 8000c18:	4698      	mov	r8, r3
                            ETH_NBUF; // buffer size in addr1
    g_eth_dma_rx_desc[i].des2 = (uint32_t)&g_eth_dma_rx_buf[i][0];
 8000c1a:	6090      	str	r0, [r2, #8]
 8000c1c:	f102 0110 	add.w	r1, r2, #16
 8000c20:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8000c24:	2400      	movs	r4, #0
 8000c26:	e000      	b.n	8000c2a <enet_init+0x376>
    else
      g_eth_dma_tx_desc[i].des3 = (uint32_t)&g_eth_dma_tx_desc[0]; // loop to first 
  }
  ////////////////////////////////////////////////////////////////////////
  // set up ethernet RX descriptors
  for (int i = 0; i < ETH_DMA_NRXD; i++)
 8000c28:	461c      	mov	r4, r3
    g_eth_dma_rx_desc[i].des0 = 0x80000000; // set "own" bit = DMA has control
    g_eth_dma_rx_desc[i].des1 = 0x00004000 | // set the RCH bit = chained addr2
                            ETH_NBUF; // buffer size in addr1
    g_eth_dma_rx_desc[i].des2 = (uint32_t)&g_eth_dma_rx_buf[i][0];
    if (i < ETH_DMA_NRXD-1)
      g_eth_dma_rx_desc[i].des3 = (uint32_t)&g_eth_dma_rx_desc[i+1];
 8000c2a:	1c63      	adds	r3, r4, #1
  }
  ////////////////////////////////////////////////////////////////////////
  // set up ethernet RX descriptors
  for (int i = 0; i < ETH_DMA_NRXD; i++)
  {
    g_eth_dma_rx_desc[i].des0 = 0x80000000; // set "own" bit = DMA has control
 8000c2c:	011d      	lsls	r5, r3, #4
    g_eth_dma_rx_desc[i].des1 = 0x00004000 | // set the RCH bit = chained addr2
                            ETH_NBUF; // buffer size in addr1
    g_eth_dma_rx_desc[i].des2 = (uint32_t)&g_eth_dma_rx_buf[i][0];
    if (i < ETH_DMA_NRXD-1)
      g_eth_dma_rx_desc[i].des3 = (uint32_t)&g_eth_dma_rx_desc[i+1];
 8000c2e:	eb02 1404 	add.w	r4, r2, r4, lsl #4
 8000c32:	f104 0608 	add.w	r6, r4, #8
  }
  ////////////////////////////////////////////////////////////////////////
  // set up ethernet RX descriptors
  for (int i = 0; i < ETH_DMA_NRXD; i++)
  {
    g_eth_dma_rx_desc[i].des0 = 0x80000000; // set "own" bit = DMA has control
 8000c36:	1954      	adds	r4, r2, r5
    g_eth_dma_rx_desc[i].des1 = 0x00004000 | // set the RCH bit = chained addr2
                            ETH_NBUF; // buffer size in addr1
    g_eth_dma_rx_desc[i].des2 = (uint32_t)&g_eth_dma_rx_buf[i][0];
    if (i < ETH_DMA_NRXD-1)
 8000c38:	2b0f      	cmp	r3, #15
      g_eth_dma_rx_desc[i].des3 = (uint32_t)&g_eth_dma_rx_desc[i+1];
 8000c3a:	6071      	str	r1, [r6, #4]
 8000c3c:	4f23      	ldr	r7, [pc, #140]	; (8000ccc <enet_init+0x418>)
  }
  ////////////////////////////////////////////////////////////////////////
  // set up ethernet RX descriptors
  for (int i = 0; i < ETH_DMA_NRXD; i++)
  {
    g_eth_dma_rx_desc[i].des0 = 0x80000000; // set "own" bit = DMA has control
 8000c3e:	f842 9005 	str.w	r9, [r2, r5]
 8000c42:	f101 0110 	add.w	r1, r1, #16
    g_eth_dma_rx_desc[i].des1 = 0x00004000 | // set the RCH bit = chained addr2
 8000c46:	f8c4 8004 	str.w	r8, [r4, #4]
                            ETH_NBUF; // buffer size in addr1
    g_eth_dma_rx_desc[i].des2 = (uint32_t)&g_eth_dma_rx_buf[i][0];
 8000c4a:	60a0      	str	r0, [r4, #8]
 8000c4c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
    if (i < ETH_DMA_NRXD-1)
 8000c50:	d1ea      	bne.n	8000c28 <enet_init+0x374>
      g_eth_dma_rx_desc[i].des3 = (uint32_t)&g_eth_dma_rx_desc[i+1];
    else
      g_eth_dma_rx_desc[i].des3 = (uint32_t)&g_eth_dma_rx_desc[0];
 8000c52:	2300      	movs	r3, #0
 8000c54:	491f      	ldr	r1, [pc, #124]	; (8000cd4 <enet_init+0x420>)
 8000c56:	4e20      	ldr	r6, [pc, #128]	; (8000cd8 <enet_init+0x424>)
 8000c58:	4d20      	ldr	r5, [pc, #128]	; (8000cdc <enet_init+0x428>)
 8000c5a:	4c21      	ldr	r4, [pc, #132]	; (8000ce0 <enet_init+0x42c>)
 8000c5c:	4821      	ldr	r0, [pc, #132]	; (8000ce4 <enet_init+0x430>)
 8000c5e:	f8c7 70fc 	str.w	r7, [r7, #252]	; 0xfc
  ///////////////////////////////////////////////////////////////////////
  // set up the RAM pool for reception
  for (int i = 0; i < ETH_RAM_RXPOOL_NPTR; i++)
  {
    g_eth_rxpool_start[i] = &g_eth_rxpool[0];
    g_eth_rxpool_len[i] = 0;
 8000c62:	461a      	mov	r2, r3
 8000c64:	f825 2013 	strh.w	r2, [r5, r3, lsl #1]
      g_eth_dma_rx_desc[i].des3 = (uint32_t)&g_eth_dma_rx_desc[0];
  }

  ///////////////////////////////////////////////////////////////////////
  // set up the RAM pool for reception
  for (int i = 0; i < ETH_RAM_RXPOOL_NPTR; i++)
 8000c68:	3301      	adds	r3, #1
 8000c6a:	2b80      	cmp	r3, #128	; 0x80
  {
    g_eth_rxpool_start[i] = &g_eth_rxpool[0];
    g_eth_rxpool_len[i] = 0;
    g_eth_rxpool_ptrs_wpos = 0;
 8000c6c:	8022      	strh	r2, [r4, #0]

  ///////////////////////////////////////////////////////////////////////
  // set up the RAM pool for reception
  for (int i = 0; i < ETH_RAM_RXPOOL_NPTR; i++)
  {
    g_eth_rxpool_start[i] = &g_eth_rxpool[0];
 8000c6e:	f841 6f04 	str.w	r6, [r1, #4]!
    g_eth_rxpool_len[i] = 0;
    g_eth_rxpool_ptrs_wpos = 0;
    g_eth_rxpool_ptrs_rpos = 0;
 8000c72:	8002      	strh	r2, [r0, #0]
      g_eth_dma_rx_desc[i].des3 = (uint32_t)&g_eth_dma_rx_desc[0];
  }

  ///////////////////////////////////////////////////////////////////////
  // set up the RAM pool for reception
  for (int i = 0; i < ETH_RAM_RXPOOL_NPTR; i++)
 8000c74:	d1f6      	bne.n	8000c64 <enet_init+0x3b0>
    g_eth_rxpool_ptrs_rpos = 0;
  }

  ///////////////////////////////////////////////////////////////////////
  // finally, turn on the DMA machinery
  ETH->DMATDLAR = (uint32_t)&g_eth_dma_tx_desc[0]; // point TX DMA to first desc
 8000c76:	4b1c      	ldr	r3, [pc, #112]	; (8000ce8 <enet_init+0x434>)
  /*
  ETH->DMABMR = ETH_DMABMR_AAB | ETH_DMABMR_USP | 
                ETH_DMABMR_RDP_1Beat | ETH_DMABMR_RTPR_1_1 |
                ETH_DMABMR_PBL_1Beat | ETH_DMABMR_EDE;
  */
  ETH->DMAIER = ETH_DMAIER_NISE | ETH_DMAIER_RIE;
 8000c78:	4c1c      	ldr	r4, [pc, #112]	; (8000cec <enet_init+0x438>)
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000c7a:	491d      	ldr	r1, [pc, #116]	; (8000cf0 <enet_init+0x43c>)

  ///////////////////////////////////////////////////////////////////////
  // finally, turn on the DMA machinery
  ETH->DMATDLAR = (uint32_t)&g_eth_dma_tx_desc[0]; // point TX DMA to first desc
  ETH->DMARDLAR = (uint32_t)&g_eth_dma_rx_desc[0]; // point RX DMA to first desc
  ETH->DMAOMR = ETH_DMAOMR_TSF; // enable store-and-forward mode
 8000c7c:	f241 0218 	movw	r2, #4120	; 0x1018
    g_eth_rxpool_ptrs_rpos = 0;
  }

  ///////////////////////////////////////////////////////////////////////
  // finally, turn on the DMA machinery
  ETH->DMATDLAR = (uint32_t)&g_eth_dma_tx_desc[0]; // point TX DMA to first desc
 8000c80:	f241 0810 	movw	r8, #4112	; 0x1010
  ETH->DMARDLAR = (uint32_t)&g_eth_dma_rx_desc[0]; // point RX DMA to first desc
 8000c84:	f241 060c 	movw	r6, #4108	; 0x100c
  /*
  ETH->DMABMR = ETH_DMABMR_AAB | ETH_DMABMR_USP | 
                ETH_DMABMR_RDP_1Beat | ETH_DMABMR_RTPR_1_1 |
                ETH_DMABMR_PBL_1Beat | ETH_DMABMR_EDE;
  */
  ETH->DMAIER = ETH_DMAIER_NISE | ETH_DMAIER_RIE;
 8000c88:	f241 001c 	movw	r0, #4124	; 0x101c

  ///////////////////////////////////////////////////////////////////////
  // finally, turn on the DMA machinery
  ETH->DMATDLAR = (uint32_t)&g_eth_dma_tx_desc[0]; // point TX DMA to first desc
  ETH->DMARDLAR = (uint32_t)&g_eth_dma_rx_desc[0]; // point RX DMA to first desc
  ETH->DMAOMR = ETH_DMAOMR_TSF; // enable store-and-forward mode
 8000c8c:	f44f 1500 	mov.w	r5, #2097152	; 0x200000
    g_eth_rxpool_ptrs_rpos = 0;
  }

  ///////////////////////////////////////////////////////////////////////
  // finally, turn on the DMA machinery
  ETH->DMATDLAR = (uint32_t)&g_eth_dma_tx_desc[0]; // point TX DMA to first desc
 8000c90:	f843 c008 	str.w	ip, [r3, r8]
  ETH->DMARDLAR = (uint32_t)&g_eth_dma_rx_desc[0]; // point RX DMA to first desc
 8000c94:	519f      	str	r7, [r3, r6]
  ETH->DMAOMR = ETH_DMAOMR_TSF; // enable store-and-forward mode
 8000c96:	509d      	str	r5, [r3, r2]
  /*
  ETH->DMABMR = ETH_DMABMR_AAB | ETH_DMABMR_USP | 
                ETH_DMABMR_RDP_1Beat | ETH_DMABMR_RTPR_1_1 |
                ETH_DMABMR_PBL_1Beat | ETH_DMABMR_EDE;
  */
  ETH->DMAIER = ETH_DMAIER_NISE | ETH_DMAIER_RIE;
 8000c98:	501c      	str	r4, [r3, r0]
  ETH->MACCR |= ETH_MACCR_TE | // enable transmitter
 8000c9a:	681d      	ldr	r5, [r3, #0]
 8000c9c:	2430      	movs	r4, #48	; 0x30
 8000c9e:	f045 050c 	orr.w	r5, r5, #12
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8000ca2:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8000ca6:	601d      	str	r5, [r3, #0]
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000ca8:	f881 433d 	strb.w	r4, [r1, #829]	; 0x33d
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8000cac:	6048      	str	r0, [r1, #4]
                ETH_MACCR_RE;  // enable receiver
  NVIC_SetPriority(ETH_IRQn, 3);
  NVIC_EnableIRQ(ETH_IRQn);
  ETH->DMAOMR |= ETH_DMAOMR_ST | ETH_DMAOMR_SR; // enable ethernet DMA tx/rx
 8000cae:	5899      	ldr	r1, [r3, r2]
 8000cb0:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8000cb4:	f041 0102 	orr.w	r1, r1, #2
 8000cb8:	5099      	str	r1, [r3, r2]
}
 8000cba:	b00f      	add	sp, #60	; 0x3c
 8000cbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000cc0:	08009024 	.word	0x08009024
 8000cc4:	20008f38 	.word	0x20008f38
 8000cc8:	2000d380 	.word	0x2000d380
 8000ccc:	20009280 	.word	0x20009280
 8000cd0:	20000f38 	.word	0x20000f38
 8000cd4:	2000907c 	.word	0x2000907c
 8000cd8:	20009380 	.word	0x20009380
 8000cdc:	20008f7c 	.word	0x20008f7c
 8000ce0:	20008f78 	.word	0x20008f78
 8000ce4:	20008f7a 	.word	0x20008f7a
 8000ce8:	40028000 	.word	0x40028000
 8000cec:	00010040 	.word	0x00010040
 8000cf0:	e000e100 	.word	0xe000e100

08000cf4 <eth_vector>:

void eth_vector()
{
 8000cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  volatile uint32_t dmasr = ETH->DMASR;
 8000cf8:	f241 0314 	movw	r3, #4116	; 0x1014
 8000cfc:	4a2c      	ldr	r2, [pc, #176]	; (8000db0 <eth_vector+0xbc>)
  NVIC_EnableIRQ(ETH_IRQn);
  ETH->DMAOMR |= ETH_DMAOMR_ST | ETH_DMAOMR_SR; // enable ethernet DMA tx/rx
}

void eth_vector()
{
 8000cfe:	b083      	sub	sp, #12
  volatile uint32_t dmasr = ETH->DMASR;
 8000d00:	58d1      	ldr	r1, [r2, r3]
 8000d02:	9101      	str	r1, [sp, #4]
  ETH->DMASR = dmasr; // clear pending bits in the status register
 8000d04:	9901      	ldr	r1, [sp, #4]
 8000d06:	50d1      	str	r1, [r2, r3]
  //printf("eth_vector()\r\n");
  if (dmasr & ETH_DMASR_RS)
 8000d08:	9b01      	ldr	r3, [sp, #4]
 8000d0a:	065b      	lsls	r3, r3, #25
 8000d0c:	d548      	bpl.n	8000da0 <eth_vector+0xac>
  {
    // we received one or more frames. spin through and find them...
    while (!(g_eth_dma_rx_next_desc->des0 & 0x80000000))
 8000d0e:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8000dc0 <eth_vector+0xcc>
 8000d12:	f8d8 4000 	ldr.w	r4, [r8]
 8000d16:	6823      	ldr	r3, [r4, #0]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	db41      	blt.n	8000da0 <eth_vector+0xac>
 8000d1c:	4d25      	ldr	r5, [pc, #148]	; (8000db4 <eth_vector+0xc0>)
 8000d1e:	4e26      	ldr	r6, [pc, #152]	; (8000db8 <eth_vector+0xc4>)
 8000d20:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 8000dc4 <eth_vector+0xd0>
 8000d24:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 8000dc8 <eth_vector+0xd4>
    {
      // todo: check all of the error status bits in des0...
      const uint16_t rxn = (g_eth_dma_rx_next_desc->des0 & 0x3fff0000) >> 16;
      // see if this packet will run off the end of the buffer. if so, wrap.
      if (g_eth_rxpool_wpos + rxn >= ETH_RAM_RXPOOL_LEN)
        g_eth_rxpool_wpos = 0;
 8000d28:	f04f 0900 	mov.w	r9, #0
  {
    // we received one or more frames. spin through and find them...
    while (!(g_eth_dma_rx_next_desc->des0 & 0x80000000))
    {
      // todo: check all of the error status bits in des0...
      const uint16_t rxn = (g_eth_dma_rx_next_desc->des0 & 0x3fff0000) >> 16;
 8000d2c:	6823      	ldr	r3, [r4, #0]
      // see if this packet will run off the end of the buffer. if so, wrap.
      if (g_eth_rxpool_wpos + rxn >= ETH_RAM_RXPOOL_LEN)
 8000d2e:	8829      	ldrh	r1, [r5, #0]
  {
    // we received one or more frames. spin through and find them...
    while (!(g_eth_dma_rx_next_desc->des0 & 0x80000000))
    {
      // todo: check all of the error status bits in des0...
      const uint16_t rxn = (g_eth_dma_rx_next_desc->des0 & 0x3fff0000) >> 16;
 8000d30:	f3c3 430d 	ubfx	r3, r3, #16, #14
      // see if this packet will run off the end of the buffer. if so, wrap.
      if (g_eth_rxpool_wpos + rxn >= ETH_RAM_RXPOOL_LEN)
 8000d34:	fa13 f181 	uxtah	r1, r3, r1
 8000d38:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
        g_eth_rxpool_wpos = 0;
 8000d3c:	bfa4      	itt	ge
 8000d3e:	491d      	ldrge	r1, [pc, #116]	; (8000db4 <eth_vector+0xc0>)
 8000d40:	f8a1 9000 	strhge.w	r9, [r1]
  {
    // we received one or more frames. spin through and find them...
    while (!(g_eth_dma_rx_next_desc->des0 & 0x80000000))
    {
      // todo: check all of the error status bits in des0...
      const uint16_t rxn = (g_eth_dma_rx_next_desc->des0 & 0x3fff0000) >> 16;
 8000d44:	b29f      	uxth	r7, r3
      if (g_eth_rxpool_wpos + rxn >= ETH_RAM_RXPOOL_LEN)
        g_eth_rxpool_wpos = 0;
      const uint16_t wp = g_eth_rxpool_ptrs_wpos;
      g_eth_rxpool_start[wp] = &g_eth_rxpool[g_eth_rxpool_wpos];
      g_eth_rxpool_len[wp] = rxn;
      memcpy((uint8_t *)&g_eth_rxpool[g_eth_rxpool_wpos],
 8000d46:	461a      	mov	r2, r3
      // todo: check all of the error status bits in des0...
      const uint16_t rxn = (g_eth_dma_rx_next_desc->des0 & 0x3fff0000) >> 16;
      // see if this packet will run off the end of the buffer. if so, wrap.
      if (g_eth_rxpool_wpos + rxn >= ETH_RAM_RXPOOL_LEN)
        g_eth_rxpool_wpos = 0;
      const uint16_t wp = g_eth_rxpool_ptrs_wpos;
 8000d48:	8833      	ldrh	r3, [r6, #0]
      g_eth_rxpool_start[wp] = &g_eth_rxpool[g_eth_rxpool_wpos];
      g_eth_rxpool_len[wp] = rxn;
 8000d4a:	491c      	ldr	r1, [pc, #112]	; (8000dbc <eth_vector+0xc8>)
      const uint16_t rxn = (g_eth_dma_rx_next_desc->des0 & 0x3fff0000) >> 16;
      // see if this packet will run off the end of the buffer. if so, wrap.
      if (g_eth_rxpool_wpos + rxn >= ETH_RAM_RXPOOL_LEN)
        g_eth_rxpool_wpos = 0;
      const uint16_t wp = g_eth_rxpool_ptrs_wpos;
      g_eth_rxpool_start[wp] = &g_eth_rxpool[g_eth_rxpool_wpos];
 8000d4c:	f8b5 e000 	ldrh.w	lr, [r5]
      // todo: check all of the error status bits in des0...
      const uint16_t rxn = (g_eth_dma_rx_next_desc->des0 & 0x3fff0000) >> 16;
      // see if this packet will run off the end of the buffer. if so, wrap.
      if (g_eth_rxpool_wpos + rxn >= ETH_RAM_RXPOOL_LEN)
        g_eth_rxpool_wpos = 0;
      const uint16_t wp = g_eth_rxpool_ptrs_wpos;
 8000d50:	b29b      	uxth	r3, r3
      g_eth_rxpool_start[wp] = &g_eth_rxpool[g_eth_rxpool_wpos];
 8000d52:	fa1a fe8e 	uxtah	lr, sl, lr
      g_eth_rxpool_len[wp] = rxn;
 8000d56:	f821 7013 	strh.w	r7, [r1, r3, lsl #1]
      memcpy((uint8_t *)&g_eth_rxpool[g_eth_rxpool_wpos],
 8000d5a:	8828      	ldrh	r0, [r5, #0]
             (const uint8_t *)g_eth_dma_rx_next_desc->des2,
 8000d5c:	68a1      	ldr	r1, [r4, #8]
      const uint16_t rxn = (g_eth_dma_rx_next_desc->des0 & 0x3fff0000) >> 16;
      // see if this packet will run off the end of the buffer. if so, wrap.
      if (g_eth_rxpool_wpos + rxn >= ETH_RAM_RXPOOL_LEN)
        g_eth_rxpool_wpos = 0;
      const uint16_t wp = g_eth_rxpool_ptrs_wpos;
      g_eth_rxpool_start[wp] = &g_eth_rxpool[g_eth_rxpool_wpos];
 8000d5e:	f84b e023 	str.w	lr, [fp, r3, lsl #2]
      g_eth_rxpool_len[wp] = rxn;
      memcpy((uint8_t *)&g_eth_rxpool[g_eth_rxpool_wpos],
 8000d62:	fa1a f080 	uxtah	r0, sl, r0
 8000d66:	f001 fa37 	bl	80021d8 <memcpy>
             (const uint8_t *)g_eth_dma_rx_next_desc->des2,
             rxn);
      //printf("ethernet rx %d into rxpool ptr %d\r\n", rxn, wp);
      g_eth_rxpool_ptrs_wpos++;
 8000d6a:	8833      	ldrh	r3, [r6, #0]
 8000d6c:	b29b      	uxth	r3, r3
 8000d6e:	3301      	adds	r3, #1
 8000d70:	b29b      	uxth	r3, r3
 8000d72:	8033      	strh	r3, [r6, #0]
      if (g_eth_rxpool_ptrs_wpos >= ETH_RAM_RXPOOL_NPTR)
 8000d74:	8833      	ldrh	r3, [r6, #0]
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	2b7f      	cmp	r3, #127	; 0x7f
        g_eth_rxpool_ptrs_wpos = 0;
 8000d7a:	bf84      	itt	hi
 8000d7c:	4b0e      	ldrhi	r3, [pc, #56]	; (8000db8 <eth_vector+0xc4>)
 8000d7e:	f8a3 9000 	strhhi.w	r9, [r3]
      g_eth_rxpool_wpos += rxn;
 8000d82:	882b      	ldrh	r3, [r5, #0]
 8000d84:	fa17 f783 	uxtah	r7, r7, r3
 8000d88:	b2bf      	uxth	r7, r7
 8000d8a:	802f      	strh	r7, [r5, #0]
      uint8_t *p = (uint8_t *)g_eth_rx_next_desc->des2;
      for (int i = 0; i < rxn; i++)
        printf("%02d: 0x%02x\r\n", i, p[i]);
*/

      g_eth_dma_rx_next_desc->des0 |= 0x80000000; // give it back to the DMA
 8000d8c:	6823      	ldr	r3, [r4, #0]
 8000d8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d92:	6023      	str	r3, [r4, #0]
      // advance the rx pointer for next time
      g_eth_dma_rx_next_desc = (eth_dma_desc_t *)g_eth_dma_rx_next_desc->des3;
 8000d94:	68e4      	ldr	r4, [r4, #12]
 8000d96:	f8c8 4000 	str.w	r4, [r8]
  ETH->DMASR = dmasr; // clear pending bits in the status register
  //printf("eth_vector()\r\n");
  if (dmasr & ETH_DMASR_RS)
  {
    // we received one or more frames. spin through and find them...
    while (!(g_eth_dma_rx_next_desc->des0 & 0x80000000))
 8000d9a:	6823      	ldr	r3, [r4, #0]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	dac5      	bge.n	8000d2c <eth_vector+0x38>
      g_eth_dma_rx_next_desc->des0 |= 0x80000000; // give it back to the DMA
      // advance the rx pointer for next time
      g_eth_dma_rx_next_desc = (eth_dma_desc_t *)g_eth_dma_rx_next_desc->des3;
    }
  }
  dmasr = ETH->DMASR;
 8000da0:	4a03      	ldr	r2, [pc, #12]	; (8000db0 <eth_vector+0xbc>)
 8000da2:	f241 0314 	movw	r3, #4116	; 0x1014
 8000da6:	58d3      	ldr	r3, [r2, r3]
 8000da8:	9301      	str	r3, [sp, #4]
  //printf("dmasr = 0x%08x\r\n", (int)dmasr);
}
 8000daa:	b003      	add	sp, #12
 8000dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000db0:	40028000 	.word	0x40028000
 8000db4:	2000907c 	.word	0x2000907c
 8000db8:	20008f78 	.word	0x20008f78
 8000dbc:	20008f7c 	.word	0x20008f7c
 8000dc0:	20000008 	.word	0x20000008
 8000dc4:	20009080 	.word	0x20009080
 8000dc8:	20009380 	.word	0x20009380

08000dcc <enet_get_link_status>:

///////////////////////////////////////////////////////////////////////////

uint16_t enet_read_phy_reg(const uint8_t reg_idx)
{
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // ensure MII is idle
 8000dcc:	4907      	ldr	r1, [pc, #28]	; (8000dec <enet_get_link_status+0x20>)
 8000dce:	690b      	ldr	r3, [r1, #16]
 8000dd0:	4a06      	ldr	r2, [pc, #24]	; (8000dec <enet_get_link_status+0x20>)
 8000dd2:	07d8      	lsls	r0, r3, #31
 8000dd4:	d4fb      	bmi.n	8000dce <enet_get_link_status+0x2>
  ETH->MACMIIAR = (ENET_PHY_ADDR << 11) | 
 8000dd6:	f640 0351 	movw	r3, #2129	; 0x851
 8000dda:	6113      	str	r3, [r2, #16]
                  ((reg_idx & 0x1f) << 6) |
                  ETH_MACMIIAR_CR_Div102  | // clock divider
                  ETH_MACMIIAR_MB; 
  while (ETH->MACMIIAR & ETH_MACMIIAR_MB) { } // spin waiting for MII to finish
 8000ddc:	6913      	ldr	r3, [r2, #16]
 8000dde:	4903      	ldr	r1, [pc, #12]	; (8000dec <enet_get_link_status+0x20>)
 8000de0:	07db      	lsls	r3, r3, #31
 8000de2:	d4fb      	bmi.n	8000ddc <enet_get_link_status+0x10>
  return ETH->MACMIIDR & 0xffff;
 8000de4:	6948      	ldr	r0, [r1, #20]
  uint16_t status = enet_read_phy_reg(0x01);
  //printf("PHY status = 0x%02x\r\n", status);
  if (status & 0x04)
    return ENET_LINK_UP;
  return ENET_LINK_DOWN;
}
 8000de6:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8000dea:	4770      	bx	lr
 8000dec:	40028000 	.word	0x40028000

08000df0 <eth_htons>:
  //printf(" rmii status = 0x%04x\r\n", (unsigned)r);
}

// todo: find ways for this to be overridden on CPU's with built-ins for this
uint16_t eth_htons(const uint16_t x)
{
 8000df0:	ba40      	rev16	r0, r0
  return ((x & 0xff) << 8) | ((x >> 8) & 0xff);
}
 8000df2:	b280      	uxth	r0, r0
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop

08000df8 <eth_htonl>:
{
  return ((x & 0x000000ff) << 24)  |
         ((x & 0x0000ff00) << 8)   |
         ((x & 0x00ff0000) >> 8)   |
         ((x & 0xff000000) >> 24);
}
 8000df8:	ba00      	rev	r0, r0
 8000dfa:	4770      	bx	lr

08000dfc <enet_send_udp_ucast>:

void enet_send_udp_ucast(const uint8_t *dest_mac,
                         const uint32_t dest_ip, const uint16_t dest_port,
                         const uint32_t source_ip, const uint16_t source_port,
                         const uint8_t *payload, const uint16_t payload_len)
{
 8000dfc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e00:	4f45      	ldr	r7, [pc, #276]	; (8000f18 <enet_send_udp_ucast+0x11c>)
 8000e02:	f8bd c028 	ldrh.w	ip, [sp, #40]	; 0x28
 8000e06:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8000e0a:	f8df e114 	ldr.w	lr, [pc, #276]	; 8000f20 <enet_send_udp_ucast+0x124>
  eth_udp_header_t *h = (eth_udp_header_t *)&g_eth_udpbuf[0];  
  for (int i = 0; i < 6; i++)
 8000e0e:	2600      	movs	r6, #0
  {
    h->ip.eth.dest_addr[i] = dest_mac[i];
 8000e10:	5d84      	ldrb	r4, [r0, r6]
 8000e12:	55bc      	strb	r4, [r7, r6]
    h->ip.eth.source_addr[i] = g_eth_src_mac[i];
 8000e14:	f81e 8006 	ldrb.w	r8, [lr, r6]
 8000e18:	19bc      	adds	r4, r7, r6
                         const uint32_t dest_ip, const uint16_t dest_port,
                         const uint32_t source_ip, const uint16_t source_port,
                         const uint8_t *payload, const uint16_t payload_len)
{
  eth_udp_header_t *h = (eth_udp_header_t *)&g_eth_udpbuf[0];  
  for (int i = 0; i < 6; i++)
 8000e1a:	3601      	adds	r6, #1
 8000e1c:	2e06      	cmp	r6, #6
  {
    h->ip.eth.dest_addr[i] = dest_mac[i];
    h->ip.eth.source_addr[i] = g_eth_src_mac[i];
 8000e1e:	f884 8006 	strb.w	r8, [r4, #6]
                         const uint8_t *payload, const uint16_t payload_len)
{
  eth_udp_header_t *h = (eth_udp_header_t *)&g_eth_udpbuf[0];  
  for (int i = 0; i < 6; i++)
  {
    h->ip.eth.dest_addr[i] = dest_mac[i];
 8000e22:	4c3d      	ldr	r4, [pc, #244]	; (8000f18 <enet_send_udp_ucast+0x11c>)
                         const uint32_t dest_ip, const uint16_t dest_port,
                         const uint32_t source_ip, const uint16_t source_port,
                         const uint8_t *payload, const uint16_t payload_len)
{
  eth_udp_header_t *h = (eth_udp_header_t *)&g_eth_udpbuf[0];  
  for (int i = 0; i < 6; i++)
 8000e24:	d1f4      	bne.n	8000e10 <enet_send_udp_ucast+0x14>
  {
    h->ip.eth.dest_addr[i] = dest_mac[i];
    h->ip.eth.source_addr[i] = g_eth_src_mac[i];
  }
  h->ip.eth.ethertype = eth_htons(ETH_ETHERTYPE_IP);
  h->ip.header_len = ETH_IP_HEADER_LEN;
 8000e26:	f894 e00e 	ldrb.w	lr, [r4, #14]
  h->ip.version = ETH_IP_VERSION; // ipv4
  h->ip.ecn = 0;
 8000e2a:	7be7      	ldrb	r7, [r4, #15]
  h->ip.diff_serv = 0;
  h->ip.len = eth_htons(20 + 8 + payload_len);
  h->ip.id = 0;
 8000e2c:	8a60      	ldrh	r0, [r4, #18]
  h->ip.flag_frag = eth_htons(ETH_IP_DONT_FRAGMENT);
  h->ip.ttl = 1; // not sure here...
  h->ip.proto = ETH_IP_PROTO_UDP;
  h->ip.checksum = 0; // will be filled by the ethernet TX machinery
 8000e2e:	8b26      	ldrh	r6, [r4, #24]
}

void eth_send_raw_packet(uint8_t *pkt, uint16_t pkt_len)
{
  //printf("eth tx %d\r\n", pkt_len);
  if (g_eth_dma_tx_next_desc->des0 & 0x80000000) // check the OWN bit
 8000e30:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8000f24 <enet_send_udp_ucast+0x128>
  {
    h->ip.eth.dest_addr[i] = dest_mac[i];
    h->ip.eth.source_addr[i] = g_eth_src_mac[i];
  }
  h->ip.eth.ethertype = eth_htons(ETH_ETHERTYPE_IP);
  h->ip.header_len = ETH_IP_HEADER_LEN;
 8000e34:	f04f 0905 	mov.w	r9, #5
 8000e38:	fa91 fa81 	rev.w	sl, r1
 8000e3c:	f369 0e03 	bfi	lr, r9, #0, #4
 8000e40:	ba1b      	rev	r3, r3
  h->ip.version = ETH_IP_VERSION; // ipv4
 8000e42:	f04f 0904 	mov.w	r9, #4
  h->ip.ecn = 0;
  h->ip.diff_serv = 0;
 8000e46:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
  h->ip.source_addr = eth_htonl(source_ip); //); // todo: something else
  h->dest_port = eth_htons(dest_port);
  h->source_port = eth_htons(source_port); //1234;
  h->len = eth_htons(8 + payload_len);
  h->checksum = 0; // will be filled by the ethernet TX machinery
  memcpy(g_eth_udpbuf + sizeof(eth_udp_header_t), payload, payload_len);
 8000e4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  h->ip.id = 0;
  h->ip.flag_frag = eth_htons(ETH_IP_DONT_FRAGMENT);
  h->ip.ttl = 1; // not sure here...
  h->ip.proto = ETH_IP_PROTO_UDP;
  h->ip.checksum = 0; // will be filled by the ethernet TX machinery
  h->ip.dest_addr = eth_htonl(dest_ip);
 8000e4c:	f8c4 a01e 	str.w	sl, [r4, #30]
  h->ip.eth.ethertype = eth_htons(ETH_ETHERTYPE_IP);
  h->ip.header_len = ETH_IP_HEADER_LEN;
  h->ip.version = ETH_IP_VERSION; // ipv4
  h->ip.ecn = 0;
  h->ip.diff_serv = 0;
  h->ip.len = eth_htons(20 + 8 + payload_len);
 8000e50:	f105 0b1c 	add.w	fp, r5, #28
 8000e54:	fa9c fc9c 	rev16.w	ip, ip
    h->ip.eth.dest_addr[i] = dest_mac[i];
    h->ip.eth.source_addr[i] = g_eth_src_mac[i];
  }
  h->ip.eth.ethertype = eth_htons(ETH_ETHERTYPE_IP);
  h->ip.header_len = ETH_IP_HEADER_LEN;
  h->ip.version = ETH_IP_VERSION; // ipv4
 8000e58:	f369 1e07 	bfi	lr, r9, #4, #4
  h->ip.ecn = 0;
  h->ip.diff_serv = 0;
 8000e5c:	f36f 0787 	bfc	r7, #2, #6
  h->ip.checksum = 0; // will be filled by the ethernet TX machinery
  h->ip.dest_addr = eth_htonl(dest_ip);
  h->ip.source_addr = eth_htonl(source_ip); //); // todo: something else
  h->dest_port = eth_htons(dest_port);
  h->source_port = eth_htons(source_port); //1234;
  h->len = eth_htons(8 + payload_len);
 8000e60:	f105 0a08 	add.w	sl, r5, #8
  h->ip.flag_frag = eth_htons(ETH_IP_DONT_FRAGMENT);
  h->ip.ttl = 1; // not sure here...
  h->ip.proto = ETH_IP_PROTO_UDP;
  h->ip.checksum = 0; // will be filled by the ethernet TX machinery
  h->ip.dest_addr = eth_htonl(dest_ip);
  h->ip.source_addr = eth_htonl(source_ip); //); // todo: something else
 8000e64:	f8c4 301a 	str.w	r3, [r4, #26]
  for (int i = 0; i < 6; i++)
  {
    h->ip.eth.dest_addr[i] = dest_mac[i];
    h->ip.eth.source_addr[i] = g_eth_src_mac[i];
  }
  h->ip.eth.ethertype = eth_htons(ETH_ETHERTYPE_IP);
 8000e68:	2308      	movs	r3, #8
 8000e6a:	ba52      	rev16	r2, r2
  h->ip.header_len = ETH_IP_HEADER_LEN;
  h->ip.version = ETH_IP_VERSION; // ipv4
  h->ip.ecn = 0;
  h->ip.diff_serv = 0;
  h->ip.len = eth_htons(20 + 8 + payload_len);
  h->ip.id = 0;
 8000e6c:	f36f 000f 	bfc	r0, #0, #16
  h->ip.flag_frag = eth_htons(ETH_IP_DONT_FRAGMENT);
  h->ip.ttl = 1; // not sure here...
  h->ip.proto = ETH_IP_PROTO_UDP;
  h->ip.checksum = 0; // will be filled by the ethernet TX machinery
 8000e70:	f36f 060f 	bfc	r6, #0, #16
  h->ip.dest_addr = eth_htonl(dest_ip);
  h->ip.source_addr = eth_htonl(source_ip); //); // todo: something else
  h->dest_port = eth_htons(dest_port);
  h->source_port = eth_htons(source_port); //1234;
 8000e74:	f8a4 c022 	strh.w	ip, [r4, #34]	; 0x22
    h->ip.eth.dest_addr[i] = dest_mac[i];
    h->ip.eth.source_addr[i] = g_eth_src_mac[i];
  }
  h->ip.eth.ethertype = eth_htons(ETH_ETHERTYPE_IP);
  h->ip.header_len = ETH_IP_HEADER_LEN;
  h->ip.version = ETH_IP_VERSION; // ipv4
 8000e78:	f884 e00e 	strb.w	lr, [r4, #14]
  h->ip.ecn = 0;
  h->ip.diff_serv = 0;
  h->ip.len = eth_htons(20 + 8 + payload_len);
  h->ip.id = 0;
  h->ip.flag_frag = eth_htons(ETH_IP_DONT_FRAGMENT);
  h->ip.ttl = 1; // not sure here...
 8000e7c:	f04f 0c01 	mov.w	ip, #1
  h->ip.proto = ETH_IP_PROTO_UDP;
 8000e80:	f04f 0e11 	mov.w	lr, #17
  }
  h->ip.eth.ethertype = eth_htons(ETH_ETHERTYPE_IP);
  h->ip.header_len = ETH_IP_HEADER_LEN;
  h->ip.version = ETH_IP_VERSION; // ipv4
  h->ip.ecn = 0;
  h->ip.diff_serv = 0;
 8000e84:	73e7      	strb	r7, [r4, #15]
  for (int i = 0; i < 6; i++)
  {
    h->ip.eth.dest_addr[i] = dest_mac[i];
    h->ip.eth.source_addr[i] = g_eth_src_mac[i];
  }
  h->ip.eth.ethertype = eth_htons(ETH_ETHERTYPE_IP);
 8000e86:	81a3      	strh	r3, [r4, #12]
  h->ip.dest_addr = eth_htonl(dest_ip);
  h->ip.source_addr = eth_htonl(source_ip); //); // todo: something else
  h->dest_port = eth_htons(dest_port);
  h->source_port = eth_htons(source_port); //1234;
  h->len = eth_htons(8 + payload_len);
  h->checksum = 0; // will be filled by the ethernet TX machinery
 8000e88:	2700      	movs	r7, #0
  h->ip.version = ETH_IP_VERSION; // ipv4
  h->ip.ecn = 0;
  h->ip.diff_serv = 0;
  h->ip.len = eth_htons(20 + 8 + payload_len);
  h->ip.id = 0;
  h->ip.flag_frag = eth_htons(ETH_IP_DONT_FRAGMENT);
 8000e8a:	f04f 0340 	mov.w	r3, #64	; 0x40
 8000e8e:	fa9b fb9b 	rev16.w	fp, fp
 8000e92:	fa9a fa9a 	rev16.w	sl, sl
  h->ip.ttl = 1; // not sure here...
  h->ip.proto = ETH_IP_PROTO_UDP;
  h->ip.checksum = 0; // will be filled by the ethernet TX machinery
  h->ip.dest_addr = eth_htonl(dest_ip);
  h->ip.source_addr = eth_htonl(source_ip); //); // todo: something else
  h->dest_port = eth_htons(dest_port);
 8000e96:	84a2      	strh	r2, [r4, #36]	; 0x24
  h->ip.header_len = ETH_IP_HEADER_LEN;
  h->ip.version = ETH_IP_VERSION; // ipv4
  h->ip.ecn = 0;
  h->ip.diff_serv = 0;
  h->ip.len = eth_htons(20 + 8 + payload_len);
  h->ip.id = 0;
 8000e98:	8260      	strh	r0, [r4, #18]
  h->ip.flag_frag = eth_htons(ETH_IP_DONT_FRAGMENT);
  h->ip.ttl = 1; // not sure here...
  h->ip.proto = ETH_IP_PROTO_UDP;
  h->ip.checksum = 0; // will be filled by the ethernet TX machinery
 8000e9a:	8326      	strh	r6, [r4, #24]
  h->ip.source_addr = eth_htonl(source_ip); //); // todo: something else
  h->dest_port = eth_htons(dest_port);
  h->source_port = eth_htons(source_port); //1234;
  h->len = eth_htons(8 + payload_len);
  h->checksum = 0; // will be filled by the ethernet TX machinery
  memcpy(g_eth_udpbuf + sizeof(eth_udp_header_t), payload, payload_len);
 8000e9c:	462a      	mov	r2, r5
  h->ip.version = ETH_IP_VERSION; // ipv4
  h->ip.ecn = 0;
  h->ip.diff_serv = 0;
  h->ip.len = eth_htons(20 + 8 + payload_len);
  h->ip.id = 0;
  h->ip.flag_frag = eth_htons(ETH_IP_DONT_FRAGMENT);
 8000e9e:	82a3      	strh	r3, [r4, #20]
  h->ip.source_addr = eth_htonl(source_ip); //); // todo: something else
  h->dest_port = eth_htons(dest_port);
  h->source_port = eth_htons(source_port); //1234;
  h->len = eth_htons(8 + payload_len);
  h->checksum = 0; // will be filled by the ethernet TX machinery
  memcpy(g_eth_udpbuf + sizeof(eth_udp_header_t), payload, payload_len);
 8000ea0:	f104 002a 	add.w	r0, r4, #42	; 0x2a
  h->ip.eth.ethertype = eth_htons(ETH_ETHERTYPE_IP);
  h->ip.header_len = ETH_IP_HEADER_LEN;
  h->ip.version = ETH_IP_VERSION; // ipv4
  h->ip.ecn = 0;
  h->ip.diff_serv = 0;
  h->ip.len = eth_htons(20 + 8 + payload_len);
 8000ea4:	f8a4 b010 	strh.w	fp, [r4, #16]
  h->ip.checksum = 0; // will be filled by the ethernet TX machinery
  h->ip.dest_addr = eth_htonl(dest_ip);
  h->ip.source_addr = eth_htonl(source_ip); //); // todo: something else
  h->dest_port = eth_htons(dest_port);
  h->source_port = eth_htons(source_port); //1234;
  h->len = eth_htons(8 + payload_len);
 8000ea8:	f8a4 a026 	strh.w	sl, [r4, #38]	; 0x26
  h->ip.ecn = 0;
  h->ip.diff_serv = 0;
  h->ip.len = eth_htons(20 + 8 + payload_len);
  h->ip.id = 0;
  h->ip.flag_frag = eth_htons(ETH_IP_DONT_FRAGMENT);
  h->ip.ttl = 1; // not sure here...
 8000eac:	f884 c016 	strb.w	ip, [r4, #22]
  h->ip.proto = ETH_IP_PROTO_UDP;
 8000eb0:	f884 e017 	strb.w	lr, [r4, #23]
  h->ip.dest_addr = eth_htonl(dest_ip);
  h->ip.source_addr = eth_htonl(source_ip); //); // todo: something else
  h->dest_port = eth_htons(dest_port);
  h->source_port = eth_htons(source_port); //1234;
  h->len = eth_htons(8 + payload_len);
  h->checksum = 0; // will be filled by the ethernet TX machinery
 8000eb4:	8527      	strh	r7, [r4, #40]	; 0x28
  memcpy(g_eth_udpbuf + sizeof(eth_udp_header_t), payload, payload_len);
 8000eb6:	f001 f98f 	bl	80021d8 <memcpy>
}

void eth_send_raw_packet(uint8_t *pkt, uint16_t pkt_len)
{
  //printf("eth tx %d\r\n", pkt_len);
  if (g_eth_dma_tx_next_desc->des0 & 0x80000000) // check the OWN bit
 8000eba:	f8d8 6000 	ldr.w	r6, [r8]
 8000ebe:	6833      	ldr	r3, [r6, #0]
  h->dest_port = eth_htons(dest_port);
  h->source_port = eth_htons(source_port); //1234;
  h->len = eth_htons(8 + payload_len);
  h->checksum = 0; // will be filled by the ethernet TX machinery
  memcpy(g_eth_udpbuf + sizeof(eth_udp_header_t), payload, payload_len);
  eth_send_raw_packet(g_eth_udpbuf, sizeof(eth_udp_header_t) + payload_len);
 8000ec0:	352a      	adds	r5, #42	; 0x2a
}

void eth_send_raw_packet(uint8_t *pkt, uint16_t pkt_len)
{
  //printf("eth tx %d\r\n", pkt_len);
  if (g_eth_dma_tx_next_desc->des0 & 0x80000000) // check the OWN bit
 8000ec2:	42bb      	cmp	r3, r7
  h->dest_port = eth_htons(dest_port);
  h->source_port = eth_htons(source_port); //1234;
  h->len = eth_htons(8 + payload_len);
  h->checksum = 0; // will be filled by the ethernet TX machinery
  memcpy(g_eth_udpbuf + sizeof(eth_udp_header_t), payload, payload_len);
  eth_send_raw_packet(g_eth_udpbuf, sizeof(eth_udp_header_t) + payload_len);
 8000ec4:	b2ad      	uxth	r5, r5
}

void eth_send_raw_packet(uint8_t *pkt, uint16_t pkt_len)
{
  //printf("eth tx %d\r\n", pkt_len);
  if (g_eth_dma_tx_next_desc->des0 & 0x80000000) // check the OWN bit
 8000ec6:	db1e      	blt.n	8000f06 <enet_send_udp_ucast+0x10a>
         (unsigned)g_eth_tx_next_desc->control);
 */
  uint8_t *buf = (uint8_t *)g_eth_dma_tx_next_desc->des2;
  if (pkt_len > ETH_NBUF)
    pkt_len = ETH_NBUF; // let's not blow through our packet buffer
  memcpy(buf, pkt, pkt_len);
 8000ec8:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8000ecc:	bf28      	it	cs
 8000ece:	f44f 6500 	movcs.w	r5, #2048	; 0x800
 8000ed2:	4621      	mov	r1, r4
 8000ed4:	462a      	mov	r2, r5
  /*
  printf("sending using TX descriptor %08x status 0x%08x\r\n", 
         (unsigned)g_eth_tx_next_desc,
         (unsigned)g_eth_tx_next_desc->control);
 */
  uint8_t *buf = (uint8_t *)g_eth_dma_tx_next_desc->des2;
 8000ed6:	68b0      	ldr	r0, [r6, #8]
  if (pkt_len > ETH_NBUF)
    pkt_len = ETH_NBUF; // let's not blow through our packet buffer
  memcpy(buf, pkt, pkt_len);
 8000ed8:	f001 f97e 	bl	80021d8 <memcpy>
  g_eth_dma_tx_next_desc->des1 = pkt_len;
 8000edc:	6075      	str	r5, [r6, #4]
  g_eth_dma_tx_next_desc->des0 |= 0x30000000; // LS+FS = single-buffer packet
 8000ede:	6832      	ldr	r2, [r6, #0]
  g_eth_dma_tx_next_desc->des0 |= 0x80000000; // give ownership to ethernet DMA
  // see if DMA is stuck because it wasn't transmitting (which will almost
  // always be the case). if it's stuck, kick it into motion again
  if ((ETH->DMASR & ETH_DMASR_TPS) == ETH_DMASR_TPS_Suspended)
 8000ee0:	4b0e      	ldr	r3, [pc, #56]	; (8000f1c <enet_send_udp_ucast+0x120>)
  uint8_t *buf = (uint8_t *)g_eth_dma_tx_next_desc->des2;
  if (pkt_len > ETH_NBUF)
    pkt_len = ETH_NBUF; // let's not blow through our packet buffer
  memcpy(buf, pkt, pkt_len);
  g_eth_dma_tx_next_desc->des1 = pkt_len;
  g_eth_dma_tx_next_desc->des0 |= 0x30000000; // LS+FS = single-buffer packet
 8000ee2:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8000ee6:	6032      	str	r2, [r6, #0]
  g_eth_dma_tx_next_desc->des0 |= 0x80000000; // give ownership to ethernet DMA
 8000ee8:	6831      	ldr	r1, [r6, #0]
  // see if DMA is stuck because it wasn't transmitting (which will almost
  // always be the case). if it's stuck, kick it into motion again
  if ((ETH->DMASR & ETH_DMASR_TPS) == ETH_DMASR_TPS_Suspended)
 8000eea:	f241 0214 	movw	r2, #4116	; 0x1014
  if (pkt_len > ETH_NBUF)
    pkt_len = ETH_NBUF; // let's not blow through our packet buffer
  memcpy(buf, pkt, pkt_len);
  g_eth_dma_tx_next_desc->des1 = pkt_len;
  g_eth_dma_tx_next_desc->des0 |= 0x30000000; // LS+FS = single-buffer packet
  g_eth_dma_tx_next_desc->des0 |= 0x80000000; // give ownership to ethernet DMA
 8000eee:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8000ef2:	6031      	str	r1, [r6, #0]
  // see if DMA is stuck because it wasn't transmitting (which will almost
  // always be the case). if it's stuck, kick it into motion again
  if ((ETH->DMASR & ETH_DMASR_TPS) == ETH_DMASR_TPS_Suspended)
 8000ef4:	5899      	ldr	r1, [r3, r2]
 8000ef6:	f401 01e0 	and.w	r1, r1, #7340032	; 0x700000
 8000efa:	f5b1 0fc0 	cmp.w	r1, #6291456	; 0x600000
 8000efe:	d004      	beq.n	8000f0a <enet_send_udp_ucast+0x10e>
  {
    ETH->DMASR = ETH_DMASR_TBUS; // clear the buffer-unavailable flag
    ETH->DMATPDR = 0; // transmit poll demand = kick it moving again
  }
  g_eth_dma_tx_next_desc = (eth_dma_desc_t *)g_eth_dma_tx_next_desc->des3;
 8000f00:	68f3      	ldr	r3, [r6, #12]
 8000f02:	f8c8 3000 	str.w	r3, [r8]
 8000f06:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  // see if DMA is stuck because it wasn't transmitting (which will almost
  // always be the case). if it's stuck, kick it into motion again
  if ((ETH->DMASR & ETH_DMASR_TPS) == ETH_DMASR_TPS_Suspended)
  {
    ETH->DMASR = ETH_DMASR_TBUS; // clear the buffer-unavailable flag
    ETH->DMATPDR = 0; // transmit poll demand = kick it moving again
 8000f0a:	f241 0104 	movw	r1, #4100	; 0x1004
  g_eth_dma_tx_next_desc->des0 |= 0x80000000; // give ownership to ethernet DMA
  // see if DMA is stuck because it wasn't transmitting (which will almost
  // always be the case). if it's stuck, kick it into motion again
  if ((ETH->DMASR & ETH_DMASR_TPS) == ETH_DMASR_TPS_Suspended)
  {
    ETH->DMASR = ETH_DMASR_TBUS; // clear the buffer-unavailable flag
 8000f0e:	f843 9002 	str.w	r9, [r3, r2]
    ETH->DMATPDR = 0; // transmit poll demand = kick it moving again
 8000f12:	505f      	str	r7, [r3, r1]
 8000f14:	e7f4      	b.n	8000f00 <enet_send_udp_ucast+0x104>
 8000f16:	bf00      	nop
 8000f18:	20000958 	.word	0x20000958
 8000f1c:	40028000 	.word	0x40028000
 8000f20:	0800903c 	.word	0x0800903c
 8000f24:	20000004 	.word	0x20000004

08000f28 <enet_send_udp_mcast>:
static uint8_t  g_eth_src_mac[6] = { 0xa4, 0xf3, 0xc1, 0x00, 0x01, 0x00 };
static uint32_t g_eth_src_ip = 0x0a42ab99; // todo... not this.

void enet_send_udp_mcast(const uint32_t mcast_ip, const uint16_t mcast_port,
                         const uint8_t *payload, const uint16_t payload_len)
{
 8000f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f2a:	b087      	sub	sp, #28
  uint8_t dest_mac[6] = { 0x01, 0x00, 0x5e, 
                          (uint8_t)((mcast_ip & 0xff0000) >> 16),
                          (uint8_t)((mcast_ip & 0x00ff00) >>  8),
                          (uint8_t) (mcast_ip & 0x0000ff) };
  enet_send_udp_ucast(dest_mac, mcast_ip, mcast_port,
 8000f2c:	e88d 000e 	stmia.w	sp, {r1, r2, r3}

void enet_send_udp_mcast(const uint32_t mcast_ip, const uint16_t mcast_port,
                         const uint8_t *payload, const uint16_t payload_len)
{
  uint8_t dest_mac[6] = { 0x01, 0x00, 0x5e, 
                          (uint8_t)((mcast_ip & 0xff0000) >> 16),
 8000f30:	f3c0 4c07 	ubfx	ip, r0, #16, #8
                          (uint8_t)((mcast_ip & 0x00ff00) >>  8),
 8000f34:	f3c0 2e07 	ubfx	lr, r0, #8, #8
static uint8_t  g_eth_src_mac[6] = { 0xa4, 0xf3, 0xc1, 0x00, 0x01, 0x00 };
static uint32_t g_eth_src_ip = 0x0a42ab99; // todo... not this.

void enet_send_udp_mcast(const uint32_t mcast_ip, const uint16_t mcast_port,
                         const uint8_t *payload, const uint16_t payload_len)
{
 8000f38:	4604      	mov	r4, r0
  uint8_t dest_mac[6] = { 0x01, 0x00, 0x5e, 
                          (uint8_t)((mcast_ip & 0xff0000) >> 16),
                          (uint8_t)((mcast_ip & 0x00ff00) >>  8),
                          (uint8_t) (mcast_ip & 0x0000ff) };
  enet_send_udp_ucast(dest_mac, mcast_ip, mcast_port,
 8000f3a:	460a      	mov	r2, r1
static uint32_t g_eth_src_ip = 0x0a42ab99; // todo... not this.

void enet_send_udp_mcast(const uint32_t mcast_ip, const uint16_t mcast_port,
                         const uint8_t *payload, const uint16_t payload_len)
{
  uint8_t dest_mac[6] = { 0x01, 0x00, 0x5e, 
 8000f3c:	2701      	movs	r7, #1
                          (uint8_t)((mcast_ip & 0xff0000) >> 16),
                          (uint8_t)((mcast_ip & 0x00ff00) >>  8),
                          (uint8_t) (mcast_ip & 0x0000ff) };
  enet_send_udp_ucast(dest_mac, mcast_ip, mcast_port,
 8000f3e:	4601      	mov	r1, r0
static uint32_t g_eth_src_ip = 0x0a42ab99; // todo... not this.

void enet_send_udp_mcast(const uint32_t mcast_ip, const uint16_t mcast_port,
                         const uint8_t *payload, const uint16_t payload_len)
{
  uint8_t dest_mac[6] = { 0x01, 0x00, 0x5e, 
 8000f40:	2600      	movs	r6, #0
 8000f42:	255e      	movs	r5, #94	; 0x5e
                          (uint8_t)((mcast_ip & 0xff0000) >> 16),
                          (uint8_t)((mcast_ip & 0x00ff00) >>  8),
                          (uint8_t) (mcast_ip & 0x0000ff) };
  enet_send_udp_ucast(dest_mac, mcast_ip, mcast_port,
 8000f44:	a804      	add	r0, sp, #16
 8000f46:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <enet_send_udp_mcast+0x40>)
                         const uint8_t *payload, const uint16_t payload_len)
{
  uint8_t dest_mac[6] = { 0x01, 0x00, 0x5e, 
                          (uint8_t)((mcast_ip & 0xff0000) >> 16),
                          (uint8_t)((mcast_ip & 0x00ff00) >>  8),
                          (uint8_t) (mcast_ip & 0x0000ff) };
 8000f48:	f88d 4015 	strb.w	r4, [sp, #21]

void enet_send_udp_mcast(const uint32_t mcast_ip, const uint16_t mcast_port,
                         const uint8_t *payload, const uint16_t payload_len)
{
  uint8_t dest_mac[6] = { 0x01, 0x00, 0x5e, 
                          (uint8_t)((mcast_ip & 0xff0000) >> 16),
 8000f4c:	f88d c013 	strb.w	ip, [sp, #19]
                          (uint8_t)((mcast_ip & 0x00ff00) >>  8),
 8000f50:	f88d e014 	strb.w	lr, [sp, #20]
static uint32_t g_eth_src_ip = 0x0a42ab99; // todo... not this.

void enet_send_udp_mcast(const uint32_t mcast_ip, const uint16_t mcast_port,
                         const uint8_t *payload, const uint16_t payload_len)
{
  uint8_t dest_mac[6] = { 0x01, 0x00, 0x5e, 
 8000f54:	f88d 7010 	strb.w	r7, [sp, #16]
 8000f58:	f88d 6011 	strb.w	r6, [sp, #17]
 8000f5c:	f88d 5012 	strb.w	r5, [sp, #18]
                          (uint8_t)((mcast_ip & 0xff0000) >> 16),
                          (uint8_t)((mcast_ip & 0x00ff00) >>  8),
                          (uint8_t) (mcast_ip & 0x0000ff) };
  enet_send_udp_ucast(dest_mac, mcast_ip, mcast_port,
 8000f60:	f7ff ff4c 	bl	8000dfc <enet_send_udp_ucast>
                      0x0a0a0002 /*mcast_ip*/, mcast_port,
                      payload, payload_len);
}
 8000f64:	b007      	add	sp, #28
 8000f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f68:	0a0a0002 	.word	0x0a0a0002

08000f6c <enet_process_rx_ring>:
  eth_send_raw_packet(raw_test_pkt, 68); //sizeof(reg_idx) + payload_len);
  */
}

void enet_process_rx_ring()
{
 8000f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f70:	4e4b      	ldr	r6, [pc, #300]	; (80010a0 <enet_process_rx_ring+0x134>)
 8000f72:	4f4c      	ldr	r7, [pc, #304]	; (80010a4 <enet_process_rx_ring+0x138>)
  while (g_eth_rxpool_ptrs_wpos != g_eth_rxpool_ptrs_rpos)
  {
    const uint16_t rp = g_eth_rxpool_ptrs_rpos;
    const uint8_t *start = (const uint8_t *)g_eth_rxpool_start[rp];
 8000f74:	f8df a134 	ldr.w	sl, [pc, #308]	; 80010ac <enet_process_rx_ring+0x140>
    const uint16_t len = g_eth_rxpool_len[rp];
 8000f78:	f8df 9134 	ldr.w	r9, [pc, #308]	; 80010b0 <enet_process_rx_ring+0x144>
  eth_send_raw_packet(raw_test_pkt, 68); //sizeof(reg_idx) + payload_len);
  */
}

void enet_process_rx_ring()
{
 8000f7c:	b083      	sub	sp, #12
  while (g_eth_rxpool_ptrs_wpos != g_eth_rxpool_ptrs_rpos)
 8000f7e:	46b0      	mov	r8, r6
 8000f80:	883a      	ldrh	r2, [r7, #0]
 8000f82:	8833      	ldrh	r3, [r6, #0]
 8000f84:	b292      	uxth	r2, r2
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d072      	beq.n	8001072 <enet_process_rx_ring+0x106>
  {
    const uint16_t rp = g_eth_rxpool_ptrs_rpos;
 8000f8c:	f8b8 3000 	ldrh.w	r3, [r8]
 8000f90:	f8df c120 	ldr.w	ip, [pc, #288]	; 80010b4 <enet_process_rx_ring+0x148>
 8000f94:	b29b      	uxth	r3, r3
    //printf("eth rxpool wpos = %d rpos = %d start %d len %d\r\n",
    //       g_eth_rxpool_ptrs_wpos,
    //       rp, start - g_eth_rxpool, len);
    // see if it's addressed to us
    const eth_eth_header_t *e = (const eth_eth_header_t *)start;
    uint8_t unicast_match = 1, multicast_match = 1, broadcast_match = 1;
 8000f96:	2101      	movs	r1, #1
{
  while (g_eth_rxpool_ptrs_wpos != g_eth_rxpool_ptrs_rpos)
  {
    const uint16_t rp = g_eth_rxpool_ptrs_rpos;
    const uint8_t *start = (const uint8_t *)g_eth_rxpool_start[rp];
    const uint16_t len = g_eth_rxpool_len[rp];
 8000f98:	f839 b013 	ldrh.w	fp, [r9, r3, lsl #1]
void enet_process_rx_ring()
{
  while (g_eth_rxpool_ptrs_wpos != g_eth_rxpool_ptrs_rpos)
  {
    const uint16_t rp = g_eth_rxpool_ptrs_rpos;
    const uint8_t *start = (const uint8_t *)g_eth_rxpool_start[rp];
 8000f9c:	f85a 5023 	ldr.w	r5, [sl, r3, lsl #2]
    const uint16_t len = g_eth_rxpool_len[rp];
 8000fa0:	fa1f fb8b 	uxth.w	fp, fp
    //printf("eth rxpool wpos = %d rpos = %d start %d len %d\r\n",
    //       g_eth_rxpool_ptrs_wpos,
    //       rp, start - g_eth_rxpool, len);
    // see if it's addressed to us
    const eth_eth_header_t *e = (const eth_eth_header_t *)start;
    uint8_t unicast_match = 1, multicast_match = 1, broadcast_match = 1;
 8000fa4:	4608      	mov	r0, r1
    /*
    printf("rx mac: %02x:%02x:%02x:%02x:%02x:%02x\r\n",
           e->dest_addr[0], e->dest_addr[1], e->dest_addr[2],
           e->dest_addr[3], e->dest_addr[4], e->dest_addr[5]);
    */
    for (int i = 0; i < 6; i++)
 8000fa6:	2300      	movs	r3, #0
    {
      if (e->dest_addr[i] != g_eth_src_mac[i])
 8000fa8:	5cea      	ldrb	r2, [r5, r3]
 8000faa:	f81c 4003 	ldrb.w	r4, [ip, r3]
    /*
    printf("rx mac: %02x:%02x:%02x:%02x:%02x:%02x\r\n",
           e->dest_addr[0], e->dest_addr[1], e->dest_addr[2],
           e->dest_addr[3], e->dest_addr[4], e->dest_addr[5]);
    */
    for (int i = 0; i < 6; i++)
 8000fae:	3301      	adds	r3, #1
    {
      if (e->dest_addr[i] != g_eth_src_mac[i])
        unicast_match = 0;
 8000fb0:	4294      	cmp	r4, r2
 8000fb2:	bf18      	it	ne
 8000fb4:	2000      	movne	r0, #0
      if (e->dest_addr[i] != 0xff)
        broadcast_match = 0;
 8000fb6:	2aff      	cmp	r2, #255	; 0xff
 8000fb8:	bf18      	it	ne
 8000fba:	2100      	movne	r1, #0
    /*
    printf("rx mac: %02x:%02x:%02x:%02x:%02x:%02x\r\n",
           e->dest_addr[0], e->dest_addr[1], e->dest_addr[2],
           e->dest_addr[3], e->dest_addr[4], e->dest_addr[5]);
    */
    for (int i = 0; i < 6; i++)
 8000fbc:	2b06      	cmp	r3, #6
 8000fbe:	d1f3      	bne.n	8000fa8 <enet_process_rx_ring+0x3c>
      if (e->dest_addr[i] != g_eth_src_mac[i])
        unicast_match = 0;
      if (e->dest_addr[i] != 0xff)
        broadcast_match = 0;
    }
    if (e->dest_addr[0] != 0x01 ||
 8000fc0:	782b      	ldrb	r3, [r5, #0]
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d04e      	beq.n	8001064 <enet_process_rx_ring+0xf8>
        e->dest_addr[1] != 0x00 ||
        e->dest_addr[2] != 0x5e)
      multicast_match = 0;
    //printf("  ucast_match = %d, bcast_match = %d, mcast_match = %d\r\n",
    //       unicast_match, broadcast_match, multicast_match);
    if (unicast_match || multicast_match || broadcast_match)
 8000fc6:	b900      	cbnz	r0, 8000fca <enet_process_rx_ring+0x5e>
 8000fc8:	b129      	cbz	r1, 8000fd6 <enet_process_rx_ring+0x6a>

static void eth_dispatch_eth(const uint8_t *data, const uint16_t len)
{
  // dispatch according to protocol
  const eth_eth_header_t *e = (const eth_eth_header_t *)data;
  switch (eth_htons(e->ethertype))
 8000fca:	89aa      	ldrh	r2, [r5, #12]
 8000fcc:	ba52      	rev16	r2, r2
 8000fce:	b292      	uxth	r2, r2
 8000fd0:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8000fd4:	d00a      	beq.n	8000fec <enet_process_rx_ring+0x80>
      multicast_match = 0;
    //printf("  ucast_match = %d, bcast_match = %d, mcast_match = %d\r\n",
    //       unicast_match, broadcast_match, multicast_match);
    if (unicast_match || multicast_match || broadcast_match)
      eth_dispatch_eth(start, len);
    if (++g_eth_rxpool_ptrs_rpos >= ETH_RAM_RXPOOL_NPTR)
 8000fd6:	8833      	ldrh	r3, [r6, #0]
 8000fd8:	4a31      	ldr	r2, [pc, #196]	; (80010a0 <enet_process_rx_ring+0x134>)
 8000fda:	b29b      	uxth	r3, r3
 8000fdc:	3301      	adds	r3, #1
 8000fde:	b29b      	uxth	r3, r3
 8000fe0:	2b7f      	cmp	r3, #127	; 0x7f
 8000fe2:	8033      	strh	r3, [r6, #0]
      g_eth_rxpool_ptrs_rpos = 0;
 8000fe4:	bf84      	itt	hi
 8000fe6:	2300      	movhi	r3, #0
 8000fe8:	8013      	strhhi	r3, [r2, #0]
 8000fea:	e7c9      	b.n	8000f80 <enet_process_rx_ring+0x14>
}

static void eth_dispatch_ip(const uint8_t *data, const uint16_t len)
{
  const eth_ip_header_t *ip = (const eth_ip_header_t *)data;
  if (ip->version != 4) // we only handle ipv4 (for now...)
 8000fec:	7baa      	ldrb	r2, [r5, #14]
 8000fee:	0912      	lsrs	r2, r2, #4
 8000ff0:	2a04      	cmp	r2, #4
 8000ff2:	d1f0      	bne.n	8000fd6 <enet_process_rx_ring+0x6a>
    return;
  // if it's unicast, verify our IP address, otherwise ignore the packet
  if (ip->eth.dest_addr[0] == g_eth_src_mac[0])
 8000ff4:	2ba4      	cmp	r3, #164	; 0xa4
 8000ff6:	d03f      	beq.n	8001078 <enet_process_rx_ring+0x10c>
    if (ip->source_addr != eth_htonl(g_eth_src_ip))
      return;
  if (ip->proto == ETH_IP_PROTO_UDP)
 8000ff8:	7deb      	ldrb	r3, [r5, #23]
 8000ffa:	2b11      	cmp	r3, #17
 8000ffc:	d1eb      	bne.n	8000fd6 <enet_process_rx_ring+0x6a>

static void eth_dispatch_udp(const uint8_t *data, const uint16_t len)
{
  const eth_udp_header_t *udp = (const eth_udp_header_t *)data;
  const uint16_t port = eth_htons(udp->dest_port);
  const uint16_t payload_len = eth_htons(udp->len) - 8;
 8000ffe:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
}

static void eth_dispatch_udp(const uint8_t *data, const uint16_t len)
{
  const eth_udp_header_t *udp = (const eth_udp_header_t *)data;
  const uint16_t port = eth_htons(udp->dest_port);
 8001000:	8caa      	ldrh	r2, [r5, #36]	; 0x24
 8001002:	ba5b      	rev16	r3, r3
 8001004:	b29b      	uxth	r3, r3
  const uint16_t payload_len = eth_htons(udp->len) - 8;
 8001006:	3b08      	subs	r3, #8
  const uint8_t *payload = data + sizeof(eth_udp_header_t);
  //printf("  udp len: %d\r\n", udp_payload_len);
  if (payload_len > len - sizeof(eth_udp_header_t))
 8001008:	f1ab 0b2a 	sub.w	fp, fp, #42	; 0x2a

static void eth_dispatch_udp(const uint8_t *data, const uint16_t len)
{
  const eth_udp_header_t *udp = (const eth_udp_header_t *)data;
  const uint16_t port = eth_htons(udp->dest_port);
  const uint16_t payload_len = eth_htons(udp->len) - 8;
 800100c:	b29b      	uxth	r3, r3
 800100e:	ba52      	rev16	r2, r2
  const uint8_t *payload = data + sizeof(eth_udp_header_t);
  //printf("  udp len: %d\r\n", udp_payload_len);
  if (payload_len > len - sizeof(eth_udp_header_t))
 8001010:	455b      	cmp	r3, fp
 8001012:	b292      	uxth	r2, r2
 8001014:	d8df      	bhi.n	8000fd6 <enet_process_rx_ring+0x6a>
  for (int i = 0; i < payload_len; i++)
  {
    printf("  %02d: %02x\r\n", i, payload[i]);
  }
  */
  if (port == 11333 && payload_len > 0)
 8001016:	f642 4145 	movw	r1, #11333	; 0x2c45
 800101a:	428a      	cmp	r2, r1
 800101c:	d1db      	bne.n	8000fd6 <enet_process_rx_ring+0x6a>
 800101e:	2b00      	cmp	r3, #0
 8001020:	d0d9      	beq.n	8000fd6 <enet_process_rx_ring+0x6a>
  {
    const uint8_t cmd = payload[0];
 8001022:	f895 202a 	ldrb.w	r2, [r5, #42]	; 0x2a
    //printf("  enet rx cmd = 0x%02x\r\n", cmd);
    if (cmd == 1 && payload_len >= 5)
 8001026:	2a01      	cmp	r2, #1
 8001028:	d02c      	beq.n	8001084 <enet_process_rx_ring+0x118>
             payload[1], payload[2], payload[3], payload[4]);
      */
      for (int i = 0; i < NUM_DMXL; i++)
        dmxl_set_control_mode(i, (dmxl_control_mode_t)payload[1+i]);
    }
    else if (cmd == 2 && payload_len >= 9)
 800102a:	2a02      	cmp	r2, #2
 800102c:	d1d3      	bne.n	8000fd6 <enet_process_rx_ring+0x6a>
 800102e:	2b08      	cmp	r3, #8
 8001030:	d9d1      	bls.n	8000fd6 <enet_process_rx_ring+0x6a>
 8001032:	f105 0208 	add.w	r2, r5, #8
 8001036:	f1ad 0302 	sub.w	r3, sp, #2
    {
      uint16_t targets[NUM_DMXL];
      for (int i = 0; i < NUM_DMXL; i++)
        targets[i] = (payload[1+2*i] << 8) | payload[2+2*i];
 800103a:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
 800103e:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 8001042:	3502      	adds	r5, #2
 8001044:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
        dmxl_set_control_mode(i, (dmxl_control_mode_t)payload[1+i]);
    }
    else if (cmd == 2 && payload_len >= 9)
    {
      uint16_t targets[NUM_DMXL];
      for (int i = 0; i < NUM_DMXL; i++)
 8001048:	4295      	cmp	r5, r2
        targets[i] = (payload[1+2*i] << 8) | payload[2+2*i];
 800104a:	f823 1f02 	strh.w	r1, [r3, #2]!
        dmxl_set_control_mode(i, (dmxl_control_mode_t)payload[1+i]);
    }
    else if (cmd == 2 && payload_len >= 9)
    {
      uint16_t targets[NUM_DMXL];
      for (int i = 0; i < NUM_DMXL; i++)
 800104e:	d1f4      	bne.n	800103a <enet_process_rx_ring+0xce>
 8001050:	2400      	movs	r4, #0
      /*
      printf("targets: %06d %06d %06d %06d\r\n", 
             targets[0], targets[1], targets[2], targets[3]);
      */
      for (int i = 0; i < NUM_DMXL; i++)
        dmxl_set_control_target(i, targets[i]);
 8001052:	b2e0      	uxtb	r0, r4
 8001054:	f83d 1014 	ldrh.w	r1, [sp, r4, lsl #1]
        targets[i] = (payload[1+2*i] << 8) | payload[2+2*i];
      /*
      printf("targets: %06d %06d %06d %06d\r\n", 
             targets[0], targets[1], targets[2], targets[3]);
      */
      for (int i = 0; i < NUM_DMXL; i++)
 8001058:	3401      	adds	r4, #1
        dmxl_set_control_target(i, targets[i]);
 800105a:	f000 fb9d 	bl	8001798 <dmxl_set_control_target>
        targets[i] = (payload[1+2*i] << 8) | payload[2+2*i];
      /*
      printf("targets: %06d %06d %06d %06d\r\n", 
             targets[0], targets[1], targets[2], targets[3]);
      */
      for (int i = 0; i < NUM_DMXL; i++)
 800105e:	2c04      	cmp	r4, #4
 8001060:	d1f7      	bne.n	8001052 <enet_process_rx_ring+0xe6>
 8001062:	e7b8      	b.n	8000fd6 <enet_process_rx_ring+0x6a>
      if (e->dest_addr[i] != g_eth_src_mac[i])
        unicast_match = 0;
      if (e->dest_addr[i] != 0xff)
        broadcast_match = 0;
    }
    if (e->dest_addr[0] != 0x01 ||
 8001064:	786a      	ldrb	r2, [r5, #1]
 8001066:	2a00      	cmp	r2, #0
 8001068:	d1ad      	bne.n	8000fc6 <enet_process_rx_ring+0x5a>
        e->dest_addr[1] != 0x00 ||
 800106a:	78aa      	ldrb	r2, [r5, #2]
 800106c:	2a5e      	cmp	r2, #94	; 0x5e
 800106e:	d1aa      	bne.n	8000fc6 <enet_process_rx_ring+0x5a>
 8001070:	e7ab      	b.n	8000fca <enet_process_rx_ring+0x5e>
    if (unicast_match || multicast_match || broadcast_match)
      eth_dispatch_eth(start, len);
    if (++g_eth_rxpool_ptrs_rpos >= ETH_RAM_RXPOOL_NPTR)
      g_eth_rxpool_ptrs_rpos = 0;
  }
}
 8001072:	b003      	add	sp, #12
 8001074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  const eth_ip_header_t *ip = (const eth_ip_header_t *)data;
  if (ip->version != 4) // we only handle ipv4 (for now...)
    return;
  // if it's unicast, verify our IP address, otherwise ignore the packet
  if (ip->eth.dest_addr[0] == g_eth_src_mac[0])
    if (ip->source_addr != eth_htonl(g_eth_src_ip))
 8001078:	f8d5 301a 	ldr.w	r3, [r5, #26]
 800107c:	4a0a      	ldr	r2, [pc, #40]	; (80010a8 <enet_process_rx_ring+0x13c>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d1a9      	bne.n	8000fd6 <enet_process_rx_ring+0x6a>
 8001082:	e7b9      	b.n	8000ff8 <enet_process_rx_ring+0x8c>
  */
  if (port == 11333 && payload_len > 0)
  {
    const uint8_t cmd = payload[0];
    //printf("  enet rx cmd = 0x%02x\r\n", cmd);
    if (cmd == 1 && payload_len >= 5)
 8001084:	2b04      	cmp	r3, #4
 8001086:	d9a6      	bls.n	8000fd6 <enet_process_rx_ring+0x6a>
 8001088:	2400      	movs	r4, #0
      /*
      printf("    modes: %d %d %d %d\r\n", 
             payload[1], payload[2], payload[3], payload[4]);
      */
      for (int i = 0; i < NUM_DMXL; i++)
        dmxl_set_control_mode(i, (dmxl_control_mode_t)payload[1+i]);
 800108a:	b2e0      	uxtb	r0, r4
 800108c:	3401      	adds	r4, #1
 800108e:	192b      	adds	r3, r5, r4
 8001090:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
 8001094:	f000 fb12 	bl	80016bc <dmxl_set_control_mode>
    {
      /*
      printf("    modes: %d %d %d %d\r\n", 
             payload[1], payload[2], payload[3], payload[4]);
      */
      for (int i = 0; i < NUM_DMXL; i++)
 8001098:	2c04      	cmp	r4, #4
 800109a:	d1f6      	bne.n	800108a <enet_process_rx_ring+0x11e>
 800109c:	e79b      	b.n	8000fd6 <enet_process_rx_ring+0x6a>
 800109e:	bf00      	nop
 80010a0:	20008f7a 	.word	0x20008f7a
 80010a4:	20008f78 	.word	0x20008f78
 80010a8:	99ab420a 	.word	0x99ab420a
 80010ac:	20009080 	.word	0x20009080
 80010b0:	20008f7c 	.word	0x20008f7c
 80010b4:	0800903c 	.word	0x0800903c

080010b8 <enet_send_state>:

// todo: be smarter about multicast group choice
#define MCAST_IP 0xe000007c

void enet_send_state()
{
 80010b8:	b510      	push	{r4, lr}
  volatile state_t tx_state = g_state; // make a local copy to ensure coherence
 80010ba:	24ca      	movs	r4, #202	; 0xca

// todo: be smarter about multicast group choice
#define MCAST_IP 0xe000007c

void enet_send_state()
{
 80010bc:	b0b4      	sub	sp, #208	; 0xd0
  volatile state_t tx_state = g_state; // make a local copy to ensure coherence
 80010be:	4622      	mov	r2, r4
 80010c0:	a801      	add	r0, sp, #4
 80010c2:	4906      	ldr	r1, [pc, #24]	; (80010dc <enet_send_state+0x24>)
 80010c4:	f001 f888 	bl	80021d8 <memcpy>
  enet_send_udp_mcast(MCAST_IP, 11333,
 80010c8:	aa01      	add	r2, sp, #4
 80010ca:	4623      	mov	r3, r4
 80010cc:	4804      	ldr	r0, [pc, #16]	; (80010e0 <enet_send_state+0x28>)
 80010ce:	f642 4145 	movw	r1, #11333	; 0x2c45
 80010d2:	f7ff ff29 	bl	8000f28 <enet_send_udp_mcast>
                      (uint8_t *)&tx_state, sizeof(tx_state));
}
 80010d6:	b034      	add	sp, #208	; 0xd0
 80010d8:	bd10      	pop	{r4, pc}
 80010da:	bf00      	nop
 80010dc:	2000fca0 	.word	0x2000fca0
 80010e0:	e000007c 	.word	0xe000007c

080010e4 <systime_init>:
#include "stm32f4xx.h"

void systime_init()
{
  // TIM2 is a 32-bit counter. it just counts microseconds since power-up.
  RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80010e4:	4b0f      	ldr	r3, [pc, #60]	; (8001124 <systime_init+0x40>)
 80010e6:	6c19      	ldr	r1, [r3, #64]	; 0x40
#include "systime.h"
#include "stm32f4xx.h"

void systime_init()
{
 80010e8:	b082      	sub	sp, #8
  // TIM2 is a 32-bit counter. it just counts microseconds since power-up.
  RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
  for (volatile int i = 0; i < 1000; i++) { } // let tim2 spin up
 80010ea:	2200      	movs	r2, #0
#include "stm32f4xx.h"

void systime_init()
{
  // TIM2 is a 32-bit counter. it just counts microseconds since power-up.
  RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80010ec:	f041 0101 	orr.w	r1, r1, #1
 80010f0:	6419      	str	r1, [r3, #64]	; 0x40
  for (volatile int i = 0; i < 1000; i++) { } // let tim2 spin up
 80010f2:	9201      	str	r2, [sp, #4]
 80010f4:	9b01      	ldr	r3, [sp, #4]
 80010f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010fa:	da06      	bge.n	800110a <systime_init+0x26>
 80010fc:	9b01      	ldr	r3, [sp, #4]
 80010fe:	3301      	adds	r3, #1
 8001100:	9301      	str	r3, [sp, #4]
 8001102:	9b01      	ldr	r3, [sp, #4]
 8001104:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001108:	dbf8      	blt.n	80010fc <systime_init+0x18>
  TIM2->PSC = 168000000 / 2 / 1000000 - 1; // 83
 800110a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  TIM2->ARR = 0xffffffff; // count as long as possible
  TIM2->EGR = TIM_EGR_UG; // load the PSC register immediately
 800110e:	2201      	movs	r2, #1
void systime_init()
{
  // TIM2 is a 32-bit counter. it just counts microseconds since power-up.
  RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
  for (volatile int i = 0; i < 1000; i++) { } // let tim2 spin up
  TIM2->PSC = 168000000 / 2 / 1000000 - 1; // 83
 8001110:	2053      	movs	r0, #83	; 0x53
  TIM2->ARR = 0xffffffff; // count as long as possible
 8001112:	f04f 31ff 	mov.w	r1, #4294967295
void systime_init()
{
  // TIM2 is a 32-bit counter. it just counts microseconds since power-up.
  RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
  for (volatile int i = 0; i < 1000; i++) { } // let tim2 spin up
  TIM2->PSC = 168000000 / 2 / 1000000 - 1; // 83
 8001116:	8518      	strh	r0, [r3, #40]	; 0x28
  TIM2->ARR = 0xffffffff; // count as long as possible
 8001118:	62d9      	str	r1, [r3, #44]	; 0x2c
  TIM2->EGR = TIM_EGR_UG; // load the PSC register immediately
 800111a:	829a      	strh	r2, [r3, #20]
  TIM2->CR1 = TIM_CR1_CEN; // start counter
 800111c:	801a      	strh	r2, [r3, #0]
}
 800111e:	b002      	add	sp, #8
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	40023800 	.word	0x40023800

08001128 <dmxl_tx.part.1>:
static void dmxl_tx(const uint8_t port_idx, 
             const uint8_t *payload, const uint8_t payload_len)
{
  if (port_idx >= NUM_DMXL)
    return; // bogus port index
  dmxl_port_t *dp = &g_dmxl_ports[port_idx];
 8001128:	4b20      	ldr	r3, [pc, #128]	; (80011ac <dmxl_tx.part.1+0x84>)
 800112a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  USART_TypeDef *u = dp->uart;
 800112e:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
  // turn on the 3.3v <-> 5v translator chip now
  GPIOA->MODER |= 1 << (PORTA_DMXL_BUF_EN * 2);
  GPIOA->BSRRL |= 1 << PORTA_DMXL_BUF_EN;
}

static void dmxl_tx(const uint8_t port_idx, 
 8001132:	b4f0      	push	{r4, r5, r6, r7}
             const uint8_t *payload, const uint8_t payload_len)
{
  if (port_idx >= NUM_DMXL)
    return; // bogus port index
  dmxl_port_t *dp = &g_dmxl_ports[port_idx];
  USART_TypeDef *u = dp->uart;
 8001134:	68d8      	ldr	r0, [r3, #12]
  u->CR1 &= ~USART_CR1_RE; // disable the receiver during transmit
 8001136:	8983      	ldrh	r3, [r0, #12]
 8001138:	f023 0304 	bic.w	r3, r3, #4
 800113c:	041b      	lsls	r3, r3, #16
 800113e:	0c1b      	lsrs	r3, r3, #16
 8001140:	8183      	strh	r3, [r0, #12]
  u->CR1 |=  USART_CR1_TE; // enable the transmitter
 8001142:	8983      	ldrh	r3, [r0, #12]
 8001144:	b29b      	uxth	r3, r3
  uint8_t csum = 0;
 8001146:	2600      	movs	r6, #0
  if (port_idx >= NUM_DMXL)
    return; // bogus port index
  dmxl_port_t *dp = &g_dmxl_ports[port_idx];
  USART_TypeDef *u = dp->uart;
  u->CR1 &= ~USART_CR1_RE; // disable the receiver during transmit
  u->CR1 |=  USART_CR1_TE; // enable the transmitter
 8001148:	f043 0308 	orr.w	r3, r3, #8
  uint8_t csum = 0;
  for (uint8_t i = 0; i < payload_len + 3; i++)
 800114c:	3202      	adds	r2, #2
  if (port_idx >= NUM_DMXL)
    return; // bogus port index
  dmxl_port_t *dp = &g_dmxl_ports[port_idx];
  USART_TypeDef *u = dp->uart;
  u->CR1 &= ~USART_CR1_RE; // disable the receiver during transmit
  u->CR1 |=  USART_CR1_TE; // enable the transmitter
 800114e:	8183      	strh	r3, [r0, #12]
  uint8_t csum = 0;
  for (uint8_t i = 0; i < payload_len + 3; i++)
 8001150:	4635      	mov	r5, r6
 8001152:	4634      	mov	r4, r6
  {
    while (!(u->SR & USART_SR_TXE)) { } // wait for tx buffer to clear
    if (i <= 1)
      u->DR = 0xff; // preamble
 8001154:	27ff      	movs	r7, #255	; 0xff
  u->CR1 &= ~USART_CR1_RE; // disable the receiver during transmit
  u->CR1 |=  USART_CR1_TE; // enable the transmitter
  uint8_t csum = 0;
  for (uint8_t i = 0; i < payload_len + 3; i++)
  {
    while (!(u->SR & USART_SR_TXE)) { } // wait for tx buffer to clear
 8001156:	8803      	ldrh	r3, [r0, #0]
 8001158:	061b      	lsls	r3, r3, #24
 800115a:	d5fc      	bpl.n	8001156 <dmxl_tx.part.1+0x2e>
    if (i <= 1)
 800115c:	2c01      	cmp	r4, #1
      // send checksum
      u->DR = ~csum;
    }
    else
    {
      u->DR = payload[i-2]; // send payload byte
 800115e:	f1a4 0302 	sub.w	r3, r4, #2
  u->CR1 |=  USART_CR1_TE; // enable the transmitter
  uint8_t csum = 0;
  for (uint8_t i = 0; i < payload_len + 3; i++)
  {
    while (!(u->SR & USART_SR_TXE)) { } // wait for tx buffer to clear
    if (i <= 1)
 8001162:	d91b      	bls.n	800119c <dmxl_tx.part.1+0x74>
      u->DR = 0xff; // preamble
    else if (i == payload_len + 2)
 8001164:	42aa      	cmp	r2, r5
 8001166:	d01b      	beq.n	80011a0 <dmxl_tx.part.1+0x78>
      // send checksum
      u->DR = ~csum;
    }
    else
    {
      u->DR = payload[i-2]; // send payload byte
 8001168:	5ccd      	ldrb	r5, [r1, r3]
 800116a:	8085      	strh	r5, [r0, #4]
      csum += payload[i-2];
 800116c:	5ccb      	ldrb	r3, [r1, r3]
 800116e:	441e      	add	r6, r3
 8001170:	b2f6      	uxtb	r6, r6
  dmxl_port_t *dp = &g_dmxl_ports[port_idx];
  USART_TypeDef *u = dp->uart;
  u->CR1 &= ~USART_CR1_RE; // disable the receiver during transmit
  u->CR1 |=  USART_CR1_TE; // enable the transmitter
  uint8_t csum = 0;
  for (uint8_t i = 0; i < payload_len + 3; i++)
 8001172:	3401      	adds	r4, #1
 8001174:	b2e4      	uxtb	r4, r4
 8001176:	4294      	cmp	r4, r2
 8001178:	4625      	mov	r5, r4
 800117a:	ddec      	ble.n	8001156 <dmxl_tx.part.1+0x2e>
    {
      u->DR = payload[i-2]; // send payload byte
      csum += payload[i-2];
    }
  }
  while (!(u->SR & USART_SR_TC)) { } // wait for TX to finish
 800117c:	8803      	ldrh	r3, [r0, #0]
 800117e:	065b      	lsls	r3, r3, #25
 8001180:	d5fc      	bpl.n	800117c <dmxl_tx.part.1+0x54>
  u->CR1 &= ~USART_CR1_TE; // disable the transmitter
 8001182:	8983      	ldrh	r3, [r0, #12]
 8001184:	f023 0308 	bic.w	r3, r3, #8
 8001188:	041b      	lsls	r3, r3, #16
 800118a:	0c1b      	lsrs	r3, r3, #16
 800118c:	8183      	strh	r3, [r0, #12]
  u->CR1 |=  USART_CR1_RE; // re-enable the transmitter
 800118e:	8983      	ldrh	r3, [r0, #12]
 8001190:	b29b      	uxth	r3, r3
 8001192:	f043 0304 	orr.w	r3, r3, #4
 8001196:	8183      	strh	r3, [r0, #12]
  // todo: actually spin here until we get a packet back in the rx ring
}
 8001198:	bcf0      	pop	{r4, r5, r6, r7}
 800119a:	4770      	bx	lr
  uint8_t csum = 0;
  for (uint8_t i = 0; i < payload_len + 3; i++)
  {
    while (!(u->SR & USART_SR_TXE)) { } // wait for tx buffer to clear
    if (i <= 1)
      u->DR = 0xff; // preamble
 800119c:	8087      	strh	r7, [r0, #4]
 800119e:	e7e8      	b.n	8001172 <dmxl_tx.part.1+0x4a>
    else if (i == payload_len + 2)
    {
      // send checksum
      u->DR = ~csum;
 80011a0:	f486 437f 	eor.w	r3, r6, #65280	; 0xff00
 80011a4:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 80011a8:	8083      	strh	r3, [r0, #4]
 80011aa:	e7e2      	b.n	8001172 <dmxl_tx.part.1+0x4a>
 80011ac:	2000000c 	.word	0x2000000c

080011b0 <dmxl_write_data>:
}

static void dmxl_write_data(const uint8_t port_idx, const uint8_t dmxl_id,
                            const uint8_t data_len, const uint8_t start_addr, 
                            const uint8_t *data)
{
 80011b0:	b530      	push	{r4, r5, lr}
 80011b2:	b0c1      	sub	sp, #260	; 0x104
  uint8_t pkt[255];
  pkt[0] = dmxl_id;
  pkt[1] = data_len + 3;
 80011b4:	1cd5      	adds	r5, r2, #3
  pkt[2] = 3; // instruction: "write data"
 80011b6:	2403      	movs	r4, #3
                            const uint8_t data_len, const uint8_t start_addr, 
                            const uint8_t *data)
{
  uint8_t pkt[255];
  pkt[0] = dmxl_id;
  pkt[1] = data_len + 3;
 80011b8:	f88d 5001 	strb.w	r5, [sp, #1]
  pkt[2] = 3; // instruction: "write data"
  pkt[3] = start_addr;
 80011bc:	f88d 3003 	strb.w	r3, [sp, #3]
static void dmxl_write_data(const uint8_t port_idx, const uint8_t dmxl_id,
                            const uint8_t data_len, const uint8_t start_addr, 
                            const uint8_t *data)
{
  uint8_t pkt[255];
  pkt[0] = dmxl_id;
 80011c0:	f88d 1000 	strb.w	r1, [sp]
  pkt[1] = data_len + 3;
  pkt[2] = 3; // instruction: "write data"
 80011c4:	f88d 4002 	strb.w	r4, [sp, #2]
}

static void dmxl_write_data(const uint8_t port_idx, const uint8_t dmxl_id,
                            const uint8_t data_len, const uint8_t start_addr, 
                            const uint8_t *data)
{
 80011c8:	9d44      	ldr	r5, [sp, #272]	; 0x110
  uint8_t pkt[255];
  pkt[0] = dmxl_id;
  pkt[1] = data_len + 3;
  pkt[2] = 3; // instruction: "write data"
  pkt[3] = start_addr;
  for (int i = 0; i < data_len; i++)
 80011ca:	2300      	movs	r3, #0
 80011cc:	b132      	cbz	r2, 80011dc <dmxl_write_data+0x2c>
 80011ce:	a900      	add	r1, sp, #0
 80011d0:	4419      	add	r1, r3
    pkt[4+i] = data[i];
 80011d2:	5cec      	ldrb	r4, [r5, r3]
 80011d4:	710c      	strb	r4, [r1, #4]
  uint8_t pkt[255];
  pkt[0] = dmxl_id;
  pkt[1] = data_len + 3;
  pkt[2] = 3; // instruction: "write data"
  pkt[3] = start_addr;
  for (int i = 0; i < data_len; i++)
 80011d6:	3301      	adds	r3, #1
 80011d8:	4293      	cmp	r3, r2
 80011da:	d1f8      	bne.n	80011ce <dmxl_write_data+0x1e>
}

static void dmxl_tx(const uint8_t port_idx, 
             const uint8_t *payload, const uint8_t payload_len)
{
  if (port_idx >= NUM_DMXL)
 80011dc:	2803      	cmp	r0, #3
 80011de:	d804      	bhi.n	80011ea <dmxl_write_data+0x3a>
  pkt[1] = data_len + 3;
  pkt[2] = 3; // instruction: "write data"
  pkt[3] = start_addr;
  for (int i = 0; i < data_len; i++)
    pkt[4+i] = data[i];
  dmxl_tx(port_idx, pkt, data_len + 4);
 80011e0:	3204      	adds	r2, #4
 80011e2:	b2d2      	uxtb	r2, r2
 80011e4:	4669      	mov	r1, sp
 80011e6:	f7ff ff9f 	bl	8001128 <dmxl_tx.part.1>
}
 80011ea:	b041      	add	sp, #260	; 0x104
 80011ec:	bd30      	pop	{r4, r5, pc}
 80011ee:	bf00      	nop

080011f0 <dmxl_read_data.constprop.2>:

static void dmxl_read_data(const uint8_t port_idx, const uint8_t dmxl_id,
 80011f0:	b530      	push	{r4, r5, lr}
 80011f2:	b0c1      	sub	sp, #260	; 0x104
                           const uint8_t data_len, const uint8_t start_addr)
{
  uint8_t pkt[255];
  pkt[0] = dmxl_id;
 80011f4:	2501      	movs	r5, #1
  pkt[1] = 4; // this packet's "length" is 4
 80011f6:	2404      	movs	r4, #4
  pkt[2] = 2; // instruction: "read data"
 80011f8:	2102      	movs	r1, #2
  pkt[3] = start_addr;
 80011fa:	2224      	movs	r2, #36	; 0x24
  pkt[4] = data_len;
 80011fc:	2308      	movs	r3, #8
}

static void dmxl_tx(const uint8_t port_idx, 
             const uint8_t *payload, const uint8_t payload_len)
{
  if (port_idx >= NUM_DMXL)
 80011fe:	2803      	cmp	r0, #3

static void dmxl_read_data(const uint8_t port_idx, const uint8_t dmxl_id,
                           const uint8_t data_len, const uint8_t start_addr)
{
  uint8_t pkt[255];
  pkt[0] = dmxl_id;
 8001200:	f88d 5000 	strb.w	r5, [sp]
  pkt[1] = 4; // this packet's "length" is 4
 8001204:	f88d 4001 	strb.w	r4, [sp, #1]
  pkt[2] = 2; // instruction: "read data"
 8001208:	f88d 1002 	strb.w	r1, [sp, #2]
  pkt[3] = start_addr;
 800120c:	f88d 2003 	strb.w	r2, [sp, #3]
  pkt[4] = data_len;
 8001210:	f88d 3004 	strb.w	r3, [sp, #4]
}

static void dmxl_tx(const uint8_t port_idx, 
             const uint8_t *payload, const uint8_t payload_len)
{
  if (port_idx >= NUM_DMXL)
 8001214:	d803      	bhi.n	800121e <dmxl_read_data.constprop.2+0x2e>
 8001216:	4669      	mov	r1, sp
 8001218:	2205      	movs	r2, #5
 800121a:	f7ff ff85 	bl	8001128 <dmxl_tx.part.1>
  pkt[1] = 4; // this packet's "length" is 4
  pkt[2] = 2; // instruction: "read data"
  pkt[3] = start_addr;
  pkt[4] = data_len;
  dmxl_tx(port_idx, pkt, 5);
}
 800121e:	b041      	add	sp, #260	; 0x104
 8001220:	bd30      	pop	{r4, r5, pc}
 8001222:	bf00      	nop

08001224 <usart3_vector>:
    g_dmxl_ring_wpos[dmxl_port] = 0;
}

void usart3_vector()
{
  volatile uint8_t __attribute__((unused)) sr = USART3->SR; // clear overruns
 8001224:	4a0b      	ldr	r2, [pc, #44]	; (8001254 <usart3_vector+0x30>)
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte) 
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 8001226:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <usart3_vector+0x34>)
    g_dmxl_ring_wpos[dmxl_port] = 0;
}

void usart3_vector()
{
  volatile uint8_t __attribute__((unused)) sr = USART3->SR; // clear overruns
 8001228:	8810      	ldrh	r0, [r2, #0]
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte) 
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 800122a:	490c      	ldr	r1, [pc, #48]	; (800125c <usart3_vector+0x38>)
  if (++g_dmxl_ring_wpos[dmxl_port] >= DMXL_RING_LEN)
    g_dmxl_ring_wpos[dmxl_port] = 0;
}

void usart3_vector()
{
 800122c:	b082      	sub	sp, #8
  volatile uint8_t __attribute__((unused)) sr = USART3->SR; // clear overruns
 800122e:	b2c0      	uxtb	r0, r0
 8001230:	f88d 0007 	strb.w	r0, [sp, #7]
  dmxl_push_byte(0, USART3->DR);
 8001234:	8890      	ldrh	r0, [r2, #4]
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte) 
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 8001236:	881a      	ldrh	r2, [r3, #0]
 8001238:	b292      	uxth	r2, r2
}

void usart3_vector()
{
  volatile uint8_t __attribute__((unused)) sr = USART3->SR; // clear overruns
  dmxl_push_byte(0, USART3->DR);
 800123a:	b2c0      	uxtb	r0, r0
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte) 
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 800123c:	5488      	strb	r0, [r1, r2]
  if (++g_dmxl_ring_wpos[dmxl_port] >= DMXL_RING_LEN)
 800123e:	881a      	ldrh	r2, [r3, #0]
 8001240:	b292      	uxth	r2, r2
 8001242:	3201      	adds	r2, #1
 8001244:	b292      	uxth	r2, r2
 8001246:	2aff      	cmp	r2, #255	; 0xff
 8001248:	801a      	strh	r2, [r3, #0]
    g_dmxl_ring_wpos[dmxl_port] = 0;
 800124a:	bf84      	itt	hi
 800124c:	2200      	movhi	r2, #0
 800124e:	801a      	strhhi	r2, [r3, #0]

void usart3_vector()
{
  volatile uint8_t __attribute__((unused)) sr = USART3->SR; // clear overruns
  dmxl_push_byte(0, USART3->DR);
}
 8001250:	b002      	add	sp, #8
 8001252:	4770      	bx	lr
 8001254:	40004800 	.word	0x40004800
 8001258:	2000f380 	.word	0x2000f380
 800125c:	2000f788 	.word	0x2000f788

08001260 <uart4_vector>:

void uart4_vector()
{
  volatile uint8_t __attribute__((unused)) sr = UART4->SR; // clear overruns
 8001260:	4a0c      	ldr	r2, [pc, #48]	; (8001294 <uart4_vector+0x34>)
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte) 
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 8001262:	4b0d      	ldr	r3, [pc, #52]	; (8001298 <uart4_vector+0x38>)
  dmxl_push_byte(0, USART3->DR);
}

void uart4_vector()
{
  volatile uint8_t __attribute__((unused)) sr = UART4->SR; // clear overruns
 8001264:	8811      	ldrh	r1, [r2, #0]
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte) 
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 8001266:	480d      	ldr	r0, [pc, #52]	; (800129c <uart4_vector+0x3c>)
  volatile uint8_t __attribute__((unused)) sr = USART3->SR; // clear overruns
  dmxl_push_byte(0, USART3->DR);
}

void uart4_vector()
{
 8001268:	b082      	sub	sp, #8
  volatile uint8_t __attribute__((unused)) sr = UART4->SR; // clear overruns
 800126a:	b2c9      	uxtb	r1, r1
 800126c:	f88d 1007 	strb.w	r1, [sp, #7]
  dmxl_push_byte(1, UART4->DR);
 8001270:	8891      	ldrh	r1, [r2, #4]
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte) 
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 8001272:	885a      	ldrh	r2, [r3, #2]
 8001274:	fa10 f282 	uxtah	r2, r0, r2
}

void uart4_vector()
{
  volatile uint8_t __attribute__((unused)) sr = UART4->SR; // clear overruns
  dmxl_push_byte(1, UART4->DR);
 8001278:	b2c9      	uxtb	r1, r1
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte) 
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 800127a:	f882 1100 	strb.w	r1, [r2, #256]	; 0x100
  if (++g_dmxl_ring_wpos[dmxl_port] >= DMXL_RING_LEN)
 800127e:	885a      	ldrh	r2, [r3, #2]
 8001280:	b292      	uxth	r2, r2
 8001282:	3201      	adds	r2, #1
 8001284:	b292      	uxth	r2, r2
 8001286:	2aff      	cmp	r2, #255	; 0xff
 8001288:	805a      	strh	r2, [r3, #2]
    g_dmxl_ring_wpos[dmxl_port] = 0;
 800128a:	bf84      	itt	hi
 800128c:	2200      	movhi	r2, #0
 800128e:	805a      	strhhi	r2, [r3, #2]

void uart4_vector()
{
  volatile uint8_t __attribute__((unused)) sr = UART4->SR; // clear overruns
  dmxl_push_byte(1, UART4->DR);
}
 8001290:	b002      	add	sp, #8
 8001292:	4770      	bx	lr
 8001294:	40004c00 	.word	0x40004c00
 8001298:	2000f380 	.word	0x2000f380
 800129c:	2000f788 	.word	0x2000f788

080012a0 <uart5_vector>:

void uart5_vector()
{
  volatile uint8_t __attribute__((unused)) sr = UART5->SR; // clear overruns
 80012a0:	4a0c      	ldr	r2, [pc, #48]	; (80012d4 <uart5_vector+0x34>)
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte) 
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 80012a2:	4b0d      	ldr	r3, [pc, #52]	; (80012d8 <uart5_vector+0x38>)
  dmxl_push_byte(1, UART4->DR);
}

void uart5_vector()
{
  volatile uint8_t __attribute__((unused)) sr = UART5->SR; // clear overruns
 80012a4:	8811      	ldrh	r1, [r2, #0]
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte) 
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 80012a6:	480d      	ldr	r0, [pc, #52]	; (80012dc <uart5_vector+0x3c>)
  volatile uint8_t __attribute__((unused)) sr = UART4->SR; // clear overruns
  dmxl_push_byte(1, UART4->DR);
}

void uart5_vector()
{
 80012a8:	b082      	sub	sp, #8
  volatile uint8_t __attribute__((unused)) sr = UART5->SR; // clear overruns
 80012aa:	b2c9      	uxtb	r1, r1
 80012ac:	f88d 1007 	strb.w	r1, [sp, #7]
  dmxl_push_byte(3, UART5->DR);
 80012b0:	8891      	ldrh	r1, [r2, #4]
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte) 
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 80012b2:	88da      	ldrh	r2, [r3, #6]
 80012b4:	fa10 f282 	uxtah	r2, r0, r2
}

void uart5_vector()
{
  volatile uint8_t __attribute__((unused)) sr = UART5->SR; // clear overruns
  dmxl_push_byte(3, UART5->DR);
 80012b8:	b2c9      	uxtb	r1, r1
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte) 
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 80012ba:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
  if (++g_dmxl_ring_wpos[dmxl_port] >= DMXL_RING_LEN)
 80012be:	88da      	ldrh	r2, [r3, #6]
 80012c0:	b292      	uxth	r2, r2
 80012c2:	3201      	adds	r2, #1
 80012c4:	b292      	uxth	r2, r2
 80012c6:	2aff      	cmp	r2, #255	; 0xff
 80012c8:	80da      	strh	r2, [r3, #6]
    g_dmxl_ring_wpos[dmxl_port] = 0;
 80012ca:	bf84      	itt	hi
 80012cc:	2200      	movhi	r2, #0
 80012ce:	80da      	strhhi	r2, [r3, #6]

void uart5_vector()
{
  volatile uint8_t __attribute__((unused)) sr = UART5->SR; // clear overruns
  dmxl_push_byte(3, UART5->DR);
}
 80012d0:	b002      	add	sp, #8
 80012d2:	4770      	bx	lr
 80012d4:	40005000 	.word	0x40005000
 80012d8:	2000f380 	.word	0x2000f380
 80012dc:	2000f788 	.word	0x2000f788

080012e0 <usart6_vector>:

void usart6_vector()
{
  volatile uint8_t __attribute__((unused)) sr = USART6->SR; // clear overruns
 80012e0:	4a0c      	ldr	r2, [pc, #48]	; (8001314 <usart6_vector+0x34>)
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte) 
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 80012e2:	4b0d      	ldr	r3, [pc, #52]	; (8001318 <usart6_vector+0x38>)
  dmxl_push_byte(3, UART5->DR);
}

void usart6_vector()
{
  volatile uint8_t __attribute__((unused)) sr = USART6->SR; // clear overruns
 80012e4:	8811      	ldrh	r1, [r2, #0]
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte) 
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 80012e6:	480d      	ldr	r0, [pc, #52]	; (800131c <usart6_vector+0x3c>)
  volatile uint8_t __attribute__((unused)) sr = UART5->SR; // clear overruns
  dmxl_push_byte(3, UART5->DR);
}

void usart6_vector()
{
 80012e8:	b082      	sub	sp, #8
  volatile uint8_t __attribute__((unused)) sr = USART6->SR; // clear overruns
 80012ea:	b2c9      	uxtb	r1, r1
 80012ec:	f88d 1007 	strb.w	r1, [sp, #7]
  dmxl_push_byte(2, USART6->DR);
 80012f0:	8891      	ldrh	r1, [r2, #4]
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte) 
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 80012f2:	889a      	ldrh	r2, [r3, #4]
 80012f4:	fa10 f282 	uxtah	r2, r0, r2
}

void usart6_vector()
{
  volatile uint8_t __attribute__((unused)) sr = USART6->SR; // clear overruns
  dmxl_push_byte(2, USART6->DR);
 80012f8:	b2c9      	uxtb	r1, r1
// put in ramfunc sector ?
static inline void dmxl_push_byte(const uint8_t dmxl_port, const uint8_t byte) 
{
  if (dmxl_port >= NUM_DMXL)
    return;
  g_dmxl_ring[dmxl_port][g_dmxl_ring_wpos[dmxl_port]] = byte;
 80012fa:	f882 1200 	strb.w	r1, [r2, #512]	; 0x200
  if (++g_dmxl_ring_wpos[dmxl_port] >= DMXL_RING_LEN)
 80012fe:	889a      	ldrh	r2, [r3, #4]
 8001300:	b292      	uxth	r2, r2
 8001302:	3201      	adds	r2, #1
 8001304:	b292      	uxth	r2, r2
 8001306:	2aff      	cmp	r2, #255	; 0xff
 8001308:	809a      	strh	r2, [r3, #4]
    g_dmxl_ring_wpos[dmxl_port] = 0;
 800130a:	bf84      	itt	hi
 800130c:	2200      	movhi	r2, #0
 800130e:	809a      	strhhi	r2, [r3, #4]

void usart6_vector()
{
  volatile uint8_t __attribute__((unused)) sr = USART6->SR; // clear overruns
  dmxl_push_byte(2, USART6->DR);
}
 8001310:	b002      	add	sp, #8
 8001312:	4770      	bx	lr
 8001314:	40011400 	.word	0x40011400
 8001318:	2000f380 	.word	0x2000f380
 800131c:	2000f788 	.word	0x2000f788

08001320 <dmxl_init>:

void dmxl_init()
{
 8001320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  printf("dmxl_init()\r\n");
 8001324:	4849      	ldr	r0, [pc, #292]	; (800144c <dmxl_init+0x12c>)

    USART_TypeDef *u = dp->uart;
    u->CR1 &= ~USART_CR1_UE; // make sure it's off while we configure it
    u->CR1 |=  USART_CR1_RE; // don't enable the transmitter yet
    // set to the default baud rate: 57600
    if (u == USART6)
 8001326:	4d4a      	ldr	r5, [pc, #296]	; (8001450 <dmxl_init+0x130>)
  dmxl_push_byte(2, USART6->DR);
}

void dmxl_init()
{
  printf("dmxl_init()\r\n");
 8001328:	f001 f88c 	bl	8002444 <puts>
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN |
 800132c:	4a49      	ldr	r2, [pc, #292]	; (8001454 <dmxl_init+0x134>)
 800132e:	4b4a      	ldr	r3, [pc, #296]	; (8001458 <dmxl_init+0x138>)
 8001330:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001332:	f041 010d 	orr.w	r1, r1, #13
 8001336:	6311      	str	r1, [r2, #48]	; 0x30
                  RCC_AHB1ENR_GPIOCEN |
                  RCC_AHB1ENR_GPIODEN;
  RCC->APB1ENR |= RCC_APB1ENR_USART3EN |
 8001338:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800133a:	f441 11e0 	orr.w	r1, r1, #1835008	; 0x1c0000
 800133e:	6411      	str	r1, [r2, #64]	; 0x40
                  RCC_APB1ENR_UART4EN  |
                  RCC_APB1ENR_UART5EN;
  RCC->APB2ENR |= RCC_APB2ENR_USART6EN;
 8001340:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001342:	f041 0120 	orr.w	r1, r1, #32
 8001346:	6451      	str	r1, [r2, #68]	; 0x44
 8001348:	f103 0660 	add.w	r6, r3, #96	; 0x60

  for (int i = 0; i < NUM_DMXL; i++)
  {
    dmxl_port_t *dp = &g_dmxl_ports[i];
    dp->tx_gpio->MODER |= (uint32_t)2 << (dp->tx_pin * 2); // set as AF
 800134c:	2402      	movs	r4, #2
    u->CR1 |=  USART_CR1_RE; // don't enable the transmitter yet
    // set to the default baud rate: 57600
    if (u == USART6)
      u->BRR = (((uint16_t)91) << 4) | 2; 
    else
      u->BRR = (((uint16_t)45) << 4) | 9;
 800134e:	f240 27d9 	movw	r7, #729	; 0x2d9
    USART_TypeDef *u = dp->uart;
    u->CR1 &= ~USART_CR1_UE; // make sure it's off while we configure it
    u->CR1 |=  USART_CR1_RE; // don't enable the transmitter yet
    // set to the default baud rate: 57600
    if (u == USART6)
      u->BRR = (((uint16_t)91) << 4) | 2; 
 8001352:	f240 5cb2 	movw	ip, #1458	; 0x5b2
  RCC->APB2ENR |= RCC_APB2ENR_USART6EN;

  for (int i = 0; i < NUM_DMXL; i++)
  {
    dmxl_port_t *dp = &g_dmxl_ports[i];
    dp->tx_gpio->MODER |= (uint32_t)2 << (dp->tx_pin * 2); // set as AF
 8001356:	7a1a      	ldrb	r2, [r3, #8]
 8001358:	6819      	ldr	r1, [r3, #0]
 800135a:	0052      	lsls	r2, r2, #1
 800135c:	6808      	ldr	r0, [r1, #0]
 800135e:	fa04 f202 	lsl.w	r2, r4, r2
 8001362:	4302      	orrs	r2, r0
 8001364:	600a      	str	r2, [r1, #0]
    dp->rx_gpio->MODER |= (uint32_t)2 << (dp->rx_pin * 2); // set as AF
 8001366:	f893 8009 	ldrb.w	r8, [r3, #9]
 800136a:	685a      	ldr	r2, [r3, #4]
 800136c:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8001370:	6810      	ldr	r0, [r2, #0]
 8001372:	fa04 f808 	lsl.w	r8, r4, r8
 8001376:	ea48 0000 	orr.w	r0, r8, r0
 800137a:	6010      	str	r0, [r2, #0]

    if (dp->tx_pin >= 8)
 800137c:	7a18      	ldrb	r0, [r3, #8]
      dp->tx_gpio->AFR[1] |= (uint32_t)dp->af << ((dp->tx_pin - 8) * 4);
 800137e:	f893 900a 	ldrb.w	r9, [r3, #10]
 8001382:	f1a0 0808 	sub.w	r8, r0, #8
  {
    dmxl_port_t *dp = &g_dmxl_ports[i];
    dp->tx_gpio->MODER |= (uint32_t)2 << (dp->tx_pin * 2); // set as AF
    dp->rx_gpio->MODER |= (uint32_t)2 << (dp->rx_pin * 2); // set as AF

    if (dp->tx_pin >= 8)
 8001386:	2807      	cmp	r0, #7
      dp->tx_gpio->AFR[1] |= (uint32_t)dp->af << ((dp->tx_pin - 8) * 4);
 8001388:	ea4f 0888 	mov.w	r8, r8, lsl #2
    else
      dp->tx_gpio->AFR[0] |= (uint32_t)dp->af << (dp->tx_pin * 4);
 800138c:	ea4f 0080 	mov.w	r0, r0, lsl #2
  {
    dmxl_port_t *dp = &g_dmxl_ports[i];
    dp->tx_gpio->MODER |= (uint32_t)2 << (dp->tx_pin * 2); // set as AF
    dp->rx_gpio->MODER |= (uint32_t)2 << (dp->rx_pin * 2); // set as AF

    if (dp->tx_pin >= 8)
 8001390:	d954      	bls.n	800143c <dmxl_init+0x11c>
      dp->tx_gpio->AFR[1] |= (uint32_t)dp->af << ((dp->tx_pin - 8) * 4);
 8001392:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8001394:	fa09 f808 	lsl.w	r8, r9, r8
 8001398:	ea48 0000 	orr.w	r0, r8, r0
 800139c:	6248      	str	r0, [r1, #36]	; 0x24
    else
      dp->tx_gpio->AFR[0] |= (uint32_t)dp->af << (dp->tx_pin * 4);

    if (dp->rx_pin >= 8)
 800139e:	7a59      	ldrb	r1, [r3, #9]
      dp->rx_gpio->AFR[1] |= (uint32_t)dp->af << ((dp->rx_pin - 8) * 4);
 80013a0:	f893 800a 	ldrb.w	r8, [r3, #10]
 80013a4:	f1a1 0008 	sub.w	r0, r1, #8
    if (dp->tx_pin >= 8)
      dp->tx_gpio->AFR[1] |= (uint32_t)dp->af << ((dp->tx_pin - 8) * 4);
    else
      dp->tx_gpio->AFR[0] |= (uint32_t)dp->af << (dp->tx_pin * 4);

    if (dp->rx_pin >= 8)
 80013a8:	2907      	cmp	r1, #7
      dp->rx_gpio->AFR[1] |= (uint32_t)dp->af << ((dp->rx_pin - 8) * 4);
 80013aa:	ea4f 0080 	mov.w	r0, r0, lsl #2
    else
      dp->rx_gpio->AFR[0] |= (uint32_t)dp->af << (dp->rx_pin * 4);
 80013ae:	ea4f 0181 	mov.w	r1, r1, lsl #2
    if (dp->tx_pin >= 8)
      dp->tx_gpio->AFR[1] |= (uint32_t)dp->af << ((dp->tx_pin - 8) * 4);
    else
      dp->tx_gpio->AFR[0] |= (uint32_t)dp->af << (dp->tx_pin * 4);

    if (dp->rx_pin >= 8)
 80013b2:	d93d      	bls.n	8001430 <dmxl_init+0x110>
      dp->rx_gpio->AFR[1] |= (uint32_t)dp->af << ((dp->rx_pin - 8) * 4);
 80013b4:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80013b6:	fa08 f000 	lsl.w	r0, r8, r0
 80013ba:	4308      	orrs	r0, r1
 80013bc:	6250      	str	r0, [r2, #36]	; 0x24
    else
      dp->rx_gpio->AFR[0] |= (uint32_t)dp->af << (dp->rx_pin * 4);

    USART_TypeDef *u = dp->uart;
 80013be:	68da      	ldr	r2, [r3, #12]
    u->CR1 &= ~USART_CR1_UE; // make sure it's off while we configure it
 80013c0:	8991      	ldrh	r1, [r2, #12]
 80013c2:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 80013c6:	0409      	lsls	r1, r1, #16
 80013c8:	0c09      	lsrs	r1, r1, #16
 80013ca:	8191      	strh	r1, [r2, #12]
    u->CR1 |=  USART_CR1_RE; // don't enable the transmitter yet
 80013cc:	8991      	ldrh	r1, [r2, #12]
 80013ce:	b289      	uxth	r1, r1
    // set to the default baud rate: 57600
    if (u == USART6)
 80013d0:	42aa      	cmp	r2, r5
    else
      dp->rx_gpio->AFR[0] |= (uint32_t)dp->af << (dp->rx_pin * 4);

    USART_TypeDef *u = dp->uart;
    u->CR1 &= ~USART_CR1_UE; // make sure it's off while we configure it
    u->CR1 |=  USART_CR1_RE; // don't enable the transmitter yet
 80013d2:	f041 0104 	orr.w	r1, r1, #4
 80013d6:	8191      	strh	r1, [r2, #12]
    // set to the default baud rate: 57600
    if (u == USART6)
      u->BRR = (((uint16_t)91) << 4) | 2; 
 80013d8:	bf0c      	ite	eq
 80013da:	f8a5 c008 	strheq.w	ip, [r5, #8]
    else
      u->BRR = (((uint16_t)45) << 4) | 9;
 80013de:	8117      	strhne	r7, [r2, #8]
    if (u == USART6) // running on APB2 = 84 MHz
      u->BRR = (((uint16_t)5) << 4) | 4; // 5.25 mantissa = 5, fraction =  4
    else // running on APB1 = 42 MHz
      u->BRR = (((uint16_t)2) << 4) | 10;// 2.625 mantissa = 2, fraction = 10
    */
    u->CR1 |=  USART_CR1_UE | USART_CR1_RXNEIE;
 80013e0:	8991      	ldrh	r1, [r2, #12]
 80013e2:	b289      	uxth	r1, r1
 80013e4:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 80013e8:	3318      	adds	r3, #24
 80013ea:	f041 0120 	orr.w	r1, r1, #32
  RCC->APB1ENR |= RCC_APB1ENR_USART3EN |
                  RCC_APB1ENR_UART4EN  |
                  RCC_APB1ENR_UART5EN;
  RCC->APB2ENR |= RCC_APB2ENR_USART6EN;

  for (int i = 0; i < NUM_DMXL; i++)
 80013ee:	42b3      	cmp	r3, r6
    if (u == USART6) // running on APB2 = 84 MHz
      u->BRR = (((uint16_t)5) << 4) | 4; // 5.25 mantissa = 5, fraction =  4
    else // running on APB1 = 42 MHz
      u->BRR = (((uint16_t)2) << 4) | 10;// 2.625 mantissa = 2, fraction = 10
    */
    u->CR1 |=  USART_CR1_UE | USART_CR1_RXNEIE;
 80013f0:	8191      	strh	r1, [r2, #12]
  RCC->APB1ENR |= RCC_APB1ENR_USART3EN |
                  RCC_APB1ENR_UART4EN  |
                  RCC_APB1ENR_UART5EN;
  RCC->APB2ENR |= RCC_APB2ENR_USART6EN;

  for (int i = 0; i < NUM_DMXL; i++)
 80013f2:	d1b0      	bne.n	8001356 <dmxl_init+0x36>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80013f4:	4b19      	ldr	r3, [pc, #100]	; (800145c <dmxl_init+0x13c>)
  NVIC_EnableIRQ(UART5_IRQn);
  NVIC_EnableIRQ(USART6_IRQn);

  //GPIOD->MODER |= (1 << (8*2)); // | (1 << 9);
  // turn on the 3.3v <-> 5v translator chip now
  GPIOA->MODER |= 1 << (PORTA_DMXL_BUF_EN * 2);
 80013f6:	4a1a      	ldr	r2, [pc, #104]	; (8001460 <dmxl_init+0x140>)
 80013f8:	2120      	movs	r1, #32
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80013fa:	2080      	movs	r0, #128	; 0x80
 80013fc:	f44f 1580 	mov.w	r5, #1048576	; 0x100000
 8001400:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8001404:	f883 1327 	strb.w	r1, [r3, #807]	; 0x327
 8001408:	f883 1334 	strb.w	r1, [r3, #820]	; 0x334
 800140c:	f883 1335 	strb.w	r1, [r3, #821]	; 0x335
 8001410:	f883 1347 	strb.w	r1, [r3, #839]	; 0x347
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8001414:	6058      	str	r0, [r3, #4]
 8001416:	605d      	str	r5, [r3, #4]
 8001418:	605c      	str	r4, [r3, #4]
 800141a:	6098      	str	r0, [r3, #8]
 800141c:	6813      	ldr	r3, [r2, #0]
 800141e:	432b      	orrs	r3, r5
 8001420:	6013      	str	r3, [r2, #0]
  GPIOA->BSRRL |= 1 << PORTA_DMXL_BUF_EN;
 8001422:	8b13      	ldrh	r3, [r2, #24]
 8001424:	b29b      	uxth	r3, r3
 8001426:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800142a:	8313      	strh	r3, [r2, #24]
 800142c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      dp->tx_gpio->AFR[0] |= (uint32_t)dp->af << (dp->tx_pin * 4);

    if (dp->rx_pin >= 8)
      dp->rx_gpio->AFR[1] |= (uint32_t)dp->af << ((dp->rx_pin - 8) * 4);
    else
      dp->rx_gpio->AFR[0] |= (uint32_t)dp->af << (dp->rx_pin * 4);
 8001430:	6a10      	ldr	r0, [r2, #32]
 8001432:	fa08 f101 	lsl.w	r1, r8, r1
 8001436:	4301      	orrs	r1, r0
 8001438:	6211      	str	r1, [r2, #32]
 800143a:	e7c0      	b.n	80013be <dmxl_init+0x9e>
    dp->rx_gpio->MODER |= (uint32_t)2 << (dp->rx_pin * 2); // set as AF

    if (dp->tx_pin >= 8)
      dp->tx_gpio->AFR[1] |= (uint32_t)dp->af << ((dp->tx_pin - 8) * 4);
    else
      dp->tx_gpio->AFR[0] |= (uint32_t)dp->af << (dp->tx_pin * 4);
 800143c:	f8d1 8020 	ldr.w	r8, [r1, #32]
 8001440:	fa09 f000 	lsl.w	r0, r9, r0
 8001444:	ea40 0008 	orr.w	r0, r0, r8
 8001448:	6208      	str	r0, [r1, #32]
 800144a:	e7a8      	b.n	800139e <dmxl_init+0x7e>
 800144c:	08009044 	.word	0x08009044
 8001450:	40011400 	.word	0x40011400
 8001454:	40023800 	.word	0x40023800
 8001458:	2000000c 	.word	0x2000000c
 800145c:	e000e100 	.word	0xe000e100
 8001460:	40020000 	.word	0x40020000

08001464 <dmxl_ping>:
  u->CR1 |=  USART_CR1_RE; // re-enable the transmitter
  // todo: actually spin here until we get a packet back in the rx ring
}

uint8_t dmxl_ping(const uint8_t port_idx, const uint8_t dmxl_id)
{
 8001464:	b500      	push	{lr}
 8001466:	b083      	sub	sp, #12
  uint8_t pkt[3];
  pkt[0] = dmxl_id;
  pkt[1] = 2; // packet length
 8001468:	2202      	movs	r2, #2
  pkt[2] = 1; // instruction: ping
 800146a:	2301      	movs	r3, #1
}

static void dmxl_tx(const uint8_t port_idx, 
             const uint8_t *payload, const uint8_t payload_len)
{
  if (port_idx >= NUM_DMXL)
 800146c:	2803      	cmp	r0, #3
}

uint8_t dmxl_ping(const uint8_t port_idx, const uint8_t dmxl_id)
{
  uint8_t pkt[3];
  pkt[0] = dmxl_id;
 800146e:	f88d 1004 	strb.w	r1, [sp, #4]
  pkt[1] = 2; // packet length
 8001472:	f88d 2005 	strb.w	r2, [sp, #5]
  pkt[2] = 1; // instruction: ping
 8001476:	f88d 3006 	strb.w	r3, [sp, #6]
}

static void dmxl_tx(const uint8_t port_idx, 
             const uint8_t *payload, const uint8_t payload_len)
{
  if (port_idx >= NUM_DMXL)
 800147a:	d803      	bhi.n	8001484 <dmxl_ping+0x20>
 800147c:	a901      	add	r1, sp, #4
 800147e:	2203      	movs	r2, #3
 8001480:	f7ff fe52 	bl	8001128 <dmxl_tx.part.1>
  pkt[0] = dmxl_id;
  pkt[1] = 2; // packet length
  pkt[2] = 1; // instruction: ping
  dmxl_tx(port_idx, pkt, sizeof(pkt));
  return 1; // todo
}
 8001484:	2001      	movs	r0, #1
 8001486:	b003      	add	sp, #12
 8001488:	f85d fb04 	ldr.w	pc, [sp], #4

0800148c <dmxl_process_rings>:
  pkt[4] = data_len;
  dmxl_tx(port_idx, pkt, 5);
}

void dmxl_process_rings()
{
 800148c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001490:	f8df 8184 	ldr.w	r8, [pc, #388]	; 8001618 <dmxl_process_rings+0x18c>
 8001494:	4d5b      	ldr	r5, [pc, #364]	; (8001604 <dmxl_process_rings+0x178>)
 8001496:	f8df b184 	ldr.w	fp, [pc, #388]	; 800161c <dmxl_process_rings+0x190>
  for (int i = 0; i < NUM_DMXL; i++)
  {
    while (g_dmxl_ring_rpos[i] != g_dmxl_ring_wpos[i])
    {
      const uint8_t b = g_dmxl_ring[i][g_dmxl_ring_rpos[i]];
 800149a:	f8df a184 	ldr.w	sl, [pc, #388]	; 8001620 <dmxl_process_rings+0x194>
  pkt[4] = data_len;
  dmxl_tx(port_idx, pkt, 5);
}

void dmxl_process_rings()
{
 800149e:	b083      	sub	sp, #12
  for (int i = 0; i < NUM_DMXL; i++)
  {
    while (g_dmxl_ring_rpos[i] != g_dmxl_ring_wpos[i])
 80014a0:	4646      	mov	r6, r8
  dmxl_tx(port_idx, pkt, 5);
}

void dmxl_process_rings()
{
  for (int i = 0; i < NUM_DMXL; i++)
 80014a2:	2400      	movs	r4, #0
                  (((uint16_t)g_dmxl_rx_pkt[i][3]) << 8) |
                  (((uint16_t)g_dmxl_rx_pkt[i][2])     ) ;
                g_state.dynamixel_loads[i] =
                  (((uint16_t)g_dmxl_rx_pkt[i][5]) << 8) |
                  (((uint16_t)g_dmxl_rx_pkt[i][4])     ) ;
                g_state.dynamixel_voltages[i]     = g_dmxl_rx_pkt[i][6];
 80014a4:	4b58      	ldr	r3, [pc, #352]	; (8001608 <dmxl_process_rings+0x17c>)
            */
            switch (port->comms_state)
            {
              case DMXL_CS_POLL_STATE:
                g_state.dynamixel_angles[i] = 
                  (((uint16_t)g_dmxl_rx_pkt[i][1]) << 8) |
 80014a6:	4f59      	ldr	r7, [pc, #356]	; (800160c <dmxl_process_rings+0x180>)
{
  for (int i = 0; i < NUM_DMXL; i++)
  {
    while (g_dmxl_ring_rpos[i] != g_dmxl_ring_wpos[i])
    {
      const uint8_t b = g_dmxl_ring[i][g_dmxl_ring_rpos[i]];
 80014a8:	ea4f 2904 	mov.w	r9, r4, lsl #8
                  (((uint16_t)g_dmxl_rx_pkt[i][3]) << 8) |
                  (((uint16_t)g_dmxl_rx_pkt[i][2])     ) ;
                g_state.dynamixel_loads[i] =
                  (((uint16_t)g_dmxl_rx_pkt[i][5]) << 8) |
                  (((uint16_t)g_dmxl_rx_pkt[i][4])     ) ;
                g_state.dynamixel_voltages[i]     = g_dmxl_rx_pkt[i][6];
 80014ac:	4423      	add	r3, r4
            */
            switch (port->comms_state)
            {
              case DMXL_CS_POLL_STATE:
                g_state.dynamixel_angles[i] = 
                  (((uint16_t)g_dmxl_rx_pkt[i][1]) << 8) |
 80014ae:	444f      	add	r7, r9
                  (((uint16_t)g_dmxl_rx_pkt[i][3]) << 8) |
                  (((uint16_t)g_dmxl_rx_pkt[i][2])     ) ;
                g_state.dynamixel_loads[i] =
                  (((uint16_t)g_dmxl_rx_pkt[i][5]) << 8) |
                  (((uint16_t)g_dmxl_rx_pkt[i][4])     ) ;
                g_state.dynamixel_voltages[i]     = g_dmxl_rx_pkt[i][6];
 80014b0:	9301      	str	r3, [sp, #4]

void dmxl_process_rings()
{
  for (int i = 0; i < NUM_DMXL; i++)
  {
    while (g_dmxl_ring_rpos[i] != g_dmxl_ring_wpos[i])
 80014b2:	f838 2014 	ldrh.w	r2, [r8, r4, lsl #1]
 80014b6:	f83b 3014 	ldrh.w	r3, [fp, r4, lsl #1]
 80014ba:	b292      	uxth	r2, r2
 80014bc:	b29b      	uxth	r3, r3
 80014be:	429a      	cmp	r2, r3
 80014c0:	f000 808d 	beq.w	80015de <dmxl_process_rings+0x152>
    {
      const uint8_t b = g_dmxl_ring[i][g_dmxl_ring_rpos[i]];
 80014c4:	f836 3014 	ldrh.w	r3, [r6, r4, lsl #1]
 80014c8:	fa19 f383 	uxtah	r3, r9, r3
 80014cc:	f81a 2003 	ldrb.w	r2, [sl, r3]
      //printf("dmxl %d received 0x%02x\r\n", i, b);
      if (++g_dmxl_ring_rpos[i] >= DMXL_RING_LEN)
 80014d0:	f836 3014 	ldrh.w	r3, [r6, r4, lsl #1]
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	3301      	adds	r3, #1
 80014d8:	b29b      	uxth	r3, r3
 80014da:	2bff      	cmp	r3, #255	; 0xff
 80014dc:	f826 3014 	strh.w	r3, [r6, r4, lsl #1]
        g_dmxl_ring_rpos[i] = 0; // wrap around
 80014e0:	bf84      	itt	hi
 80014e2:	2300      	movhi	r3, #0
 80014e4:	f826 3014 	strhhi.w	r3, [r6, r4, lsl #1]
      dmxl_port_t *port = &g_dmxl_ports[i]; // save typing
      switch (port->parser_state)
 80014e8:	7c6b      	ldrb	r3, [r5, #17]
{
  for (int i = 0; i < NUM_DMXL; i++)
  {
    while (g_dmxl_ring_rpos[i] != g_dmxl_ring_wpos[i])
    {
      const uint8_t b = g_dmxl_ring[i][g_dmxl_ring_rpos[i]];
 80014ea:	b2d2      	uxtb	r2, r2
      //printf("dmxl %d received 0x%02x\r\n", i, b);
      if (++g_dmxl_ring_rpos[i] >= DMXL_RING_LEN)
        g_dmxl_ring_rpos[i] = 0; // wrap around
      dmxl_port_t *port = &g_dmxl_ports[i]; // save typing
      switch (port->parser_state)
 80014ec:	2b06      	cmp	r3, #6
 80014ee:	d872      	bhi.n	80015d6 <dmxl_process_rings+0x14a>
 80014f0:	e8df f003 	tbb	[pc, r3]
 80014f4:	5a62666b 	.word	0x5a62666b
 80014f8:	384d      	.short	0x384d
 80014fa:	04          	.byte	0x04
 80014fb:	00          	.byte	0x00
          if (port->rx_pkt_writepos == port->rx_pkt_len - 1)
            port->parser_state = DMXL_PS_CHECKSUM;
          port->rx_pkt_writepos++;
          break;
        case DMXL_PS_CHECKSUM:
          if (((uint8_t)(~port->rx_checksum)) == b)
 80014fc:	7d29      	ldrb	r1, [r5, #20]
 80014fe:	43c9      	mvns	r1, r1
 8001500:	b2c9      	uxtb	r1, r1
 8001502:	4291      	cmp	r1, r2
 8001504:	d174      	bne.n	80015f0 <dmxl_process_rings+0x164>
            /*
            printf("checksum passed. received %d bytes\r\n", port->rx_pkt_len);
            for (int j = 0; j < port->rx_pkt_len; j++)
              printf("  0x%02x\r\n", g_dmxl_rx_pkt[i][j]);
            */
            switch (port->comms_state)
 8001506:	7c2b      	ldrb	r3, [r5, #16]
 8001508:	2b02      	cmp	r3, #2
 800150a:	d127      	bne.n	800155c <dmxl_process_rings+0xd0>
            {
              case DMXL_CS_POLL_STATE:
                g_state.dynamixel_angles[i] = 
 800150c:	483e      	ldr	r0, [pc, #248]	; (8001608 <dmxl_process_rings+0x17c>)
                  (((uint16_t)g_dmxl_rx_pkt[i][1]) << 8) |
 800150e:	7879      	ldrb	r1, [r7, #1]
                  (((uint16_t)g_dmxl_rx_pkt[i][0])     ) ;
 8001510:	783a      	ldrb	r2, [r7, #0]
              printf("  0x%02x\r\n", g_dmxl_rx_pkt[i][j]);
            */
            switch (port->comms_state)
            {
              case DMXL_CS_POLL_STATE:
                g_state.dynamixel_angles[i] = 
 8001512:	f104 0354 	add.w	r3, r4, #84	; 0x54
 8001516:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800151a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800151e:	8859      	ldrh	r1, [r3, #2]
 8001520:	805a      	strh	r2, [r3, #2]
                  (((uint16_t)g_dmxl_rx_pkt[i][1]) << 8) |
                  (((uint16_t)g_dmxl_rx_pkt[i][0])     ) ;
                //printf("dmxl %d angle = %d\r\n", (int)i, (int)g_state.dynamixel_angles[i]);
                g_state.dynamixel_speeds[i] =
                  (((uint16_t)g_dmxl_rx_pkt[i][3]) << 8) |
 8001522:	78f9      	ldrb	r1, [r7, #3]
                  (((uint16_t)g_dmxl_rx_pkt[i][2])     ) ;
 8001524:	78ba      	ldrb	r2, [r7, #2]
              case DMXL_CS_POLL_STATE:
                g_state.dynamixel_angles[i] = 
                  (((uint16_t)g_dmxl_rx_pkt[i][1]) << 8) |
                  (((uint16_t)g_dmxl_rx_pkt[i][0])     ) ;
                //printf("dmxl %d angle = %d\r\n", (int)i, (int)g_state.dynamixel_angles[i]);
                g_state.dynamixel_speeds[i] =
 8001526:	f104 0358 	add.w	r3, r4, #88	; 0x58
 800152a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800152e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001532:	8859      	ldrh	r1, [r3, #2]
 8001534:	805a      	strh	r2, [r3, #2]
                  (((uint16_t)g_dmxl_rx_pkt[i][3]) << 8) |
                  (((uint16_t)g_dmxl_rx_pkt[i][2])     ) ;
                g_state.dynamixel_loads[i] =
                  (((uint16_t)g_dmxl_rx_pkt[i][5]) << 8) |
 8001536:	7979      	ldrb	r1, [r7, #5]
                  (((uint16_t)g_dmxl_rx_pkt[i][4])     ) ;
 8001538:	793a      	ldrb	r2, [r7, #4]
                  (((uint16_t)g_dmxl_rx_pkt[i][0])     ) ;
                //printf("dmxl %d angle = %d\r\n", (int)i, (int)g_state.dynamixel_angles[i]);
                g_state.dynamixel_speeds[i] =
                  (((uint16_t)g_dmxl_rx_pkt[i][3]) << 8) |
                  (((uint16_t)g_dmxl_rx_pkt[i][2])     ) ;
                g_state.dynamixel_loads[i] =
 800153a:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 800153e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001542:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001546:	8859      	ldrh	r1, [r3, #2]
 8001548:	805a      	strh	r2, [r3, #2]
                  (((uint16_t)g_dmxl_rx_pkt[i][5]) << 8) |
                  (((uint16_t)g_dmxl_rx_pkt[i][4])     ) ;
                g_state.dynamixel_voltages[i]     = g_dmxl_rx_pkt[i][6];
 800154a:	79bb      	ldrb	r3, [r7, #6]
 800154c:	9901      	ldr	r1, [sp, #4]
 800154e:	b2db      	uxtb	r3, r3
 8001550:	f881 30c2 	strb.w	r3, [r1, #194]	; 0xc2
                g_state.dynamixel_temperatures[i] = g_dmxl_rx_pkt[i][7];
 8001554:	79fb      	ldrb	r3, [r7, #7]
 8001556:	b2db      	uxtb	r3, r3
 8001558:	f881 30c6 	strb.w	r3, [r1, #198]	; 0xc6
            }
          }
          else
            printf("checksum failed: local 0x%02x != received 0x%02x\r\n",
                   (uint8_t)~port->rx_checksum, b);
          port->parser_state = DMXL_PS_PREAMBLE_0;
 800155c:	2300      	movs	r3, #0
 800155e:	746b      	strb	r3, [r5, #17]
          port->comms_state = DMXL_CS_IDLE;
 8001560:	742b      	strb	r3, [r5, #16]
          break;
 8001562:	e7a6      	b.n	80014b2 <dmxl_process_rings+0x26>
            port->parser_state = DMXL_PS_PARAMETER;
          else
            port->parser_state = DMXL_PS_CHECKSUM;
          break;
        case DMXL_PS_PARAMETER:
          port->rx_checksum += b;
 8001564:	7d28      	ldrb	r0, [r5, #20]
          g_dmxl_rx_pkt[i][port->rx_pkt_writepos] = b;
 8001566:	7ceb      	ldrb	r3, [r5, #19]
          if (port->rx_pkt_writepos == port->rx_pkt_len - 1)
 8001568:	7ca9      	ldrb	r1, [r5, #18]
            port->parser_state = DMXL_PS_PARAMETER;
          else
            port->parser_state = DMXL_PS_CHECKSUM;
          break;
        case DMXL_PS_PARAMETER:
          port->rx_checksum += b;
 800156a:	4410      	add	r0, r2
          g_dmxl_rx_pkt[i][port->rx_pkt_writepos] = b;
 800156c:	eb09 0c03 	add.w	ip, r9, r3
            port->parser_state = DMXL_PS_PARAMETER;
          else
            port->parser_state = DMXL_PS_CHECKSUM;
          break;
        case DMXL_PS_PARAMETER:
          port->rx_checksum += b;
 8001570:	9000      	str	r0, [sp, #0]
          g_dmxl_rx_pkt[i][port->rx_pkt_writepos] = b;
 8001572:	4826      	ldr	r0, [pc, #152]	; (800160c <dmxl_process_rings+0x180>)
          if (port->rx_pkt_writepos == port->rx_pkt_len - 1)
 8001574:	3901      	subs	r1, #1
 8001576:	428b      	cmp	r3, r1
          else
            port->parser_state = DMXL_PS_CHECKSUM;
          break;
        case DMXL_PS_PARAMETER:
          port->rx_checksum += b;
          g_dmxl_rx_pkt[i][port->rx_pkt_writepos] = b;
 8001578:	f800 200c 	strb.w	r2, [r0, ip]
            port->parser_state = DMXL_PS_PARAMETER;
          else
            port->parser_state = DMXL_PS_CHECKSUM;
          break;
        case DMXL_PS_PARAMETER:
          port->rx_checksum += b;
 800157c:	9a00      	ldr	r2, [sp, #0]
 800157e:	752a      	strb	r2, [r5, #20]
          g_dmxl_rx_pkt[i][port->rx_pkt_writepos] = b;
          if (port->rx_pkt_writepos == port->rx_pkt_len - 1)
            port->parser_state = DMXL_PS_CHECKSUM;
          port->rx_pkt_writepos++;
 8001580:	f103 0301 	add.w	r3, r3, #1
          break;
        case DMXL_PS_PARAMETER:
          port->rx_checksum += b;
          g_dmxl_rx_pkt[i][port->rx_pkt_writepos] = b;
          if (port->rx_pkt_writepos == port->rx_pkt_len - 1)
            port->parser_state = DMXL_PS_CHECKSUM;
 8001584:	bf04      	itt	eq
 8001586:	2206      	moveq	r2, #6
 8001588:	746a      	strbeq	r2, [r5, #17]
          port->rx_pkt_writepos++;
 800158a:	74eb      	strb	r3, [r5, #19]
          break;
 800158c:	e791      	b.n	80014b2 <dmxl_process_rings+0x26>
          port->rx_checksum += b;
          port->parser_state = DMXL_PS_ERROR;
          break;
        case DMXL_PS_ERROR:
          g_state.dynamixel_error_status[i] = b; // save for global state
          port->rx_checksum += b;
 800158e:	7d29      	ldrb	r1, [r5, #20]
          port->rx_pkt_len = b - 2;
          port->rx_checksum += b;
          port->parser_state = DMXL_PS_ERROR;
          break;
        case DMXL_PS_ERROR:
          g_state.dynamixel_error_status[i] = b; // save for global state
 8001590:	9801      	ldr	r0, [sp, #4]
          port->rx_checksum += b;
          port->rx_pkt_writepos = 0;
          if (port->rx_pkt_len)
 8001592:	7cab      	ldrb	r3, [r5, #18]
          port->rx_pkt_len = b - 2;
          port->rx_checksum += b;
          port->parser_state = DMXL_PS_ERROR;
          break;
        case DMXL_PS_ERROR:
          g_state.dynamixel_error_status[i] = b; // save for global state
 8001594:	f880 20a6 	strb.w	r2, [r0, #166]	; 0xa6
          port->rx_checksum += b;
 8001598:	440a      	add	r2, r1
          port->rx_pkt_writepos = 0;
 800159a:	2100      	movs	r1, #0
          port->rx_checksum += b;
          port->parser_state = DMXL_PS_ERROR;
          break;
        case DMXL_PS_ERROR:
          g_state.dynamixel_error_status[i] = b; // save for global state
          port->rx_checksum += b;
 800159c:	752a      	strb	r2, [r5, #20]
          port->rx_pkt_writepos = 0;
 800159e:	74e9      	strb	r1, [r5, #19]
          if (port->rx_pkt_len)
 80015a0:	b353      	cbz	r3, 80015f8 <dmxl_process_rings+0x16c>
            port->parser_state = DMXL_PS_PARAMETER;
 80015a2:	2305      	movs	r3, #5
 80015a4:	746b      	strb	r3, [r5, #17]
 80015a6:	e784      	b.n	80014b2 <dmxl_process_rings+0x26>
          port->rx_checksum = b;
          port->parser_state = DMXL_PS_LENGTH; // ignore ID (all the same)
          break;
        case DMXL_PS_LENGTH:
          port->rx_pkt_len = b - 2;
          port->rx_checksum += b;
 80015a8:	7d29      	ldrb	r1, [r5, #20]
          port->parser_state = DMXL_PS_ERROR;
 80015aa:	2304      	movs	r3, #4
          port->rx_checksum = b;
          port->parser_state = DMXL_PS_LENGTH; // ignore ID (all the same)
          break;
        case DMXL_PS_LENGTH:
          port->rx_pkt_len = b - 2;
          port->rx_checksum += b;
 80015ac:	4411      	add	r1, r2
        case DMXL_PS_ID:
          port->rx_checksum = b;
          port->parser_state = DMXL_PS_LENGTH; // ignore ID (all the same)
          break;
        case DMXL_PS_LENGTH:
          port->rx_pkt_len = b - 2;
 80015ae:	3a02      	subs	r2, #2
          port->rx_checksum += b;
 80015b0:	7529      	strb	r1, [r5, #20]
        case DMXL_PS_ID:
          port->rx_checksum = b;
          port->parser_state = DMXL_PS_LENGTH; // ignore ID (all the same)
          break;
        case DMXL_PS_LENGTH:
          port->rx_pkt_len = b - 2;
 80015b2:	74aa      	strb	r2, [r5, #18]
          port->rx_checksum += b;
          port->parser_state = DMXL_PS_ERROR;
 80015b4:	746b      	strb	r3, [r5, #17]
          break;
 80015b6:	e77c      	b.n	80014b2 <dmxl_process_rings+0x26>
          else
            port->parser_state = DMXL_PS_PREAMBLE_0;
          break;
        case DMXL_PS_ID:
          port->rx_checksum = b;
          port->parser_state = DMXL_PS_LENGTH; // ignore ID (all the same)
 80015b8:	2303      	movs	r3, #3
            port->parser_state = DMXL_PS_ID;
          else
            port->parser_state = DMXL_PS_PREAMBLE_0;
          break;
        case DMXL_PS_ID:
          port->rx_checksum = b;
 80015ba:	752a      	strb	r2, [r5, #20]
          port->parser_state = DMXL_PS_LENGTH; // ignore ID (all the same)
 80015bc:	746b      	strb	r3, [r5, #17]
          break;
 80015be:	e778      	b.n	80014b2 <dmxl_process_rings+0x26>
        case DMXL_PS_PREAMBLE_0:
          if (b == 0xff)
            port->parser_state = DMXL_PS_PREAMBLE_1;
          break;
        case DMXL_PS_PREAMBLE_1:
          if (b == 0xff)
 80015c0:	2aff      	cmp	r2, #255	; 0xff
 80015c2:	d01c      	beq.n	80015fe <dmxl_process_rings+0x172>
          port->parser_state = DMXL_PS_PREAMBLE_0;
          port->comms_state = DMXL_CS_IDLE;
          break;
        default:
          printf("woah there partner. unexpected dmxl rx state!\r\n");
          port->parser_state = DMXL_PS_PREAMBLE_0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	746b      	strb	r3, [r5, #17]
          break;
 80015c8:	e773      	b.n	80014b2 <dmxl_process_rings+0x26>
        g_dmxl_ring_rpos[i] = 0; // wrap around
      dmxl_port_t *port = &g_dmxl_ports[i]; // save typing
      switch (port->parser_state)
      {
        case DMXL_PS_PREAMBLE_0:
          if (b == 0xff)
 80015ca:	2aff      	cmp	r2, #255	; 0xff
 80015cc:	f47f af71 	bne.w	80014b2 <dmxl_process_rings+0x26>
            port->parser_state = DMXL_PS_PREAMBLE_1;
 80015d0:	2301      	movs	r3, #1
 80015d2:	746b      	strb	r3, [r5, #17]
 80015d4:	e76d      	b.n	80014b2 <dmxl_process_rings+0x26>
                   (uint8_t)~port->rx_checksum, b);
          port->parser_state = DMXL_PS_PREAMBLE_0;
          port->comms_state = DMXL_CS_IDLE;
          break;
        default:
          printf("woah there partner. unexpected dmxl rx state!\r\n");
 80015d6:	480e      	ldr	r0, [pc, #56]	; (8001610 <dmxl_process_rings+0x184>)
 80015d8:	f000 ff34 	bl	8002444 <puts>
 80015dc:	e7f2      	b.n	80015c4 <dmxl_process_rings+0x138>
  dmxl_tx(port_idx, pkt, 5);
}

void dmxl_process_rings()
{
  for (int i = 0; i < NUM_DMXL; i++)
 80015de:	3401      	adds	r4, #1
 80015e0:	2c04      	cmp	r4, #4
 80015e2:	f105 0518 	add.w	r5, r5, #24
 80015e6:	f47f af5d 	bne.w	80014a4 <dmxl_process_rings+0x18>
          port->parser_state = DMXL_PS_PREAMBLE_0;
          break;
      }
    }
  }
}
 80015ea:	b003      	add	sp, #12
 80015ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
              default:
                break;
            }
          }
          else
            printf("checksum failed: local 0x%02x != received 0x%02x\r\n",
 80015f0:	4808      	ldr	r0, [pc, #32]	; (8001614 <dmxl_process_rings+0x188>)
 80015f2:	f000 fee5 	bl	80023c0 <printf>
 80015f6:	e7b1      	b.n	800155c <dmxl_process_rings+0xd0>
          port->rx_checksum += b;
          port->rx_pkt_writepos = 0;
          if (port->rx_pkt_len)
            port->parser_state = DMXL_PS_PARAMETER;
          else
            port->parser_state = DMXL_PS_CHECKSUM;
 80015f8:	2306      	movs	r3, #6
 80015fa:	746b      	strb	r3, [r5, #17]
 80015fc:	e759      	b.n	80014b2 <dmxl_process_rings+0x26>
          if (b == 0xff)
            port->parser_state = DMXL_PS_PREAMBLE_1;
          break;
        case DMXL_PS_PREAMBLE_1:
          if (b == 0xff)
            port->parser_state = DMXL_PS_ID;
 80015fe:	2302      	movs	r3, #2
 8001600:	746b      	strb	r3, [r5, #17]
 8001602:	e756      	b.n	80014b2 <dmxl_process_rings+0x26>
 8001604:	2000000c 	.word	0x2000000c
 8001608:	2000fca0 	.word	0x2000fca0
 800160c:	2000f388 	.word	0x2000f388
 8001610:	08009088 	.word	0x08009088
 8001614:	08009054 	.word	0x08009054
 8001618:	2000fb88 	.word	0x2000fb88
 800161c:	2000f380 	.word	0x2000f380
 8001620:	2000f788 	.word	0x2000f788

08001624 <dmxl_set_led>:
  }
}

void dmxl_set_led(const uint8_t port_idx, const uint8_t dmxl_id,
                  const uint8_t enable)
{
 8001624:	b500      	push	{lr}
 8001626:	b085      	sub	sp, #20
  uint8_t d = enable ? 1 : 0;
 8001628:	3200      	adds	r2, #0
 800162a:	ab04      	add	r3, sp, #16
 800162c:	bf18      	it	ne
 800162e:	2201      	movne	r2, #1
 8001630:	f803 2d01 	strb.w	r2, [r3, #-1]!
  dmxl_write_data(port_idx, dmxl_id, 1, 25, &d); // 25 = LED address
 8001634:	2201      	movs	r2, #1
 8001636:	9300      	str	r3, [sp, #0]
 8001638:	2319      	movs	r3, #25
 800163a:	f7ff fdb9 	bl	80011b0 <dmxl_write_data>
}
 800163e:	b005      	add	sp, #20
 8001640:	f85d fb04 	ldr.w	pc, [sp], #4

08001644 <dmxl_set_torque_enable>:


void dmxl_set_torque_enable(const uint8_t port_idx, const uint8_t dmxl_id,
                            const uint8_t enable)
{
 8001644:	b500      	push	{lr}
 8001646:	b085      	sub	sp, #20
  uint8_t d = enable ? 1 : 0;
 8001648:	3200      	adds	r2, #0
 800164a:	ab04      	add	r3, sp, #16
 800164c:	bf18      	it	ne
 800164e:	2201      	movne	r2, #1
 8001650:	f803 2d01 	strb.w	r2, [r3, #-1]!
  dmxl_write_data(port_idx, dmxl_id, 1, 24, &d);
 8001654:	2201      	movs	r2, #1
 8001656:	9300      	str	r3, [sp, #0]
 8001658:	2318      	movs	r3, #24
 800165a:	f7ff fda9 	bl	80011b0 <dmxl_write_data>
}
 800165e:	b005      	add	sp, #20
 8001660:	f85d fb04 	ldr.w	pc, [sp], #4

08001664 <dmxl_set_angle_limits>:

void dmxl_set_angle_limits(const uint8_t port_idx, const uint8_t dmxl_id,
                           const uint16_t cw_limit, const uint16_t ccw_limit)
{
 8001664:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001666:	b085      	sub	sp, #20
 8001668:	461c      	mov	r4, r3
  uint8_t d[4];
  d[0] = cw_limit & 0xff;
  d[1] = (cw_limit >> 8) & 0xff;
  d[2] = ccw_limit & 0xff;
  d[3] = (ccw_limit >> 8) & 0xff;
  dmxl_write_data(port_idx, dmxl_id, 4, 6, d);
 800166a:	ab03      	add	r3, sp, #12
  dmxl_write_data(port_idx, dmxl_id, 1, 24, &d);
}

void dmxl_set_angle_limits(const uint8_t port_idx, const uint8_t dmxl_id,
                           const uint16_t cw_limit, const uint16_t ccw_limit)
{
 800166c:	4615      	mov	r5, r2
  uint8_t d[4];
  d[0] = cw_limit & 0xff;
  d[1] = (cw_limit >> 8) & 0xff;
 800166e:	0a17      	lsrs	r7, r2, #8
  d[2] = ccw_limit & 0xff;
  d[3] = (ccw_limit >> 8) & 0xff;
  dmxl_write_data(port_idx, dmxl_id, 4, 6, d);
 8001670:	9300      	str	r3, [sp, #0]
{
  uint8_t d[4];
  d[0] = cw_limit & 0xff;
  d[1] = (cw_limit >> 8) & 0xff;
  d[2] = ccw_limit & 0xff;
  d[3] = (ccw_limit >> 8) & 0xff;
 8001672:	0a26      	lsrs	r6, r4, #8
  dmxl_write_data(port_idx, dmxl_id, 4, 6, d);
 8001674:	2204      	movs	r2, #4
 8001676:	2306      	movs	r3, #6

void dmxl_set_angle_limits(const uint8_t port_idx, const uint8_t dmxl_id,
                           const uint16_t cw_limit, const uint16_t ccw_limit)
{
  uint8_t d[4];
  d[0] = cw_limit & 0xff;
 8001678:	f88d 500c 	strb.w	r5, [sp, #12]
  d[1] = (cw_limit >> 8) & 0xff;
 800167c:	f88d 700d 	strb.w	r7, [sp, #13]
  d[2] = ccw_limit & 0xff;
 8001680:	f88d 400e 	strb.w	r4, [sp, #14]
  d[3] = (ccw_limit >> 8) & 0xff;
 8001684:	f88d 600f 	strb.w	r6, [sp, #15]
  dmxl_write_data(port_idx, dmxl_id, 4, 6, d);
 8001688:	f7ff fd92 	bl	80011b0 <dmxl_write_data>
}
 800168c:	b005      	add	sp, #20
 800168e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001690 <dmxl_set_speed_dir>:

void dmxl_set_speed_dir(const uint8_t port_idx, const uint8_t dmxl_id,
                        const uint16_t speed, const uint8_t dir)
{
 8001690:	b530      	push	{r4, r5, lr}
  uint8_t d[2];
  d[0] = speed & 0xff;
  d[1] = ((speed >> 8) & 0x03) | (dir ? 0x04 : 0);
 8001692:	2b00      	cmp	r3, #0
  dmxl_write_data(port_idx, dmxl_id, 4, 6, d);
}

void dmxl_set_speed_dir(const uint8_t port_idx, const uint8_t dmxl_id,
                        const uint16_t speed, const uint8_t dir)
{
 8001694:	b085      	sub	sp, #20
 8001696:	4614      	mov	r4, r2
  uint8_t d[2];
  d[0] = speed & 0xff;
  d[1] = ((speed >> 8) & 0x03) | (dir ? 0x04 : 0);
 8001698:	bf0c      	ite	eq
 800169a:	2500      	moveq	r5, #0
 800169c:	2504      	movne	r5, #4
  dmxl_write_data(port_idx, dmxl_id, 2, 32, d);
 800169e:	ab03      	add	r3, sp, #12
void dmxl_set_speed_dir(const uint8_t port_idx, const uint8_t dmxl_id,
                        const uint16_t speed, const uint8_t dir)
{
  uint8_t d[2];
  d[0] = speed & 0xff;
  d[1] = ((speed >> 8) & 0x03) | (dir ? 0x04 : 0);
 80016a0:	f3c2 2201 	ubfx	r2, r2, #8, #2
 80016a4:	4315      	orrs	r5, r2
  dmxl_write_data(port_idx, dmxl_id, 2, 32, d);
 80016a6:	9300      	str	r3, [sp, #0]
 80016a8:	2202      	movs	r2, #2
 80016aa:	2320      	movs	r3, #32

void dmxl_set_speed_dir(const uint8_t port_idx, const uint8_t dmxl_id,
                        const uint16_t speed, const uint8_t dir)
{
  uint8_t d[2];
  d[0] = speed & 0xff;
 80016ac:	f88d 400c 	strb.w	r4, [sp, #12]
  d[1] = ((speed >> 8) & 0x03) | (dir ? 0x04 : 0);
 80016b0:	f88d 500d 	strb.w	r5, [sp, #13]
  dmxl_write_data(port_idx, dmxl_id, 2, 32, d);
 80016b4:	f7ff fd7c 	bl	80011b0 <dmxl_write_data>
}
 80016b8:	b005      	add	sp, #20
 80016ba:	bd30      	pop	{r4, r5, pc}

080016bc <dmxl_set_control_mode>:

void dmxl_set_control_mode(const uint8_t port_idx, 
                           const dmxl_control_mode_t control_mode)
{
 80016bc:	b570      	push	{r4, r5, r6, lr}
  //printf("dmxl_set_control_mode %d %d\r\n", port_idx, (int)control_mode);
  if (port_idx >= NUM_DMXL)
 80016be:	2803      	cmp	r0, #3
  dmxl_write_data(port_idx, dmxl_id, 2, 32, d);
}

void dmxl_set_control_mode(const uint8_t port_idx, 
                           const dmxl_control_mode_t control_mode)
{
 80016c0:	b086      	sub	sp, #24
 80016c2:	4605      	mov	r5, r0
 80016c4:	460c      	mov	r4, r1
  //printf("dmxl_set_control_mode %d %d\r\n", port_idx, (int)control_mode);
  if (port_idx >= NUM_DMXL)
 80016c6:	d804      	bhi.n	80016d2 <dmxl_set_control_mode+0x16>
    return;
  if (control_mode == DMXL_CM_IDLE)
 80016c8:	b129      	cbz	r1, 80016d6 <dmxl_set_control_mode+0x1a>
  {
    dmxl_set_led(port_idx, DMXL_DEFAULT_ID, 0);
    for (volatile uint32_t i = 0; i < 200000; i++) { }
    dmxl_set_torque_enable(port_idx, DMXL_DEFAULT_ID, 0);
  }
  else if (control_mode == DMXL_CM_VELOCITY)
 80016ca:	2901      	cmp	r1, #1
 80016cc:	d043      	beq.n	8001756 <dmxl_set_control_mode+0x9a>
  {
    dmxl_set_led(port_idx, DMXL_DEFAULT_ID, 1);
    for (volatile uint32_t i = 0; i < 200000; i++) { }
    dmxl_set_torque_enable(port_idx, DMXL_DEFAULT_ID, 1);
  }
  else if (control_mode == DMXL_CM_POSITION)
 80016ce:	2902      	cmp	r1, #2
 80016d0:	d021      	beq.n	8001716 <dmxl_set_control_mode+0x5a>
  {
    dmxl_set_led(port_idx, DMXL_DEFAULT_ID, 1);
    for (volatile uint32_t i = 0; i < 200000; i++) { }
    dmxl_set_torque_enable(port_idx, DMXL_DEFAULT_ID, 1);
  }
}
 80016d2:	b006      	add	sp, #24
 80016d4:	bd70      	pop	{r4, r5, r6, pc}
}

void dmxl_set_led(const uint8_t port_idx, const uint8_t dmxl_id,
                  const uint8_t enable)
{
  uint8_t d = enable ? 1 : 0;
 80016d6:	ae06      	add	r6, sp, #24
  dmxl_write_data(port_idx, dmxl_id, 1, 25, &d); // 25 = LED address
 80016d8:	2101      	movs	r1, #1
}

void dmxl_set_led(const uint8_t port_idx, const uint8_t dmxl_id,
                  const uint8_t enable)
{
  uint8_t d = enable ? 1 : 0;
 80016da:	f806 4d04 	strb.w	r4, [r6, #-4]!
  dmxl_write_data(port_idx, dmxl_id, 1, 25, &d); // 25 = LED address
 80016de:	460a      	mov	r2, r1
 80016e0:	2319      	movs	r3, #25
 80016e2:	9600      	str	r6, [sp, #0]
 80016e4:	f7ff fd64 	bl	80011b0 <dmxl_write_data>
  if (port_idx >= NUM_DMXL)
    return;
  if (control_mode == DMXL_CM_IDLE)
  {
    dmxl_set_led(port_idx, DMXL_DEFAULT_ID, 0);
    for (volatile uint32_t i = 0; i < 200000; i++) { }
 80016e8:	9403      	str	r4, [sp, #12]
 80016ea:	9b03      	ldr	r3, [sp, #12]
 80016ec:	4a29      	ldr	r2, [pc, #164]	; (8001794 <dmxl_set_control_mode+0xd8>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d805      	bhi.n	80016fe <dmxl_set_control_mode+0x42>
 80016f2:	9b03      	ldr	r3, [sp, #12]
 80016f4:	3301      	adds	r3, #1
 80016f6:	9303      	str	r3, [sp, #12]
 80016f8:	9b03      	ldr	r3, [sp, #12]
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d9f9      	bls.n	80016f2 <dmxl_set_control_mode+0x36>

void dmxl_set_torque_enable(const uint8_t port_idx, const uint8_t dmxl_id,
                            const uint8_t enable)
{
  uint8_t d = enable ? 1 : 0;
  dmxl_write_data(port_idx, dmxl_id, 1, 24, &d);
 80016fe:	2101      	movs	r1, #1
 8001700:	9600      	str	r6, [sp, #0]
 8001702:	4628      	mov	r0, r5
 8001704:	460a      	mov	r2, r1


void dmxl_set_torque_enable(const uint8_t port_idx, const uint8_t dmxl_id,
                            const uint8_t enable)
{
  uint8_t d = enable ? 1 : 0;
 8001706:	2400      	movs	r4, #0
  dmxl_write_data(port_idx, dmxl_id, 1, 24, &d);
 8001708:	2318      	movs	r3, #24


void dmxl_set_torque_enable(const uint8_t port_idx, const uint8_t dmxl_id,
                            const uint8_t enable)
{
  uint8_t d = enable ? 1 : 0;
 800170a:	f88d 4014 	strb.w	r4, [sp, #20]
  dmxl_write_data(port_idx, dmxl_id, 1, 24, &d);
 800170e:	f7ff fd4f 	bl	80011b0 <dmxl_write_data>
  {
    dmxl_set_led(port_idx, DMXL_DEFAULT_ID, 1);
    for (volatile uint32_t i = 0; i < 200000; i++) { }
    dmxl_set_torque_enable(port_idx, DMXL_DEFAULT_ID, 1);
  }
}
 8001712:	b006      	add	sp, #24
 8001714:	bd70      	pop	{r4, r5, r6, pc}
}

void dmxl_set_led(const uint8_t port_idx, const uint8_t dmxl_id,
                  const uint8_t enable)
{
  uint8_t d = enable ? 1 : 0;
 8001716:	ab06      	add	r3, sp, #24
 8001718:	2101      	movs	r1, #1
 800171a:	f803 1d04 	strb.w	r1, [r3, #-4]!
  dmxl_write_data(port_idx, dmxl_id, 1, 25, &d); // 25 = LED address
 800171e:	460a      	mov	r2, r1
 8001720:	9300      	str	r3, [sp, #0]
 8001722:	2319      	movs	r3, #25
 8001724:	f7ff fd44 	bl	80011b0 <dmxl_write_data>
    dmxl_set_torque_enable(port_idx, DMXL_DEFAULT_ID, 1);
  }
  else if (control_mode == DMXL_CM_POSITION)
  {
    dmxl_set_led(port_idx, DMXL_DEFAULT_ID, 1);
    for (volatile uint32_t i = 0; i < 200000; i++) { }
 8001728:	2300      	movs	r3, #0
 800172a:	9305      	str	r3, [sp, #20]
 800172c:	9b05      	ldr	r3, [sp, #20]
 800172e:	4a19      	ldr	r2, [pc, #100]	; (8001794 <dmxl_set_control_mode+0xd8>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d805      	bhi.n	8001740 <dmxl_set_control_mode+0x84>
 8001734:	9b05      	ldr	r3, [sp, #20]
 8001736:	3301      	adds	r3, #1
 8001738:	9305      	str	r3, [sp, #20]
 800173a:	9b05      	ldr	r3, [sp, #20]
 800173c:	4293      	cmp	r3, r2
 800173e:	d9f9      	bls.n	8001734 <dmxl_set_control_mode+0x78>


void dmxl_set_torque_enable(const uint8_t port_idx, const uint8_t dmxl_id,
                            const uint8_t enable)
{
  uint8_t d = enable ? 1 : 0;
 8001740:	ab06      	add	r3, sp, #24
 8001742:	2101      	movs	r1, #1
 8001744:	f803 1d08 	strb.w	r1, [r3, #-8]!
  dmxl_write_data(port_idx, dmxl_id, 1, 24, &d);
 8001748:	4628      	mov	r0, r5
 800174a:	9300      	str	r3, [sp, #0]
 800174c:	460a      	mov	r2, r1
 800174e:	2318      	movs	r3, #24
 8001750:	f7ff fd2e 	bl	80011b0 <dmxl_write_data>
 8001754:	e7bd      	b.n	80016d2 <dmxl_set_control_mode+0x16>
}

void dmxl_set_led(const uint8_t port_idx, const uint8_t dmxl_id,
                  const uint8_t enable)
{
  uint8_t d = enable ? 1 : 0;
 8001756:	ae06      	add	r6, sp, #24
  dmxl_write_data(port_idx, dmxl_id, 1, 25, &d); // 25 = LED address
 8001758:	460a      	mov	r2, r1
}

void dmxl_set_led(const uint8_t port_idx, const uint8_t dmxl_id,
                  const uint8_t enable)
{
  uint8_t d = enable ? 1 : 0;
 800175a:	f806 1d04 	strb.w	r1, [r6, #-4]!
  dmxl_write_data(port_idx, dmxl_id, 1, 25, &d); // 25 = LED address
 800175e:	2319      	movs	r3, #25
 8001760:	9600      	str	r6, [sp, #0]
 8001762:	f7ff fd25 	bl	80011b0 <dmxl_write_data>
    dmxl_set_torque_enable(port_idx, DMXL_DEFAULT_ID, 0);
  }
  else if (control_mode == DMXL_CM_VELOCITY)
  {
    dmxl_set_led(port_idx, DMXL_DEFAULT_ID, 1);
    for (volatile uint32_t i = 0; i < 200000; i++) { }
 8001766:	2300      	movs	r3, #0
 8001768:	9304      	str	r3, [sp, #16]
 800176a:	9b04      	ldr	r3, [sp, #16]
 800176c:	4a09      	ldr	r2, [pc, #36]	; (8001794 <dmxl_set_control_mode+0xd8>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d805      	bhi.n	800177e <dmxl_set_control_mode+0xc2>
 8001772:	9b04      	ldr	r3, [sp, #16]
 8001774:	3301      	adds	r3, #1
 8001776:	9304      	str	r3, [sp, #16]
 8001778:	9b04      	ldr	r3, [sp, #16]
 800177a:	4293      	cmp	r3, r2
 800177c:	d9f9      	bls.n	8001772 <dmxl_set_control_mode+0xb6>


void dmxl_set_torque_enable(const uint8_t port_idx, const uint8_t dmxl_id,
                            const uint8_t enable)
{
  uint8_t d = enable ? 1 : 0;
 800177e:	2401      	movs	r4, #1
  dmxl_write_data(port_idx, dmxl_id, 1, 24, &d);
 8001780:	4621      	mov	r1, r4
 8001782:	9600      	str	r6, [sp, #0]
 8001784:	4628      	mov	r0, r5
 8001786:	4622      	mov	r2, r4
 8001788:	2318      	movs	r3, #24


void dmxl_set_torque_enable(const uint8_t port_idx, const uint8_t dmxl_id,
                            const uint8_t enable)
{
  uint8_t d = enable ? 1 : 0;
 800178a:	f88d 4014 	strb.w	r4, [sp, #20]
  dmxl_write_data(port_idx, dmxl_id, 1, 24, &d);
 800178e:	f7ff fd0f 	bl	80011b0 <dmxl_write_data>
 8001792:	e79e      	b.n	80016d2 <dmxl_set_control_mode+0x16>
 8001794:	00030d3f 	.word	0x00030d3f

08001798 <dmxl_set_control_target>:
  }
}

void dmxl_set_control_target(const uint8_t port_idx, 
                             const uint16_t target)
{
 8001798:	b530      	push	{r4, r5, lr}
  //printf("dmxl_set_control_target %d %d\r\n", port_idx, (int)target);
  if (port_idx >= NUM_DMXL)
 800179a:	2803      	cmp	r0, #3
  }
}

void dmxl_set_control_target(const uint8_t port_idx, 
                             const uint16_t target)
{
 800179c:	b085      	sub	sp, #20
 800179e:	460c      	mov	r4, r1
  //printf("dmxl_set_control_target %d %d\r\n", port_idx, (int)target);
  if (port_idx >= NUM_DMXL)
 80017a0:	d901      	bls.n	80017a6 <dmxl_set_control_target+0xe>
    return;
  uint8_t d[2];
  d[0] = target & 0xff;
  d[1] = (target >> 8) & 0xff;
  dmxl_write_data(port_idx, DMXL_DEFAULT_ID, 2, 30, d);
}
 80017a2:	b005      	add	sp, #20
 80017a4:	bd30      	pop	{r4, r5, pc}
  if (port_idx >= NUM_DMXL)
    return;
  uint8_t d[2];
  d[0] = target & 0xff;
  d[1] = (target >> 8) & 0xff;
  dmxl_write_data(port_idx, DMXL_DEFAULT_ID, 2, 30, d);
 80017a6:	ab03      	add	r3, sp, #12
  //printf("dmxl_set_control_target %d %d\r\n", port_idx, (int)target);
  if (port_idx >= NUM_DMXL)
    return;
  uint8_t d[2];
  d[0] = target & 0xff;
  d[1] = (target >> 8) & 0xff;
 80017a8:	0a0d      	lsrs	r5, r1, #8
  dmxl_write_data(port_idx, DMXL_DEFAULT_ID, 2, 30, d);
 80017aa:	9300      	str	r3, [sp, #0]
 80017ac:	2101      	movs	r1, #1
 80017ae:	2202      	movs	r2, #2
 80017b0:	231e      	movs	r3, #30
{
  //printf("dmxl_set_control_target %d %d\r\n", port_idx, (int)target);
  if (port_idx >= NUM_DMXL)
    return;
  uint8_t d[2];
  d[0] = target & 0xff;
 80017b2:	f88d 400c 	strb.w	r4, [sp, #12]
  d[1] = (target >> 8) & 0xff;
 80017b6:	f88d 500d 	strb.w	r5, [sp, #13]
  dmxl_write_data(port_idx, DMXL_DEFAULT_ID, 2, 30, d);
 80017ba:	f7ff fcf9 	bl	80011b0 <dmxl_write_data>
}
 80017be:	b005      	add	sp, #20
 80017c0:	bd30      	pop	{r4, r5, pc}
 80017c2:	bf00      	nop

080017c4 <dmxl_poll>:

void dmxl_poll()
{
 80017c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017c6:	4e19      	ldr	r6, [pc, #100]	; (800182c <dmxl_poll+0x68>)
 80017c8:	b083      	sub	sp, #12
  // spin through and poll all their angles, velocities, currents, 
  // voltages, temperatures, etc.
  for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
 80017ca:	2400      	movs	r4, #0
  d[1] = (target >> 8) & 0xff;
  dmxl_write_data(port_idx, DMXL_DEFAULT_ID, 2, 30, d);
}

void dmxl_poll()
{
 80017cc:	4635      	mov	r5, r6
  // spin through and poll all their angles, velocities, currents, 
  // voltages, temperatures, etc.
  for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
  {
    g_dmxl_ports[i].comms_state = DMXL_CS_POLL_STATE;
 80017ce:	2702      	movs	r7, #2
    dmxl_read_data(i, DMXL_DEFAULT_ID, 8, 36);
 80017d0:	b2e0      	uxtb	r0, r4
{
  // spin through and poll all their angles, velocities, currents, 
  // voltages, temperatures, etc.
  for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
  {
    g_dmxl_ports[i].comms_state = DMXL_CS_POLL_STATE;
 80017d2:	742f      	strb	r7, [r5, #16]

void dmxl_poll()
{
  // spin through and poll all their angles, velocities, currents, 
  // voltages, temperatures, etc.
  for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
 80017d4:	3401      	adds	r4, #1
  {
    g_dmxl_ports[i].comms_state = DMXL_CS_POLL_STATE;
    dmxl_read_data(i, DMXL_DEFAULT_ID, 8, 36);
 80017d6:	f7ff fd0b 	bl	80011f0 <dmxl_read_data.constprop.2>

void dmxl_poll()
{
  // spin through and poll all their angles, velocities, currents, 
  // voltages, temperatures, etc.
  for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
 80017da:	2c04      	cmp	r4, #4
 80017dc:	f105 0518 	add.w	r5, r5, #24
 80017e0:	d1f6      	bne.n	80017d0 <dmxl_poll+0xc>
  {
    g_dmxl_ports[i].comms_state = DMXL_CS_POLL_STATE;
    dmxl_read_data(i, DMXL_DEFAULT_ID, 8, 36);
  }
  volatile uint32_t t_start = SYSTIME;
 80017e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  while (SYSTIME - t_start < 10000)
 80017e6:	461f      	mov	r7, r3
 80017e8:	4c11      	ldr	r4, [pc, #68]	; (8001830 <dmxl_poll+0x6c>)
  for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
  {
    g_dmxl_ports[i].comms_state = DMXL_CS_POLL_STATE;
    dmxl_read_data(i, DMXL_DEFAULT_ID, 8, 36);
  }
  volatile uint32_t t_start = SYSTIME;
 80017ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ec:	9301      	str	r3, [sp, #4]
  while (SYSTIME - t_start < 10000)
 80017ee:	f242 750f 	movw	r5, #9999	; 0x270f
 80017f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017f4:	9b01      	ldr	r3, [sp, #4]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	42ab      	cmp	r3, r5
 80017fa:	d80c      	bhi.n	8001816 <dmxl_poll+0x52>
  {
    dmxl_process_rings();
 80017fc:	f7ff fe46 	bl	800148c <dmxl_process_rings>
 8001800:	4b0c      	ldr	r3, [pc, #48]	; (8001834 <dmxl_poll+0x70>)
    // also spin around the ethernet rings here? probably not.
    int all_done = 1;
 8001802:	2201      	movs	r2, #1
    for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
      if (g_dmxl_ports[i].comms_state == DMXL_CS_POLL_STATE)
 8001804:	7c19      	ldrb	r1, [r3, #16]
 8001806:	3318      	adds	r3, #24
        all_done = 0;
 8001808:	2902      	cmp	r1, #2
 800180a:	bf08      	it	eq
 800180c:	2200      	moveq	r2, #0
  while (SYSTIME - t_start < 10000)
  {
    dmxl_process_rings();
    // also spin around the ethernet rings here? probably not.
    int all_done = 1;
    for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
 800180e:	42a3      	cmp	r3, r4
 8001810:	d1f8      	bne.n	8001804 <dmxl_poll+0x40>
      if (g_dmxl_ports[i].comms_state == DMXL_CS_POLL_STATE)
        all_done = 0;
    if (all_done)
 8001812:	2a00      	cmp	r2, #0
 8001814:	d0ed      	beq.n	80017f2 <dmxl_poll+0x2e>
      break;
  }
  // set the comms state to "idle" even if we didn't hear back from it by now
  for (uint_fast8_t i = 0; i < NUM_DMXL; i++)
    g_dmxl_ports[i].comms_state = DMXL_CS_IDLE;
 8001816:	2300      	movs	r3, #0
 8001818:	7433      	strb	r3, [r6, #16]
 800181a:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
 800181e:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
 8001822:	f886 3058 	strb.w	r3, [r6, #88]	; 0x58
}
 8001826:	b003      	add	sp, #12
 8001828:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800182a:	bf00      	nop
 800182c:	2000000c 	.word	0x2000000c
 8001830:	2000006c 	.word	0x2000006c
 8001834:	2000000c 	.word	0x2000000c

08001838 <fan_init>:

#define PORTD_FAN_EN 15

void fan_init()
{
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 8001838:	4a05      	ldr	r2, [pc, #20]	; (8001850 <fan_init+0x18>)
  GPIOD->MODER |= 1 << (PORTD_FAN_EN * 2); // set as output pin
 800183a:	4b06      	ldr	r3, [pc, #24]	; (8001854 <fan_init+0x1c>)

#define PORTD_FAN_EN 15

void fan_init()
{
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 800183c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800183e:	f041 0108 	orr.w	r1, r1, #8
 8001842:	6311      	str	r1, [r2, #48]	; 0x30
  GPIOD->MODER |= 1 << (PORTD_FAN_EN * 2); // set as output pin
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	40023800 	.word	0x40023800
 8001854:	40020c00 	.word	0x40020c00

08001858 <fan_on>:
}

void fan_on()
{
  GPIOD->BSRRL |= 1 << PORTD_FAN_EN;
 8001858:	4a04      	ldr	r2, [pc, #16]	; (800186c <fan_on+0x14>)
 800185a:	8b13      	ldrh	r3, [r2, #24]
 800185c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001860:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001864:	b29b      	uxth	r3, r3
 8001866:	8313      	strh	r3, [r2, #24]
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	40020c00 	.word	0x40020c00

08001870 <fan_off>:
}

void fan_off()
{
  GPIOD->BSRRH |= 1 << PORTD_FAN_EN;
 8001870:	4a04      	ldr	r2, [pc, #16]	; (8001884 <fan_off+0x14>)
 8001872:	8b53      	ldrh	r3, [r2, #26]
 8001874:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001878:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800187c:	b29b      	uxth	r3, r3
 800187e:	8353      	strh	r3, [r2, #26]
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	40020c00 	.word	0x40020c00

08001888 <tactile_bridge_spi_txrx.part.0>:
  const uint8_t reg_val = rxd[2];
  //printf("spi reg 0x%02x = 0x%02x\r\n", reg_idx, reg_val);
  return reg_val;
}

static void tactile_bridge_spi_txrx(const uint8_t bridge_idx,
 8001888:	b4f0      	push	{r4, r5, r6, r7}
  if (bridge_idx > 1)
    return;
  SPI_TypeDef *spi;
  GPIO_TypeDef *cs_gpio;
  uint32_t cs_pin_mask;
  if (bridge_idx == 0)
 800188a:	4f2c      	ldr	r7, [pc, #176]	; (800193c <tactile_bridge_spi_txrx.part.0+0xb4>)
 800188c:	4e2c      	ldr	r6, [pc, #176]	; (8001940 <tactile_bridge_spi_txrx.part.0+0xb8>)
 800188e:	4d2d      	ldr	r5, [pc, #180]	; (8001944 <tactile_bridge_spi_txrx.part.0+0xbc>)
 8001890:	4c2d      	ldr	r4, [pc, #180]	; (8001948 <tactile_bridge_spi_txrx.part.0+0xc0>)
 8001892:	2800      	cmp	r0, #0
 8001894:	bf18      	it	ne
 8001896:	463e      	movne	r6, r7
  const uint8_t reg_val = rxd[2];
  //printf("spi reg 0x%02x = 0x%02x\r\n", reg_idx, reg_val);
  return reg_val;
}

static void tactile_bridge_spi_txrx(const uint8_t bridge_idx,
 8001898:	b084      	sub	sp, #16
  if (bridge_idx > 1)
    return;
  SPI_TypeDef *spi;
  GPIO_TypeDef *cs_gpio;
  uint32_t cs_pin_mask;
  if (bridge_idx == 0)
 800189a:	bf14      	ite	ne
 800189c:	f44f 7700 	movne.w	r7, #512	; 0x200
 80018a0:	2710      	moveq	r7, #16
    cs_gpio = GPIOB;
    cs_pin_mask = 1 << PORTB_BRIDGE1_CS;
  }
  // assert CS 
  cs_gpio->BSRRH = cs_pin_mask;
  for (volatile int i = 0; i < 100; i++) { } // la di dah...
 80018a2:	f04f 0000 	mov.w	r0, #0
    spi = SPI2;
    cs_gpio = GPIOB;
    cs_pin_mask = 1 << PORTB_BRIDGE1_CS;
  }
  // assert CS 
  cs_gpio->BSRRH = cs_pin_mask;
 80018a6:	8377      	strh	r7, [r6, #26]
  for (volatile int i = 0; i < 100; i++) { } // la di dah...
 80018a8:	9000      	str	r0, [sp, #0]
 80018aa:	f8dd c000 	ldr.w	ip, [sp]
  if (bridge_idx > 1)
    return;
  SPI_TypeDef *spi;
  GPIO_TypeDef *cs_gpio;
  uint32_t cs_pin_mask;
  if (bridge_idx == 0)
 80018ae:	bf14      	ite	ne
 80018b0:	4628      	movne	r0, r5
 80018b2:	4620      	moveq	r0, r4
    cs_gpio = GPIOB;
    cs_pin_mask = 1 << PORTB_BRIDGE1_CS;
  }
  // assert CS 
  cs_gpio->BSRRH = cs_pin_mask;
  for (volatile int i = 0; i < 100; i++) { } // la di dah...
 80018b4:	f1bc 0f63 	cmp.w	ip, #99	; 0x63
 80018b8:	dc05      	bgt.n	80018c6 <tactile_bridge_spi_txrx.part.0+0x3e>
 80018ba:	9c00      	ldr	r4, [sp, #0]
 80018bc:	3401      	adds	r4, #1
 80018be:	9400      	str	r4, [sp, #0]
 80018c0:	9c00      	ldr	r4, [sp, #0]
 80018c2:	2c63      	cmp	r4, #99	; 0x63
 80018c4:	ddf9      	ble.n	80018ba <tactile_bridge_spi_txrx.part.0+0x32>
  spi->DR; // clear rx buffer
 80018c6:	8984      	ldrh	r4, [r0, #12]
  for (uint8_t i = 0; i < txrx_len; i++)
 80018c8:	b1f1      	cbz	r1, 8001908 <tactile_bridge_spi_txrx.part.0+0x80>
 80018ca:	2500      	movs	r5, #0
    while (spi->SR & SPI_SR_BSY) { }
    if (rxd)
      rxd[i] = spi->DR; 
    else
      spi->DR;
    for (volatile int i = 0; i < 150; i++) { } // wait between SPI bytes
 80018cc:	46ac      	mov	ip, r5
  cs_gpio->BSRRH = cs_pin_mask;
  for (volatile int i = 0; i < 100; i++) { } // la di dah...
  spi->DR; // clear rx buffer
  for (uint8_t i = 0; i < txrx_len; i++)
  {
    spi->DR = txd[i]; // read internal register command
 80018ce:	5d54      	ldrb	r4, [r2, r5]
 80018d0:	8184      	strh	r4, [r0, #12]
    while (!(spi->SR & SPI_SR_TXE)) { } // wait for buffer room
 80018d2:	8904      	ldrh	r4, [r0, #8]
 80018d4:	07a4      	lsls	r4, r4, #30
 80018d6:	d5fc      	bpl.n	80018d2 <tactile_bridge_spi_txrx.part.0+0x4a>
    while (!(spi->SR & SPI_SR_RXNE)) { }
 80018d8:	8904      	ldrh	r4, [r0, #8]
 80018da:	07e4      	lsls	r4, r4, #31
 80018dc:	d5fc      	bpl.n	80018d8 <tactile_bridge_spi_txrx.part.0+0x50>
    while (spi->SR & SPI_SR_BSY) { }
 80018de:	8904      	ldrh	r4, [r0, #8]
 80018e0:	0624      	lsls	r4, r4, #24
 80018e2:	d4fc      	bmi.n	80018de <tactile_bridge_spi_txrx.part.0+0x56>
    if (rxd)
      rxd[i] = spi->DR; 
 80018e4:	8984      	ldrh	r4, [r0, #12]
  {
    spi->DR = txd[i]; // read internal register command
    while (!(spi->SR & SPI_SR_TXE)) { } // wait for buffer room
    while (!(spi->SR & SPI_SR_RXNE)) { }
    while (spi->SR & SPI_SR_BSY) { }
    if (rxd)
 80018e6:	b103      	cbz	r3, 80018ea <tactile_bridge_spi_txrx.part.0+0x62>
      rxd[i] = spi->DR; 
 80018e8:	555c      	strb	r4, [r3, r5]
    else
      spi->DR;
    for (volatile int i = 0; i < 150; i++) { } // wait between SPI bytes
 80018ea:	f8cd c004 	str.w	ip, [sp, #4]
 80018ee:	9c01      	ldr	r4, [sp, #4]
 80018f0:	2c95      	cmp	r4, #149	; 0x95
 80018f2:	dc05      	bgt.n	8001900 <tactile_bridge_spi_txrx.part.0+0x78>
 80018f4:	9c01      	ldr	r4, [sp, #4]
 80018f6:	3401      	adds	r4, #1
 80018f8:	9401      	str	r4, [sp, #4]
 80018fa:	9c01      	ldr	r4, [sp, #4]
 80018fc:	2c95      	cmp	r4, #149	; 0x95
 80018fe:	ddf9      	ble.n	80018f4 <tactile_bridge_spi_txrx.part.0+0x6c>
 8001900:	3501      	adds	r5, #1
  }
  // assert CS 
  cs_gpio->BSRRH = cs_pin_mask;
  for (volatile int i = 0; i < 100; i++) { } // la di dah...
  spi->DR; // clear rx buffer
  for (uint8_t i = 0; i < txrx_len; i++)
 8001902:	b2ec      	uxtb	r4, r5
 8001904:	42a1      	cmp	r1, r4
 8001906:	d8e2      	bhi.n	80018ce <tactile_bridge_spi_txrx.part.0+0x46>
      rxd[i] = spi->DR; 
    else
      spi->DR;
    for (volatile int i = 0; i < 150; i++) { } // wait between SPI bytes
  }
  for (volatile int i = 0; i < 100; i++) { } // la di dah...
 8001908:	2300      	movs	r3, #0
 800190a:	9302      	str	r3, [sp, #8]
 800190c:	9b02      	ldr	r3, [sp, #8]
 800190e:	2b63      	cmp	r3, #99	; 0x63
 8001910:	dc05      	bgt.n	800191e <tactile_bridge_spi_txrx.part.0+0x96>
 8001912:	9b02      	ldr	r3, [sp, #8]
 8001914:	3301      	adds	r3, #1
 8001916:	9302      	str	r3, [sp, #8]
 8001918:	9b02      	ldr	r3, [sp, #8]
 800191a:	2b63      	cmp	r3, #99	; 0x63
 800191c:	ddf9      	ble.n	8001912 <tactile_bridge_spi_txrx.part.0+0x8a>
  cs_gpio->BSRRL = cs_pin_mask;
  for (volatile int i = 0; i < 100; i++) { } // la di dah...
 800191e:	2300      	movs	r3, #0
    else
      spi->DR;
    for (volatile int i = 0; i < 150; i++) { } // wait between SPI bytes
  }
  for (volatile int i = 0; i < 100; i++) { } // la di dah...
  cs_gpio->BSRRL = cs_pin_mask;
 8001920:	8337      	strh	r7, [r6, #24]
  for (volatile int i = 0; i < 100; i++) { } // la di dah...
 8001922:	9303      	str	r3, [sp, #12]
 8001924:	9b03      	ldr	r3, [sp, #12]
 8001926:	2b63      	cmp	r3, #99	; 0x63
 8001928:	dc05      	bgt.n	8001936 <tactile_bridge_spi_txrx.part.0+0xae>
 800192a:	9b03      	ldr	r3, [sp, #12]
 800192c:	3301      	adds	r3, #1
 800192e:	9303      	str	r3, [sp, #12]
 8001930:	9b03      	ldr	r3, [sp, #12]
 8001932:	2b63      	cmp	r3, #99	; 0x63
 8001934:	ddf9      	ble.n	800192a <tactile_bridge_spi_txrx.part.0+0xa2>
}
 8001936:	b004      	add	sp, #16
 8001938:	bcf0      	pop	{r4, r5, r6, r7}
 800193a:	4770      	bx	lr
 800193c:	40020400 	.word	0x40020400
 8001940:	40020000 	.word	0x40020000
 8001944:	40003800 	.word	0x40003800
 8001948:	40013000 	.word	0x40013000

0800194c <tactile_bridge_read_reg>:
  //printf("\r\n");
}

static uint8_t tactile_bridge_read_reg(const uint8_t bridge_idx,
                                       const uint8_t reg_idx)
{
 800194c:	b500      	push	{lr}
 800194e:	b083      	sub	sp, #12
  uint8_t rxd[3] = {0};
 8001950:	2300      	movs	r3, #0
  uint8_t txd[3] = {0x21, reg_idx, 0};
 8001952:	2221      	movs	r2, #33	; 0x21
static void tactile_bridge_spi_txrx(const uint8_t bridge_idx,
                                    const uint8_t txrx_len,
                                    const uint8_t *txd,
                                    uint8_t *rxd)
{
  if (bridge_idx > 1)
 8001954:	2801      	cmp	r0, #1

static uint8_t tactile_bridge_read_reg(const uint8_t bridge_idx,
                                       const uint8_t reg_idx)
{
  uint8_t rxd[3] = {0};
  uint8_t txd[3] = {0x21, reg_idx, 0};
 8001956:	f88d 1005 	strb.w	r1, [sp, #5]
}

static uint8_t tactile_bridge_read_reg(const uint8_t bridge_idx,
                                       const uint8_t reg_idx)
{
  uint8_t rxd[3] = {0};
 800195a:	f8ad 3000 	strh.w	r3, [sp]
 800195e:	f88d 3002 	strb.w	r3, [sp, #2]
  uint8_t txd[3] = {0x21, reg_idx, 0};
 8001962:	f88d 3006 	strb.w	r3, [sp, #6]
 8001966:	f88d 2004 	strb.w	r2, [sp, #4]
static void tactile_bridge_spi_txrx(const uint8_t bridge_idx,
                                    const uint8_t txrx_len,
                                    const uint8_t *txd,
                                    uint8_t *rxd)
{
  if (bridge_idx > 1)
 800196a:	d903      	bls.n	8001974 <tactile_bridge_read_reg+0x28>
 800196c:	4618      	mov	r0, r3
  uint8_t txd[3] = {0x21, reg_idx, 0};
  tactile_bridge_spi_txrx(bridge_idx, 3, txd, rxd);
  const uint8_t reg_val = rxd[2];
  //printf("spi reg 0x%02x = 0x%02x\r\n", reg_idx, reg_val);
  return reg_val;
}
 800196e:	b003      	add	sp, #12
 8001970:	f85d fb04 	ldr.w	pc, [sp], #4
 8001974:	2103      	movs	r1, #3
 8001976:	aa01      	add	r2, sp, #4
 8001978:	466b      	mov	r3, sp
 800197a:	f7ff ff85 	bl	8001888 <tactile_bridge_spi_txrx.part.0>
 800197e:	f89d 0002 	ldrb.w	r0, [sp, #2]
 8001982:	b003      	add	sp, #12
 8001984:	f85d fb04 	ldr.w	pc, [sp], #4

08001988 <tactile_bridge_reset>:
  */
  printf("done with tactile_init()\r\n");
}

void tactile_bridge_reset()
{
 8001988:	b500      	push	{lr}
  // the two SPI-I2C bridges have their RESETs tied to a common MCU pin,
  // so this function will reset both of them
  printf("tactile_bridge_reset()\r\n");
 800198a:	4814      	ldr	r0, [pc, #80]	; (80019dc <tactile_bridge_reset+0x54>)
  */
  printf("done with tactile_init()\r\n");
}

void tactile_bridge_reset()
{
 800198c:	b083      	sub	sp, #12
  // the two SPI-I2C bridges have their RESETs tied to a common MCU pin,
  // so this function will reset both of them
  printf("tactile_bridge_reset()\r\n");
 800198e:	f000 fd59 	bl	8002444 <puts>
  GPIOC->BSRRH = 1 << PORTC_I2C_BRIDGE_RESET;
 8001992:	4a13      	ldr	r2, [pc, #76]	; (80019e0 <tactile_bridge_reset+0x58>)
  for (volatile int i = 0; i < 10000; i++) { } // assert RESET
 8001994:	2300      	movs	r3, #0
void tactile_bridge_reset()
{
  // the two SPI-I2C bridges have their RESETs tied to a common MCU pin,
  // so this function will reset both of them
  printf("tactile_bridge_reset()\r\n");
  GPIOC->BSRRH = 1 << PORTC_I2C_BRIDGE_RESET;
 8001996:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800199a:	8351      	strh	r1, [r2, #26]
  for (volatile int i = 0; i < 10000; i++) { } // assert RESET
 800199c:	9300      	str	r3, [sp, #0]
 800199e:	9b00      	ldr	r3, [sp, #0]
 80019a0:	f242 720f 	movw	r2, #9999	; 0x270f
 80019a4:	4293      	cmp	r3, r2
 80019a6:	dc05      	bgt.n	80019b4 <tactile_bridge_reset+0x2c>
 80019a8:	9b00      	ldr	r3, [sp, #0]
 80019aa:	3301      	adds	r3, #1
 80019ac:	9300      	str	r3, [sp, #0]
 80019ae:	9b00      	ldr	r3, [sp, #0]
 80019b0:	4293      	cmp	r3, r2
 80019b2:	ddf9      	ble.n	80019a8 <tactile_bridge_reset+0x20>
  GPIOC->BSRRL = 1 << PORTC_I2C_BRIDGE_RESET;
 80019b4:	4a0a      	ldr	r2, [pc, #40]	; (80019e0 <tactile_bridge_reset+0x58>)
  for (volatile int i = 0; i < 10000; i++) { } // then let them boot up
 80019b6:	2300      	movs	r3, #0
  // the two SPI-I2C bridges have their RESETs tied to a common MCU pin,
  // so this function will reset both of them
  printf("tactile_bridge_reset()\r\n");
  GPIOC->BSRRH = 1 << PORTC_I2C_BRIDGE_RESET;
  for (volatile int i = 0; i < 10000; i++) { } // assert RESET
  GPIOC->BSRRL = 1 << PORTC_I2C_BRIDGE_RESET;
 80019b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019bc:	8311      	strh	r1, [r2, #24]
  for (volatile int i = 0; i < 10000; i++) { } // then let them boot up
 80019be:	9301      	str	r3, [sp, #4]
 80019c0:	9b01      	ldr	r3, [sp, #4]
 80019c2:	f242 720f 	movw	r2, #9999	; 0x270f
 80019c6:	4293      	cmp	r3, r2
 80019c8:	dc05      	bgt.n	80019d6 <tactile_bridge_reset+0x4e>
 80019ca:	9b01      	ldr	r3, [sp, #4]
 80019cc:	3301      	adds	r3, #1
 80019ce:	9301      	str	r3, [sp, #4]
 80019d0:	9b01      	ldr	r3, [sp, #4]
 80019d2:	4293      	cmp	r3, r2
 80019d4:	ddf9      	ble.n	80019ca <tactile_bridge_reset+0x42>
}
 80019d6:	b003      	add	sp, #12
 80019d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80019dc:	080090c8 	.word	0x080090c8
 80019e0:	40020800 	.word	0x40020800

080019e4 <tactile_init>:
                                 const uint8_t data_len);

//////////////////////////////////////////////////////////////////////////////

void tactile_init()
{
 80019e4:	b510      	push	{r4, lr}
  printf("tactile_init()\r\n");
 80019e6:	4861      	ldr	r0, [pc, #388]	; (8001b6c <tactile_init+0x188>)
 80019e8:	f000 fd2c 	bl	8002444 <puts>
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN |
 80019ec:	4b60      	ldr	r3, [pc, #384]	; (8001b70 <tactile_init+0x18c>)
  RCC->APB1ENR |= RCC_APB1ENR_I2C1EN |
                  RCC_APB1ENR_I2C3EN |
                  RCC_APB1ENR_SPI2EN;
  RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;

  pin_set_alternate_function(GPIOB, PORTB_I2C1_SCL, 4);
 80019ee:	4861      	ldr	r0, [pc, #388]	; (8001b74 <tactile_init+0x190>)
//////////////////////////////////////////////////////////////////////////////

void tactile_init()
{
  printf("tactile_init()\r\n");
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN |
 80019f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019f2:	f042 020f 	orr.w	r2, r2, #15
 80019f6:	631a      	str	r2, [r3, #48]	; 0x30
                  RCC_AHB1ENR_GPIOBEN |
                  RCC_AHB1ENR_GPIOCEN |
                  RCC_AHB1ENR_GPIODEN;
  RCC->APB1ENR |= RCC_APB1ENR_I2C1EN |
 80019f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019fa:	f442 0220 	orr.w	r2, r2, #10485760	; 0xa00000
 80019fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a02:	641a      	str	r2, [r3, #64]	; 0x40
                  RCC_APB1ENR_I2C3EN |
                  RCC_APB1ENR_SPI2EN;
  RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8001a04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a06:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001a0a:	645a      	str	r2, [r3, #68]	; 0x44

  pin_set_alternate_function(GPIOB, PORTB_I2C1_SCL, 4);
 8001a0c:	2106      	movs	r1, #6
 8001a0e:	2204      	movs	r2, #4
 8001a10:	f000 fac6 	bl	8001fa0 <pin_set_alternate_function>
  pin_set_alternate_function(GPIOB, PORTB_I2C1_SDA, 4);
 8001a14:	4857      	ldr	r0, [pc, #348]	; (8001b74 <tactile_init+0x190>)
 8001a16:	2107      	movs	r1, #7
 8001a18:	2204      	movs	r2, #4
 8001a1a:	f000 fac1 	bl	8001fa0 <pin_set_alternate_function>
  pin_set_output_type(GPIOB, PORTB_I2C1_SCL, PIN_OUTPUT_TYPE_OPEN_DRAIN);
 8001a1e:	4855      	ldr	r0, [pc, #340]	; (8001b74 <tactile_init+0x190>)
 8001a20:	2106      	movs	r1, #6
 8001a22:	2201      	movs	r2, #1
 8001a24:	f000 fa9a 	bl	8001f5c <pin_set_output_type>
  pin_set_output_type(GPIOB, PORTB_I2C1_SDA, PIN_OUTPUT_TYPE_OPEN_DRAIN);
 8001a28:	4852      	ldr	r0, [pc, #328]	; (8001b74 <tactile_init+0x190>)
 8001a2a:	2107      	movs	r1, #7
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	f000 fa95 	bl	8001f5c <pin_set_output_type>

  pin_set_alternate_function(GPIOA, PORTA_I2C3_SCL, 4);
 8001a32:	4851      	ldr	r0, [pc, #324]	; (8001b78 <tactile_init+0x194>)
 8001a34:	2108      	movs	r1, #8
 8001a36:	2204      	movs	r2, #4
 8001a38:	f000 fab2 	bl	8001fa0 <pin_set_alternate_function>
  pin_set_alternate_function(GPIOC, PORTC_I2C3_SDA, 4);
 8001a3c:	484f      	ldr	r0, [pc, #316]	; (8001b7c <tactile_init+0x198>)
 8001a3e:	2109      	movs	r1, #9
 8001a40:	2204      	movs	r2, #4
 8001a42:	f000 faad 	bl	8001fa0 <pin_set_alternate_function>
  pin_set_output_type(GPIOA, PORTA_I2C3_SCL, PIN_OUTPUT_TYPE_OPEN_DRAIN);
 8001a46:	484c      	ldr	r0, [pc, #304]	; (8001b78 <tactile_init+0x194>)
 8001a48:	2108      	movs	r1, #8
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f000 fa86 	bl	8001f5c <pin_set_output_type>
  pin_set_output_type(GPIOC, PORTC_I2C3_SDA, PIN_OUTPUT_TYPE_OPEN_DRAIN);
 8001a50:	484a      	ldr	r0, [pc, #296]	; (8001b7c <tactile_init+0x198>)
 8001a52:	2109      	movs	r1, #9
 8001a54:	2201      	movs	r2, #1
 8001a56:	f000 fa81 	bl	8001f5c <pin_set_output_type>

  //I2C1->CCR |= I2C_CCR_FS | // set fast mode
  //             35; // 42 MHz / (3 * 400 kHz) == 35
  //I2C1->TRISE = 42 * 300 / 1000 + 1; // not sure here.
  I2C1->CR2   |= APB_MHZ; 
 8001a5a:	4a49      	ldr	r2, [pc, #292]	; (8001b80 <tactile_init+0x19c>)
  I2C1->CCR   |= I2C_CCR; 
  I2C1->TRISE &= ~0x3f;
  I2C1->TRISE |= I2C_TRISE;
  I2C1->CR1   |= I2C_CR1_PE;

  I2C3->CR2   |= APB_MHZ; 
 8001a5c:	4b49      	ldr	r3, [pc, #292]	; (8001b84 <tactile_init+0x1a0>)
  pin_set_output_type(GPIOC, PORTC_I2C3_SDA, PIN_OUTPUT_TYPE_OPEN_DRAIN);

  //I2C1->CCR |= I2C_CCR_FS | // set fast mode
  //             35; // 42 MHz / (3 * 400 kHz) == 35
  //I2C1->TRISE = 42 * 300 / 1000 + 1; // not sure here.
  I2C1->CR2   |= APB_MHZ; 
 8001a5e:	8891      	ldrh	r1, [r2, #4]
  I2C3->TRISE &= ~0x3f;
  I2C3->TRISE |= I2C_TRISE;
  I2C3->CR1   |= I2C_CR1_PE;

  // now, set up the spi-to-i2c bridges
  pin_set_output(GPIOC, PORTC_I2C_BRIDGE_RESET);
 8001a60:	4846      	ldr	r0, [pc, #280]	; (8001b7c <tactile_init+0x198>)
  pin_set_output_type(GPIOC, PORTC_I2C3_SDA, PIN_OUTPUT_TYPE_OPEN_DRAIN);

  //I2C1->CCR |= I2C_CCR_FS | // set fast mode
  //             35; // 42 MHz / (3 * 400 kHz) == 35
  //I2C1->TRISE = 42 * 300 / 1000 + 1; // not sure here.
  I2C1->CR2   |= APB_MHZ; 
 8001a62:	b289      	uxth	r1, r1
 8001a64:	f041 012a 	orr.w	r1, r1, #42	; 0x2a
 8001a68:	8091      	strh	r1, [r2, #4]
  I2C1->CCR   |= I2C_CCR; 
 8001a6a:	8b91      	ldrh	r1, [r2, #28]
 8001a6c:	b289      	uxth	r1, r1
 8001a6e:	f041 01d2 	orr.w	r1, r1, #210	; 0xd2
 8001a72:	8391      	strh	r1, [r2, #28]
  I2C1->TRISE &= ~0x3f;
 8001a74:	8c11      	ldrh	r1, [r2, #32]
 8001a76:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8001a7a:	0409      	lsls	r1, r1, #16
 8001a7c:	0c09      	lsrs	r1, r1, #16
 8001a7e:	8411      	strh	r1, [r2, #32]
  I2C1->TRISE |= I2C_TRISE;
 8001a80:	8c11      	ldrh	r1, [r2, #32]
 8001a82:	b289      	uxth	r1, r1
 8001a84:	f041 0109 	orr.w	r1, r1, #9
 8001a88:	8411      	strh	r1, [r2, #32]
  I2C1->CR1   |= I2C_CR1_PE;
 8001a8a:	8811      	ldrh	r1, [r2, #0]
 8001a8c:	b289      	uxth	r1, r1
 8001a8e:	f041 0101 	orr.w	r1, r1, #1
 8001a92:	8011      	strh	r1, [r2, #0]

  I2C3->CR2   |= APB_MHZ; 
 8001a94:	889a      	ldrh	r2, [r3, #4]
 8001a96:	b292      	uxth	r2, r2
 8001a98:	f042 022a 	orr.w	r2, r2, #42	; 0x2a
 8001a9c:	809a      	strh	r2, [r3, #4]
  I2C3->CCR   |= I2C_CCR;
 8001a9e:	8b9a      	ldrh	r2, [r3, #28]
 8001aa0:	b292      	uxth	r2, r2
 8001aa2:	f042 02d2 	orr.w	r2, r2, #210	; 0xd2
 8001aa6:	839a      	strh	r2, [r3, #28]
  I2C3->TRISE &= ~0x3f;
 8001aa8:	8c1a      	ldrh	r2, [r3, #32]
 8001aaa:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8001aae:	0412      	lsls	r2, r2, #16
 8001ab0:	0c12      	lsrs	r2, r2, #16
 8001ab2:	841a      	strh	r2, [r3, #32]
  I2C3->TRISE |= I2C_TRISE;
 8001ab4:	8c1a      	ldrh	r2, [r3, #32]
 8001ab6:	b292      	uxth	r2, r2
 8001ab8:	f042 0209 	orr.w	r2, r2, #9
 8001abc:	841a      	strh	r2, [r3, #32]
  I2C3->CR1   |= I2C_CR1_PE;
 8001abe:	881a      	ldrh	r2, [r3, #0]
 8001ac0:	b292      	uxth	r2, r2
 8001ac2:	f042 0201 	orr.w	r2, r2, #1
 8001ac6:	801a      	strh	r2, [r3, #0]

  // now, set up the spi-to-i2c bridges
  pin_set_output(GPIOC, PORTC_I2C_BRIDGE_RESET);
 8001ac8:	210e      	movs	r1, #14
 8001aca:	f000 fa95 	bl	8001ff8 <pin_set_output>
  pin_set_output(GPIOA, PORTA_BRIDGE0_CS);
 8001ace:	482a      	ldr	r0, [pc, #168]	; (8001b78 <tactile_init+0x194>)
 8001ad0:	2104      	movs	r1, #4
 8001ad2:	f000 fa91 	bl	8001ff8 <pin_set_output>
  pin_set_output(GPIOB, PORTB_BRIDGE1_CS);
 8001ad6:	4827      	ldr	r0, [pc, #156]	; (8001b74 <tactile_init+0x190>)
 8001ad8:	2109      	movs	r1, #9
 8001ada:	f000 fa8d 	bl	8001ff8 <pin_set_output>
  pin_set_alternate_function(GPIOA, PORTA_BRIDGE0_MISO, 5);
 8001ade:	4826      	ldr	r0, [pc, #152]	; (8001b78 <tactile_init+0x194>)
 8001ae0:	2106      	movs	r1, #6
 8001ae2:	2205      	movs	r2, #5
 8001ae4:	f000 fa5c 	bl	8001fa0 <pin_set_alternate_function>
  pin_set_alternate_function(GPIOB, PORTB_BRIDGE0_MOSI, 5);
 8001ae8:	2105      	movs	r1, #5
 8001aea:	460a      	mov	r2, r1
 8001aec:	4821      	ldr	r0, [pc, #132]	; (8001b74 <tactile_init+0x190>)
 8001aee:	f000 fa57 	bl	8001fa0 <pin_set_alternate_function>
  pin_set_alternate_function(GPIOA, PORTA_BRIDGE0_SCLK, 5);
 8001af2:	2105      	movs	r1, #5
 8001af4:	460a      	mov	r2, r1
 8001af6:	4820      	ldr	r0, [pc, #128]	; (8001b78 <tactile_init+0x194>)
 8001af8:	f000 fa52 	bl	8001fa0 <pin_set_alternate_function>
  pin_set_alternate_function(GPIOC, PORTC_BRIDGE1_MISO, 5);
 8001afc:	481f      	ldr	r0, [pc, #124]	; (8001b7c <tactile_init+0x198>)
 8001afe:	2102      	movs	r1, #2
 8001b00:	2205      	movs	r2, #5
 8001b02:	f000 fa4d 	bl	8001fa0 <pin_set_alternate_function>
  pin_set_alternate_function(GPIOC, PORTC_BRIDGE1_MOSI, 5);
 8001b06:	481d      	ldr	r0, [pc, #116]	; (8001b7c <tactile_init+0x198>)
 8001b08:	2103      	movs	r1, #3
 8001b0a:	2205      	movs	r2, #5
 8001b0c:	f000 fa48 	bl	8001fa0 <pin_set_alternate_function>
  pin_set_alternate_function(GPIOD, PORTD_BRIDGE1_SCLK, 5);
 8001b10:	481d      	ldr	r0, [pc, #116]	; (8001b88 <tactile_init+0x1a4>)
 8001b12:	2103      	movs	r1, #3
 8001b14:	2205      	movs	r2, #5
 8001b16:	f000 fa43 	bl	8001fa0 <pin_set_alternate_function>
              SPI_CR1_SSM  |
              SPI_CR1_SSI  |
              SPI_CR1_SPE;

  // bit rate = 42 mhz / 64 = 750 kilobit
  SPI2->CR1 = SPI_CR1_BR_2 |
 8001b1a:	4b1c      	ldr	r3, [pc, #112]	; (8001b8c <tactile_init+0x1a8>)
  pin_set_alternate_function(GPIOC, PORTC_BRIDGE1_MOSI, 5);
  pin_set_alternate_function(GPIOD, PORTD_BRIDGE1_SCLK, 5);

  // spi1 is running from a 84 MHz pclk. set it up with 
  // sclk = pclk/128 to stay within datasheet limits.
  SPI1->CR1 = SPI_CR1_BR_2 |
 8001b1c:	491c      	ldr	r1, [pc, #112]	; (8001b90 <tactile_init+0x1ac>)
              SPI_CR1_CPHA |
              SPI_CR1_SSM  |
              SPI_CR1_SSI  |
              SPI_CR1_SPE;

  pin_set_output_level(GPIOA, PORTA_BRIDGE0_CS, 1);
 8001b1e:	4816      	ldr	r0, [pc, #88]	; (8001b78 <tactile_init+0x194>)
  pin_set_alternate_function(GPIOC, PORTC_BRIDGE1_MOSI, 5);
  pin_set_alternate_function(GPIOD, PORTD_BRIDGE1_SCLK, 5);

  // spi1 is running from a 84 MHz pclk. set it up with 
  // sclk = pclk/128 to stay within datasheet limits.
  SPI1->CR1 = SPI_CR1_BR_2 |
 8001b20:	f240 3477 	movw	r4, #887	; 0x377
              SPI_CR1_SSM  |
              SPI_CR1_SSI  |
              SPI_CR1_SPE;

  // bit rate = 42 mhz / 64 = 750 kilobit
  SPI2->CR1 = SPI_CR1_BR_2 |
 8001b24:	f240 326f 	movw	r2, #879	; 0x36f
  pin_set_alternate_function(GPIOC, PORTC_BRIDGE1_MOSI, 5);
  pin_set_alternate_function(GPIOD, PORTD_BRIDGE1_SCLK, 5);

  // spi1 is running from a 84 MHz pclk. set it up with 
  // sclk = pclk/128 to stay within datasheet limits.
  SPI1->CR1 = SPI_CR1_BR_2 |
 8001b28:	800c      	strh	r4, [r1, #0]
              SPI_CR1_SSM  |
              SPI_CR1_SSI  |
              SPI_CR1_SPE;

  // bit rate = 42 mhz / 64 = 750 kilobit
  SPI2->CR1 = SPI_CR1_BR_2 |
 8001b2a:	801a      	strh	r2, [r3, #0]
              SPI_CR1_CPHA |
              SPI_CR1_SSM  |
              SPI_CR1_SSI  |
              SPI_CR1_SPE;

  pin_set_output_level(GPIOA, PORTA_BRIDGE0_CS, 1);
 8001b2c:	2104      	movs	r1, #4
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f000 fa72 	bl	8002018 <pin_set_output_level>
  pin_set_output_level(GPIOA, PORTB_BRIDGE1_CS, 1);
 8001b34:	4810      	ldr	r0, [pc, #64]	; (8001b78 <tactile_init+0x194>)
 8001b36:	2109      	movs	r1, #9
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f000 fa6d 	bl	8002018 <pin_set_output_level>

  tactile_bridge_reset();
 8001b3e:	f7ff ff23 	bl	8001988 <tactile_bridge_reset>
  for (int i = 0; i < 2; i++)
    for (int j = 0; j < 6; j++)
 8001b42:	2400      	movs	r4, #0
      tactile_bridge_read_reg(i, j);
 8001b44:	b2e1      	uxtb	r1, r4
 8001b46:	2000      	movs	r0, #0
  pin_set_output_level(GPIOA, PORTA_BRIDGE0_CS, 1);
  pin_set_output_level(GPIOA, PORTB_BRIDGE1_CS, 1);

  tactile_bridge_reset();
  for (int i = 0; i < 2; i++)
    for (int j = 0; j < 6; j++)
 8001b48:	3401      	adds	r4, #1
      tactile_bridge_read_reg(i, j);
 8001b4a:	f7ff feff 	bl	800194c <tactile_bridge_read_reg>
  pin_set_output_level(GPIOA, PORTA_BRIDGE0_CS, 1);
  pin_set_output_level(GPIOA, PORTB_BRIDGE1_CS, 1);

  tactile_bridge_reset();
  for (int i = 0; i < 2; i++)
    for (int j = 0; j < 6; j++)
 8001b4e:	2c06      	cmp	r4, #6
 8001b50:	d1f8      	bne.n	8001b44 <tactile_init+0x160>
 8001b52:	2400      	movs	r4, #0
      tactile_bridge_read_reg(i, j);
 8001b54:	2001      	movs	r0, #1
 8001b56:	b2e1      	uxtb	r1, r4
  pin_set_output_level(GPIOA, PORTA_BRIDGE0_CS, 1);
  pin_set_output_level(GPIOA, PORTB_BRIDGE1_CS, 1);

  tactile_bridge_reset();
  for (int i = 0; i < 2; i++)
    for (int j = 0; j < 6; j++)
 8001b58:	4404      	add	r4, r0
      tactile_bridge_read_reg(i, j);
 8001b5a:	f7ff fef7 	bl	800194c <tactile_bridge_read_reg>
  pin_set_output_level(GPIOA, PORTA_BRIDGE0_CS, 1);
  pin_set_output_level(GPIOA, PORTB_BRIDGE1_CS, 1);

  tactile_bridge_reset();
  for (int i = 0; i < 2; i++)
    for (int j = 0; j < 6; j++)
 8001b5e:	2c06      	cmp	r4, #6
 8001b60:	d1f8      	bne.n	8001b54 <tactile_init+0x170>
             result == I2C_SUCCESS ? "SUCCESS" : "FAIL",
             port, sensor, mcu_addr);
    }
  }
  */
  printf("done with tactile_init()\r\n");
 8001b62:	480c      	ldr	r0, [pc, #48]	; (8001b94 <tactile_init+0x1b0>)
}
 8001b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
             result == I2C_SUCCESS ? "SUCCESS" : "FAIL",
             port, sensor, mcu_addr);
    }
  }
  */
  printf("done with tactile_init()\r\n");
 8001b68:	f000 bc6c 	b.w	8002444 <puts>
 8001b6c:	080090e0 	.word	0x080090e0
 8001b70:	40023800 	.word	0x40023800
 8001b74:	40020400 	.word	0x40020400
 8001b78:	40020000 	.word	0x40020000
 8001b7c:	40020800 	.word	0x40020800
 8001b80:	40005400 	.word	0x40005400
 8001b84:	40005c00 	.word	0x40005c00
 8001b88:	40020c00 	.word	0x40020c00
 8001b8c:	40003800 	.word	0x40003800
 8001b90:	40013000 	.word	0x40013000
 8001b94:	080090f0 	.word	0x080090f0

08001b98 <tactile_bridge_wait_for_completion>:
  for (volatile int i = 0; i < 100; i++) { } // la di dah...
}

tactile_i2c_result_t 
tactile_bridge_wait_for_completion(const uint8_t bridge_idx)
{
 8001b98:	b570      	push	{r4, r5, r6, lr}
 8001b9a:	b082      	sub	sp, #8
  for (volatile int i = 0; i < 1000; i++) { } // la di dah...
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	9b00      	ldr	r3, [sp, #0]
 8001ba2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  for (volatile int i = 0; i < 100; i++) { } // la di dah...
}

tactile_i2c_result_t 
tactile_bridge_wait_for_completion(const uint8_t bridge_idx)
{
 8001ba6:	4605      	mov	r5, r0
  for (volatile int i = 0; i < 1000; i++) { } // la di dah...
 8001ba8:	da06      	bge.n	8001bb8 <tactile_bridge_wait_for_completion+0x20>
 8001baa:	9b00      	ldr	r3, [sp, #0]
 8001bac:	3301      	adds	r3, #1
 8001bae:	9300      	str	r3, [sp, #0]
 8001bb0:	9b00      	ldr	r3, [sp, #0]
 8001bb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001bb6:	dbf8      	blt.n	8001baa <tactile_bridge_wait_for_completion+0x12>
  for (volatile int i = 0; i < 100; i++) { } // la di dah...
}

tactile_i2c_result_t 
tactile_bridge_wait_for_completion(const uint8_t bridge_idx)
{
 8001bb8:	f240 34e9 	movw	r4, #1001	; 0x3e9
  for (volatile int i = 0; i < 1000; i++) { } // la di dah...
  uint8_t bridge_state = 0xf3;
  int wait_count = 0;
  while (bridge_state == 0xf3)
  {
    for (volatile int i = 0; i < 1000; i++) { } // la di dah...
 8001bbc:	2600      	movs	r6, #0
 8001bbe:	9601      	str	r6, [sp, #4]
 8001bc0:	9b01      	ldr	r3, [sp, #4]
 8001bc2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001bc6:	da06      	bge.n	8001bd6 <tactile_bridge_wait_for_completion+0x3e>
 8001bc8:	9b01      	ldr	r3, [sp, #4]
 8001bca:	3301      	adds	r3, #1
 8001bcc:	9301      	str	r3, [sp, #4]
 8001bce:	9b01      	ldr	r3, [sp, #4]
 8001bd0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001bd4:	dbf8      	blt.n	8001bc8 <tactile_bridge_wait_for_completion+0x30>
    bridge_state = tactile_bridge_read_reg(bridge_idx, 0x4);
 8001bd6:	4628      	mov	r0, r5
 8001bd8:	2104      	movs	r1, #4
 8001bda:	f7ff feb7 	bl	800194c <tactile_bridge_read_reg>
    if (++wait_count > 1000) 
 8001bde:	3c01      	subs	r4, #1
 8001be0:	d007      	beq.n	8001bf2 <tactile_bridge_wait_for_completion+0x5a>
tactile_bridge_wait_for_completion(const uint8_t bridge_idx)
{
  for (volatile int i = 0; i < 1000; i++) { } // la di dah...
  uint8_t bridge_state = 0xf3;
  int wait_count = 0;
  while (bridge_state == 0xf3)
 8001be2:	28f3      	cmp	r0, #243	; 0xf3
 8001be4:	d0eb      	beq.n	8001bbe <tactile_bridge_wait_for_completion+0x26>
    bridge_state = tactile_bridge_read_reg(bridge_idx, 0x4);
    if (++wait_count > 1000) 
    {
      // a SPI-I2C bridge locked up. try to reset them.
      tactile_bridge_reset();
      return I2C_FAIL;
 8001be6:	f1b0 03f0 	subs.w	r3, r0, #240	; 0xf0
 8001bea:	4258      	negs	r0, r3
 8001bec:	4158      	adcs	r0, r3
  }
  if (bridge_state == 0xf0)
    return I2C_SUCCESS;
  else
    return I2C_FAIL;
}
 8001bee:	b002      	add	sp, #8
 8001bf0:	bd70      	pop	{r4, r5, r6, pc}
    for (volatile int i = 0; i < 1000; i++) { } // la di dah...
    bridge_state = tactile_bridge_read_reg(bridge_idx, 0x4);
    if (++wait_count > 1000) 
    {
      // a SPI-I2C bridge locked up. try to reset them.
      tactile_bridge_reset();
 8001bf2:	f7ff fec9 	bl	8001988 <tactile_bridge_reset>
      return I2C_FAIL;
 8001bf6:	4620      	mov	r0, r4
  }
  if (bridge_state == 0xf0)
    return I2C_SUCCESS;
  else
    return I2C_FAIL;
}
 8001bf8:	b002      	add	sp, #8
 8001bfa:	bd70      	pop	{r4, r5, r6, pc}

08001bfc <tactile_i2c>:

tactile_i2c_result_t tactile_i2c(uint8_t port,
                                 uint8_t address,
                                 uint8_t *data,
                                 uint8_t data_len)
{
 8001bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (port == 0 || port == 1) // these ports are MCU on-chip I2C interfaces
 8001c00:	2801      	cmp	r0, #1

tactile_i2c_result_t tactile_i2c(uint8_t port,
                                 uint8_t address,
                                 uint8_t *data,
                                 uint8_t data_len)
{
 8001c02:	b0c2      	sub	sp, #264	; 0x108
 8001c04:	468c      	mov	ip, r1
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	4616      	mov	r6, r2
 8001c0a:	4698      	mov	r8, r3
  if (port == 0 || port == 1) // these ports are MCU on-chip I2C interfaces
 8001c0c:	d92f      	bls.n	8001c6e <tactile_i2c+0x72>
    i2c->CR1 |= I2C_CR1_STOP;
    while (i2c->SR2 & I2C_SR2_BUSY) { }
    for (volatile int i = 0; i < 3000; i++) { } // wait a bit
    return address_fail ? I2C_FAIL : I2C_SUCCESS;
  }
  else if (port == 2 || port == 3) // these ports are via SPI-I2C bridge chips
 8001c0e:	3802      	subs	r0, #2
 8001c10:	fa5f f980 	uxtb.w	r9, r0
 8001c14:	f1b9 0f01 	cmp.w	r9, #1
 8001c18:	d905      	bls.n	8001c26 <tactile_i2c+0x2a>
      return tactile_bridge_i2c_read(bridge_idx, address, data_len, data);
    else
      return tactile_bridge_i2c_write(bridge_idx, address, data_len, data);
  }
  else
    return I2C_FAIL;
 8001c1a:	2000      	movs	r0, #0
}
 8001c1c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001c20:	46bd      	mov	sp, r7
 8001c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return address_fail ? I2C_FAIL : I2C_SUCCESS;
  }
  else if (port == 2 || port == 3) // these ports are via SPI-I2C bridge chips
  {
    const uint8_t bridge_idx = port - 2;
    if (address & 0x1) // is it a read transaction?
 8001c26:	f011 0301 	ands.w	r3, r1, #1
 8001c2a:	f040 8081 	bne.w	8001d30 <tactile_i2c+0x134>
{
  uint8_t trimmed_tx_len = tx_len;
  if (trimmed_tx_len > 250)
    trimmed_tx_len = 250;
  uint8_t msg[256];
  msg[0] = 0x00; // write i2c command
 8001c2e:	f107 0508 	add.w	r5, r7, #8
 8001c32:	f1b8 0ffa 	cmp.w	r8, #250	; 0xfa
 8001c36:	bf34      	ite	cc
 8001c38:	4642      	movcc	r2, r8
 8001c3a:	22fa      	movcs	r2, #250	; 0xfa
  msg[1] = trimmed_tx_len;
 8001c3c:	706a      	strb	r2, [r5, #1]
{
  uint8_t trimmed_tx_len = tx_len;
  if (trimmed_tx_len > 250)
    trimmed_tx_len = 250;
  uint8_t msg[256];
  msg[0] = 0x00; // write i2c command
 8001c3e:	702b      	strb	r3, [r5, #0]
  msg[1] = trimmed_tx_len;
  msg[2] = i2c_addr; // will always perform a write... ignores the LSB
 8001c40:	70a9      	strb	r1, [r5, #2]

  for (int i = 0; i < trimmed_tx_len; i++)
 8001c42:	b12a      	cbz	r2, 8001c50 <tactile_i2c+0x54>
 8001c44:	18e9      	adds	r1, r5, r3
    msg[i+3] = txd[i];
 8001c46:	5cf4      	ldrb	r4, [r6, r3]
 8001c48:	70cc      	strb	r4, [r1, #3]
  uint8_t msg[256];
  msg[0] = 0x00; // write i2c command
  msg[1] = trimmed_tx_len;
  msg[2] = i2c_addr; // will always perform a write... ignores the LSB

  for (int i = 0; i < trimmed_tx_len; i++)
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d1f9      	bne.n	8001c44 <tactile_i2c+0x48>
    msg[i+3] = txd[i];
  tactile_bridge_spi_txrx(bridge_idx, trimmed_tx_len + 3, msg, NULL);
 8001c50:	1cd1      	adds	r1, r2, #3
 8001c52:	b2c9      	uxtb	r1, r1
 8001c54:	462a      	mov	r2, r5
 8001c56:	4648      	mov	r0, r9
 8001c58:	2300      	movs	r3, #0
 8001c5a:	f7ff fe15 	bl	8001888 <tactile_bridge_spi_txrx.part.0>
  return tactile_bridge_wait_for_completion(bridge_idx);
 8001c5e:	4648      	mov	r0, r9
 8001c60:	f7ff ff9a 	bl	8001b98 <tactile_bridge_wait_for_completion>
    else
      return tactile_bridge_i2c_write(bridge_idx, address, data_len, data);
  }
  else
    return I2C_FAIL;
}
 8001c64:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    printf("i2c xfer to port %d addr 0x%02x data len %d\r\n", 
           port, address, data_len);
    */
    I2C_TypeDef *i2c;
    if (port == 0)
      i2c = I2C1;
 8001c6e:	4b6c      	ldr	r3, [pc, #432]	; (8001e20 <tactile_i2c+0x224>)
 8001c70:	4c6c      	ldr	r4, [pc, #432]	; (8001e24 <tactile_i2c+0x228>)
 8001c72:	2800      	cmp	r0, #0
 8001c74:	bf08      	it	eq
 8001c76:	461c      	moveq	r4, r3
    else
      i2c = I2C3;
    i2c->CR1 |=  I2C_CR1_START;
 8001c78:	8823      	ldrh	r3, [r4, #0]
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c80:	8023      	strh	r3, [r4, #0]
    i2c->SR1 &= ~I2C_SR1_AF;
 8001c82:	8aa3      	ldrh	r3, [r4, #20]
 8001c84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001c88:	041b      	lsls	r3, r3, #16
 8001c8a:	0c1b      	lsrs	r3, r3, #16
 8001c8c:	82a3      	strh	r3, [r4, #20]
    while (!(i2c->SR1 & I2C_SR1_SB)) { }
 8001c8e:	8aa3      	ldrh	r3, [r4, #20]
 8001c90:	07d8      	lsls	r0, r3, #31
 8001c92:	d5fc      	bpl.n	8001c8e <tactile_i2c+0x92>
    i2c->DR = address; 
 8001c94:	f8a4 c010 	strh.w	ip, [r4, #16]
    while (!(i2c->SR1 & (I2C_SR1_ADDR | I2C_SR1_AF))) { }
 8001c98:	8aa0      	ldrh	r0, [r4, #20]
 8001c9a:	f420 707f 	bic.w	r0, r0, #1020	; 0x3fc
 8001c9e:	f020 0001 	bic.w	r0, r0, #1
 8001ca2:	0540      	lsls	r0, r0, #21
 8001ca4:	0d40      	lsrs	r0, r0, #21
 8001ca6:	2800      	cmp	r0, #0
 8001ca8:	d0f6      	beq.n	8001c98 <tactile_i2c+0x9c>
    int address_fail = (i2c->SR1 & I2C_SR1_AF) ? 1 : 0;
 8001caa:	8aa0      	ldrh	r0, [r4, #20]
 8001cac:	f3c0 2080 	ubfx	r0, r0, #10, #1
    if (!data_len)
 8001cb0:	f1b8 0f00 	cmp.w	r8, #0
 8001cb4:	d018      	beq.n	8001ce8 <tactile_i2c+0xec>
      i2c->CR1 |= I2C_CR1_STOP;
    i2c->SR2; // un-stretch clock by reading here (?)
 8001cb6:	8b23      	ldrh	r3, [r4, #24]
    if (!address_fail && data_len)
 8001cb8:	b9e0      	cbnz	r0, 8001cf4 <tactile_i2c+0xf8>
    {
      if (!(address & 0x1))
 8001cba:	f01c 0f01 	tst.w	ip, #1
 8001cbe:	f000 8095 	beq.w	8001dec <tactile_i2c+0x1f0>
 8001cc2:	f108 35ff 	add.w	r5, r8, #4294967295
      else
      {
        // it's a read transaction
        //if (!data_len)
        //  i2c->CR1 &= ~I2C_CR1_ACK;
        for (int i = 0; i < data_len; i++)
 8001cc6:	4603      	mov	r3, r0
        {
          if (i != data_len - 1)
 8001cc8:	42ab      	cmp	r3, r5
            i2c->CR1 |= I2C_CR1_ACK;
 8001cca:	8822      	ldrh	r2, [r4, #0]
        // it's a read transaction
        //if (!data_len)
        //  i2c->CR1 &= ~I2C_CR1_ACK;
        for (int i = 0; i < data_len; i++)
        {
          if (i != data_len - 1)
 8001ccc:	d047      	beq.n	8001d5e <tactile_i2c+0x162>
            i2c->CR1 |= I2C_CR1_ACK;
 8001cce:	b292      	uxth	r2, r2
 8001cd0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001cd4:	8022      	strh	r2, [r4, #0]
          else
            i2c->CR1 &= ~I2C_CR1_ACK;
          while (!(i2c->SR1 & I2C_SR1_RXNE)) { } // wait for it...
 8001cd6:	8aa1      	ldrh	r1, [r4, #20]
 8001cd8:	064a      	lsls	r2, r1, #25
 8001cda:	d5fc      	bpl.n	8001cd6 <tactile_i2c+0xda>
          data[i] = i2c->DR;
 8001cdc:	8a22      	ldrh	r2, [r4, #16]
 8001cde:	54f2      	strb	r2, [r6, r3]
      else
      {
        // it's a read transaction
        //if (!data_len)
        //  i2c->CR1 &= ~I2C_CR1_ACK;
        for (int i = 0; i < data_len; i++)
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	4543      	cmp	r3, r8
 8001ce4:	dbf0      	blt.n	8001cc8 <tactile_i2c+0xcc>
 8001ce6:	e005      	b.n	8001cf4 <tactile_i2c+0xf8>
    while (!(i2c->SR1 & I2C_SR1_SB)) { }
    i2c->DR = address; 
    while (!(i2c->SR1 & (I2C_SR1_ADDR | I2C_SR1_AF))) { }
    int address_fail = (i2c->SR1 & I2C_SR1_AF) ? 1 : 0;
    if (!data_len)
      i2c->CR1 |= I2C_CR1_STOP;
 8001ce8:	8823      	ldrh	r3, [r4, #0]
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cf0:	8023      	strh	r3, [r4, #0]
    i2c->SR2; // un-stretch clock by reading here (?)
 8001cf2:	8b23      	ldrh	r3, [r4, #24]
          while (!(i2c->SR1 & I2C_SR1_RXNE)) { } // wait for it...
          data[i] = i2c->DR;
        }
      }
    }
    i2c->CR1 |= I2C_CR1_STOP;
 8001cf4:	8823      	ldrh	r3, [r4, #0]
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cfc:	8023      	strh	r3, [r4, #0]
    while (i2c->SR2 & I2C_SR2_BUSY) { }
 8001cfe:	8b23      	ldrh	r3, [r4, #24]
 8001d00:	f003 0302 	and.w	r3, r3, #2
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1f9      	bne.n	8001cfe <tactile_i2c+0x102>
    for (volatile int i = 0; i < 3000; i++) { } // wait a bit
 8001d0a:	607b      	str	r3, [r7, #4]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001d12:	4293      	cmp	r3, r2
 8001d14:	dc05      	bgt.n	8001d22 <tactile_i2c+0x126>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	607b      	str	r3, [r7, #4]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	ddf9      	ble.n	8001d16 <tactile_i2c+0x11a>
    return address_fail ? I2C_FAIL : I2C_SUCCESS;
 8001d22:	f080 0001 	eor.w	r0, r0, #1
    else
      return tactile_bridge_i2c_write(bridge_idx, address, data_len, data);
  }
  else
    return I2C_FAIL;
}
 8001d26:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d30:	1d3a      	adds	r2, r7, #4
 8001d32:	4648      	mov	r0, r9
 8001d34:	2103      	movs	r1, #3
 8001d36:	2300      	movs	r3, #0
                        const uint8_t i2c_addr,
                        const uint8_t rx_len,
                        uint8_t *rxd)
{
  uint8_t msg[3];
  msg[0] = 0x01; // read i2c command
 8001d38:	2501      	movs	r5, #1
  msg[1] = rx_len;
  msg[2] = i2c_addr; // will always performa a read... ignores the LSB
 8001d3a:	f887 c006 	strb.w	ip, [r7, #6]
                        const uint8_t rx_len,
                        uint8_t *rxd)
{
  uint8_t msg[3];
  msg[0] = 0x01; // read i2c command
  msg[1] = rx_len;
 8001d3e:	f887 8005 	strb.w	r8, [r7, #5]
                        const uint8_t i2c_addr,
                        const uint8_t rx_len,
                        uint8_t *rxd)
{
  uint8_t msg[3];
  msg[0] = 0x01; // read i2c command
 8001d42:	713d      	strb	r5, [r7, #4]
 8001d44:	f7ff fda0 	bl	8001888 <tactile_bridge_spi_txrx.part.0>
  msg[1] = rx_len;
  msg[2] = i2c_addr; // will always performa a read... ignores the LSB
  tactile_bridge_spi_txrx(bridge_idx, 3, msg, NULL);
  if (tactile_bridge_wait_for_completion(bridge_idx) == I2C_FAIL)
 8001d48:	4648      	mov	r0, r9
 8001d4a:	f7ff ff25 	bl	8001b98 <tactile_bridge_wait_for_completion>
 8001d4e:	466c      	mov	r4, sp
 8001d50:	b958      	cbnz	r0, 8001d6a <tactile_i2c+0x16e>
    else
      return tactile_bridge_i2c_write(bridge_idx, address, data_len, data);
  }
  else
    return I2C_FAIL;
}
 8001d52:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001d56:	46a5      	mov	sp, r4
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        for (int i = 0; i < data_len; i++)
        {
          if (i != data_len - 1)
            i2c->CR1 |= I2C_CR1_ACK;
          else
            i2c->CR1 &= ~I2C_CR1_ACK;
 8001d5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d62:	0412      	lsls	r2, r2, #16
 8001d64:	0c12      	lsrs	r2, r2, #16
 8001d66:	8022      	strh	r2, [r4, #0]
 8001d68:	e7b5      	b.n	8001cd6 <tactile_i2c+0xda>
  msg[1] = rx_len;
  msg[2] = i2c_addr; // will always performa a read... ignores the LSB
  tactile_bridge_spi_txrx(bridge_idx, 3, msg, NULL);
  if (tactile_bridge_wait_for_completion(bridge_idx) == I2C_FAIL)
    return I2C_FAIL;
  uint8_t read_msg[rx_len+1], rx_msg[rx_len+1];
 8001d6a:	f108 0308 	add.w	r3, r8, #8
 8001d6e:	f403 73fc 	and.w	r3, r3, #504	; 0x1f8
 8001d72:	ebad 0d03 	sub.w	sp, sp, r3
 8001d76:	466a      	mov	r2, sp
  read_msg[0] = 0x06; // read buffer command
 8001d78:	2106      	movs	r1, #6
  msg[1] = rx_len;
  msg[2] = i2c_addr; // will always performa a read... ignores the LSB
  tactile_bridge_spi_txrx(bridge_idx, 3, msg, NULL);
  if (tactile_bridge_wait_for_completion(bridge_idx) == I2C_FAIL)
    return I2C_FAIL;
  uint8_t read_msg[rx_len+1], rx_msg[rx_len+1];
 8001d7a:	ebad 0d03 	sub.w	sp, sp, r3
  read_msg[0] = 0x06; // read buffer command
 8001d7e:	7011      	strb	r1, [r2, #0]
  msg[1] = rx_len;
  msg[2] = i2c_addr; // will always performa a read... ignores the LSB
  tactile_bridge_spi_txrx(bridge_idx, 3, msg, NULL);
  if (tactile_bridge_wait_for_completion(bridge_idx) == I2C_FAIL)
    return I2C_FAIL;
  uint8_t read_msg[rx_len+1], rx_msg[rx_len+1];
 8001d80:	46ea      	mov	sl, sp
 8001d82:	eb08 0105 	add.w	r1, r8, r5
  read_msg[0] = 0x06; // read buffer command
  for (int i = 1; i < rx_len+1; i++)
 8001d86:	f1b8 0f00 	cmp.w	r8, #0
 8001d8a:	d043      	beq.n	8001e14 <tactile_i2c+0x218>
 8001d8c:	4628      	mov	r0, r5
    read_msg[i] = 0;
 8001d8e:	f04f 0e00 	mov.w	lr, #0
 8001d92:	4615      	mov	r5, r2
  tactile_bridge_spi_txrx(bridge_idx, 3, msg, NULL);
  if (tactile_bridge_wait_for_completion(bridge_idx) == I2C_FAIL)
    return I2C_FAIL;
  uint8_t read_msg[rx_len+1], rx_msg[rx_len+1];
  read_msg[0] = 0x06; // read buffer command
  for (int i = 1; i < rx_len+1; i++)
 8001d94:	3001      	adds	r0, #1
 8001d96:	4540      	cmp	r0, r8
    read_msg[i] = 0;
 8001d98:	f805 ef01 	strb.w	lr, [r5, #1]!
  tactile_bridge_spi_txrx(bridge_idx, 3, msg, NULL);
  if (tactile_bridge_wait_for_completion(bridge_idx) == I2C_FAIL)
    return I2C_FAIL;
  uint8_t read_msg[rx_len+1], rx_msg[rx_len+1];
  read_msg[0] = 0x06; // read buffer command
  for (int i = 1; i < rx_len+1; i++)
 8001d9c:	ddfa      	ble.n	8001d94 <tactile_i2c+0x198>
 8001d9e:	4653      	mov	r3, sl
 8001da0:	b2c9      	uxtb	r1, r1
 8001da2:	4648      	mov	r0, r9
 8001da4:	f7ff fd70 	bl	8001888 <tactile_bridge_spi_txrx.part.0>
 8001da8:	4652      	mov	r2, sl
 8001daa:	2301      	movs	r3, #1
 8001dac:	18f1      	adds	r1, r6, r3
    read_msg[i] = 0;
  tactile_bridge_spi_txrx(bridge_idx, rx_len+1, read_msg, rx_msg);
  for (int i = 1; i < rx_len+1; i++)
 8001dae:	3301      	adds	r3, #1
    rxd[i-1] = rx_msg[i];
 8001db0:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8001db4:	f801 0c01 	strb.w	r0, [r1, #-1]
  uint8_t read_msg[rx_len+1], rx_msg[rx_len+1];
  read_msg[0] = 0x06; // read buffer command
  for (int i = 1; i < rx_len+1; i++)
    read_msg[i] = 0;
  tactile_bridge_spi_txrx(bridge_idx, rx_len+1, read_msg, rx_msg);
  for (int i = 1; i < rx_len+1; i++)
 8001db8:	4543      	cmp	r3, r8
 8001dba:	ddf7      	ble.n	8001dac <tactile_i2c+0x1b0>
    rxd[i-1] = rx_msg[i];
  for (volatile int i = 0; i < 1000; i++) { } // la di dah...
 8001dbc:	f107 0508 	add.w	r5, r7, #8
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	602b      	str	r3, [r5, #0]
 8001dc4:	682b      	ldr	r3, [r5, #0]
 8001dc6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001dca:	da06      	bge.n	8001dda <tactile_i2c+0x1de>
 8001dcc:	682b      	ldr	r3, [r5, #0]
 8001dce:	3301      	adds	r3, #1
 8001dd0:	602b      	str	r3, [r5, #0]
 8001dd2:	682b      	ldr	r3, [r5, #0]
 8001dd4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001dd8:	dbf8      	blt.n	8001dcc <tactile_i2c+0x1d0>
  uint8_t bridge_state = tactile_bridge_read_reg(bridge_idx, 0x4);
 8001dda:	4648      	mov	r0, r9
 8001ddc:	2104      	movs	r1, #4
 8001dde:	f7ff fdb5 	bl	800194c <tactile_bridge_read_reg>
  return (bridge_state == 0xf0 ? I2C_SUCCESS : I2C_FAIL);
 8001de2:	f1b0 03f0 	subs.w	r3, r0, #240	; 0xf0
 8001de6:	4258      	negs	r0, r3
 8001de8:	4158      	adcs	r0, r3
 8001dea:	e7b2      	b.n	8001d52 <tactile_i2c+0x156>
    if (!address_fail && data_len)
    {
      if (!(address & 0x1))
      {
        // it's a write transaction
        for (int i = 0; i < data_len; i++)
 8001dec:	4603      	mov	r3, r0
        {
          i2c->DR = data[i];
 8001dee:	5cf2      	ldrb	r2, [r6, r3]
 8001df0:	8222      	strh	r2, [r4, #16]
          while (!(i2c->SR1 & (I2C_SR1_BTF | I2C_SR1_AF))) { }
 8001df2:	8aa1      	ldrh	r1, [r4, #20]
 8001df4:	f421 717e 	bic.w	r1, r1, #1016	; 0x3f8
 8001df8:	f021 0103 	bic.w	r1, r1, #3
 8001dfc:	0549      	lsls	r1, r1, #21
 8001dfe:	0d49      	lsrs	r1, r1, #21
 8001e00:	2900      	cmp	r1, #0
 8001e02:	d0f6      	beq.n	8001df2 <tactile_i2c+0x1f6>
          if (i2c->SR1 & I2C_SR1_AF)
 8001e04:	8aa2      	ldrh	r2, [r4, #20]
 8001e06:	0551      	lsls	r1, r2, #21
 8001e08:	f53f af74 	bmi.w	8001cf4 <tactile_i2c+0xf8>
    if (!address_fail && data_len)
    {
      if (!(address & 0x1))
      {
        // it's a write transaction
        for (int i = 0; i < data_len; i++)
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	4543      	cmp	r3, r8
 8001e10:	dbed      	blt.n	8001dee <tactile_i2c+0x1f2>
 8001e12:	e76f      	b.n	8001cf4 <tactile_i2c+0xf8>
 8001e14:	b2c9      	uxtb	r1, r1
 8001e16:	4648      	mov	r0, r9
 8001e18:	466b      	mov	r3, sp
 8001e1a:	f7ff fd35 	bl	8001888 <tactile_bridge_spi_txrx.part.0>
 8001e1e:	e7cd      	b.n	8001dbc <tactile_i2c+0x1c0>
 8001e20:	40005400 	.word	0x40005400
 8001e24:	40005c00 	.word	0x40005c00

08001e28 <tactile_poll>:
  else
    return I2C_FAIL;
}

void tactile_poll()
{
 8001e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e2c:	f8df 9118 	ldr.w	r9, [pc, #280]	; 8001f48 <tactile_poll+0x120>
    {
      // tell the MCU we want to broadcast to everybody
      if (tactile_i2c(port, BCAST_ENABLE_ADDR, NULL, 0) != I2C_SUCCESS)
        continue;
      // tell everybody we want them to start their sampling process
      uint8_t msg[4] = { 0x12, 0x01, 0x00, 0x00};
 8001e30:	f8df 8118 	ldr.w	r8, [pc, #280]	; 8001f4c <tactile_poll+0x124>
      // disable everybody by reading one byte...
      if (tactile_i2c(port, BCAST_DISABLE_ADDR, msg, 1) != I2C_SUCCESS)
        continue;
      uint8_t sensor_addr; // look up the sensor address
      if (port < NUM_FINGERS)
        sensor_addr = g_tactile_finger_addrs[sensor_idx];
 8001e34:	f8df b118 	ldr.w	fp, [pc, #280]	; 8001f50 <tactile_poll+0x128>
  else
    return I2C_FAIL;
}

void tactile_poll()
{
 8001e38:	b085      	sub	sp, #20
  for (uint_fast8_t port = 0; port < NUM_TACTILE_PORTS; port++)
 8001e3a:	2700      	movs	r7, #0
  {
    //printf("port %d time %12u\r\n", port, (unsigned)SYSTIME);
    for (uint_fast8_t sensor_idx = 0; 
         sensor_idx < g_tactile_sensors_per_port[port]; 
 8001e3c:	f819 6007 	ldrb.w	r6, [r9, r7]
void tactile_poll()
{
  for (uint_fast8_t port = 0; port < NUM_TACTILE_PORTS; port++)
  {
    //printf("port %d time %12u\r\n", port, (unsigned)SYSTIME);
    for (uint_fast8_t sensor_idx = 0; 
 8001e40:	2e00      	cmp	r6, #0
 8001e42:	d074      	beq.n	8001f2e <tactile_poll+0x106>
 8001e44:	b2fd      	uxtb	r5, r7
 8001e46:	eb07 0ac7 	add.w	sl, r7, r7, lsl #3
 8001e4a:	2400      	movs	r4, #0
 8001e4c:	e002      	b.n	8001e54 <tactile_poll+0x2c>
         sensor_idx < g_tactile_sensors_per_port[port]; 
         sensor_idx++)
 8001e4e:	3401      	adds	r4, #1
void tactile_poll()
{
  for (uint_fast8_t port = 0; port < NUM_TACTILE_PORTS; port++)
  {
    //printf("port %d time %12u\r\n", port, (unsigned)SYSTIME);
    for (uint_fast8_t sensor_idx = 0; 
 8001e50:	42a6      	cmp	r6, r4
 8001e52:	d96c      	bls.n	8001f2e <tactile_poll+0x106>
         sensor_idx < g_tactile_sensors_per_port[port]; 
         sensor_idx++)
    {
      // tell the MCU we want to broadcast to everybody
      if (tactile_i2c(port, BCAST_ENABLE_ADDR, NULL, 0) != I2C_SUCCESS)
 8001e54:	2200      	movs	r2, #0
 8001e56:	4613      	mov	r3, r2
 8001e58:	4628      	mov	r0, r5
 8001e5a:	210c      	movs	r1, #12
 8001e5c:	f7ff fece 	bl	8001bfc <tactile_i2c>
 8001e60:	2801      	cmp	r0, #1
 8001e62:	d1f4      	bne.n	8001e4e <tactile_poll+0x26>
        continue;
      // tell everybody we want them to start their sampling process
      uint8_t msg[4] = { 0x12, 0x01, 0x00, 0x00};
 8001e64:	f8d8 0000 	ldr.w	r0, [r8]
 8001e68:	9003      	str	r0, [sp, #12]
      if (tactile_i2c(port, BAROM_ADDR, msg, 2) != I2C_SUCCESS)
 8001e6a:	aa03      	add	r2, sp, #12
 8001e6c:	4628      	mov	r0, r5
 8001e6e:	21c0      	movs	r1, #192	; 0xc0
 8001e70:	2302      	movs	r3, #2
 8001e72:	f7ff fec3 	bl	8001bfc <tactile_i2c>
 8001e76:	2801      	cmp	r0, #1
 8001e78:	d1e9      	bne.n	8001e4e <tactile_poll+0x26>
        continue;
      // disable everybody by reading one byte...
      if (tactile_i2c(port, BCAST_DISABLE_ADDR, msg, 1) != I2C_SUCCESS)
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	210d      	movs	r1, #13
 8001e7e:	4628      	mov	r0, r5
 8001e80:	aa03      	add	r2, sp, #12
 8001e82:	f7ff febb 	bl	8001bfc <tactile_i2c>
 8001e86:	2801      	cmp	r0, #1
 8001e88:	d1e1      	bne.n	8001e4e <tactile_poll+0x26>
        continue;
      uint8_t sensor_addr; // look up the sensor address
      if (port < NUM_FINGERS)
 8001e8a:	2f03      	cmp	r7, #3
 8001e8c:	d055      	beq.n	8001f3a <tactile_poll+0x112>
        sensor_addr = g_tactile_finger_addrs[sensor_idx];
 8001e8e:	f814 c00b 	ldrb.w	ip, [r4, fp]
 8001e92:	f8cd c000 	str.w	ip, [sp]
      else
        sensor_addr = g_tactile_palm_addrs[sensor_idx];
      // activate this sensor
      if (tactile_i2c(port, sensor_addr, NULL, 0) != I2C_SUCCESS)
 8001e96:	2200      	movs	r2, #0
 8001e98:	4613      	mov	r3, r2
 8001e9a:	4628      	mov	r0, r5
 8001e9c:	9900      	ldr	r1, [sp, #0]
 8001e9e:	f7ff fead 	bl	8001bfc <tactile_i2c>
 8001ea2:	2801      	cmp	r0, #1
 8001ea4:	d1d3      	bne.n	8001e4e <tactile_poll+0x26>
        continue;
      msg[0] = 0;
      // tell it we want to read the data
      if (tactile_i2c(port, BAROM_ADDR, msg, 1) != I2C_SUCCESS)
 8001ea6:	4603      	mov	r3, r0
      else
        sensor_addr = g_tactile_palm_addrs[sensor_idx];
      // activate this sensor
      if (tactile_i2c(port, sensor_addr, NULL, 0) != I2C_SUCCESS)
        continue;
      msg[0] = 0;
 8001ea8:	f04f 0e00 	mov.w	lr, #0
      // tell it we want to read the data
      if (tactile_i2c(port, BAROM_ADDR, msg, 1) != I2C_SUCCESS)
 8001eac:	4628      	mov	r0, r5
 8001eae:	21c0      	movs	r1, #192	; 0xc0
 8001eb0:	aa03      	add	r2, sp, #12
      else
        sensor_addr = g_tactile_palm_addrs[sensor_idx];
      // activate this sensor
      if (tactile_i2c(port, sensor_addr, NULL, 0) != I2C_SUCCESS)
        continue;
      msg[0] = 0;
 8001eb2:	f88d e00c 	strb.w	lr, [sp, #12]
      // tell it we want to read the data
      if (tactile_i2c(port, BAROM_ADDR, msg, 1) != I2C_SUCCESS)
 8001eb6:	f7ff fea1 	bl	8001bfc <tactile_i2c>
 8001eba:	2801      	cmp	r0, #1
 8001ebc:	d1c7      	bne.n	8001e4e <tactile_poll+0x26>
        continue;
      // now, actually read the data
      if (tactile_i2c(port, BAROM_ADDR | I2C_READ, msg, 4) != I2C_SUCCESS)
 8001ebe:	2304      	movs	r3, #4
 8001ec0:	4628      	mov	r0, r5
 8001ec2:	21c1      	movs	r1, #193	; 0xc1
 8001ec4:	aa03      	add	r2, sp, #12
 8001ec6:	f7ff fe99 	bl	8001bfc <tactile_i2c>
 8001eca:	2801      	cmp	r0, #1
 8001ecc:	4603      	mov	r3, r0
 8001ece:	d1be      	bne.n	8001e4e <tactile_poll+0x26>
        continue;
      //printf("port %d mcu %d sensor %d rx 4 bytes: 0x%02x  0x%02x  0x%02x  0x%02x\r\n",
      //       port, mcu, sensor, msg[0], msg[1], msg[2], msg[3]);
      const uint16_t pressure = ((uint16_t)msg[0] << 2) | (msg[1] >> 6);
 8001ed0:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8001ed4:	f89d 000c 	ldrb.w	r0, [sp, #12]
      //printf("port %d sensor 0x%02x pressure %06d  temperature %06d\r\n",
      //       port, sensor_addr, pressure, temperature);

      const uint_fast8_t state_sensor_idx = port * SENSORS_PER_FINGER + 
                                            sensor_idx;
      g_state.tactile_pressures   [state_sensor_idx] = pressure;
 8001ed8:	f8df e078 	ldr.w	lr, [pc, #120]	; 8001f54 <tactile_poll+0x12c>
      if (tactile_i2c(port, BAROM_ADDR | I2C_READ, msg, 4) != I2C_SUCCESS)
        continue;
      //printf("port %d mcu %d sensor %d rx 4 bytes: 0x%02x  0x%02x  0x%02x  0x%02x\r\n",
      //       port, mcu, sensor, msg[0], msg[1], msg[2], msg[3]);
      const uint16_t pressure = ((uint16_t)msg[0] << 2) | (msg[1] >> 6);
      const uint16_t temperature = ((uint16_t)msg[2] << 2) | (msg[3] >> 6);
 8001edc:	f89d c00f 	ldrb.w	ip, [sp, #15]
 8001ee0:	eb04 010a 	add.w	r1, r4, sl
      // now, actually read the data
      if (tactile_i2c(port, BAROM_ADDR | I2C_READ, msg, 4) != I2C_SUCCESS)
        continue;
      //printf("port %d mcu %d sensor %d rx 4 bytes: 0x%02x  0x%02x  0x%02x  0x%02x\r\n",
      //       port, mcu, sensor, msg[0], msg[1], msg[2], msg[3]);
      const uint16_t pressure = ((uint16_t)msg[0] << 2) | (msg[1] >> 6);
 8001ee4:	0992      	lsrs	r2, r2, #6
 8001ee6:	ea42 0080 	orr.w	r0, r2, r0, lsl #2
      //printf("port %d sensor 0x%02x pressure %06d  temperature %06d\r\n",
      //       port, sensor_addr, pressure, temperature);

      const uint_fast8_t state_sensor_idx = port * SENSORS_PER_FINGER + 
                                            sensor_idx;
      g_state.tactile_pressures   [state_sensor_idx] = pressure;
 8001eea:	1d0a      	adds	r2, r1, #4
      g_state.tactile_temperatures[state_sensor_idx] = temperature;
 8001eec:	3128      	adds	r1, #40	; 0x28
      //printf("port %d sensor 0x%02x pressure %06d  temperature %06d\r\n",
      //       port, sensor_addr, pressure, temperature);

      const uint_fast8_t state_sensor_idx = port * SENSORS_PER_FINGER + 
                                            sensor_idx;
      g_state.tactile_pressures   [state_sensor_idx] = pressure;
 8001eee:	f83e e012 	ldrh.w	lr, [lr, r2, lsl #1]
 8001ef2:	f8df e060 	ldr.w	lr, [pc, #96]	; 8001f54 <tactile_poll+0x12c>
 8001ef6:	f82e 0012 	strh.w	r0, [lr, r2, lsl #1]
      g_state.tactile_temperatures[state_sensor_idx] = temperature;
 8001efa:	eb0e 0141 	add.w	r1, lr, r1, lsl #1
      if (tactile_i2c(port, BAROM_ADDR | I2C_READ, msg, 4) != I2C_SUCCESS)
        continue;
      //printf("port %d mcu %d sensor %d rx 4 bytes: 0x%02x  0x%02x  0x%02x  0x%02x\r\n",
      //       port, mcu, sensor, msg[0], msg[1], msg[2], msg[3]);
      const uint16_t pressure = ((uint16_t)msg[0] << 2) | (msg[1] >> 6);
      const uint16_t temperature = ((uint16_t)msg[2] << 2) | (msg[3] >> 6);
 8001efe:	ea4f 1e9c 	mov.w	lr, ip, lsr #6
                                            sensor_idx;
      g_state.tactile_pressures   [state_sensor_idx] = pressure;
      g_state.tactile_temperatures[state_sensor_idx] = temperature;

      // de-activate this sensor
      if (tactile_i2c(port, sensor_addr | I2C_READ, msg, 1) != I2C_SUCCESS)
 8001f02:	f8dd c000 	ldr.w	ip, [sp]
      //       port, sensor_addr, pressure, temperature);

      const uint_fast8_t state_sensor_idx = port * SENSORS_PER_FINGER + 
                                            sensor_idx;
      g_state.tactile_pressures   [state_sensor_idx] = pressure;
      g_state.tactile_temperatures[state_sensor_idx] = temperature;
 8001f06:	9101      	str	r1, [sp, #4]

      // de-activate this sensor
      if (tactile_i2c(port, sensor_addr | I2C_READ, msg, 1) != I2C_SUCCESS)
 8001f08:	f04c 0101 	orr.w	r1, ip, #1
      //       port, sensor_addr, pressure, temperature);

      const uint_fast8_t state_sensor_idx = port * SENSORS_PER_FINGER + 
                                            sensor_idx;
      g_state.tactile_pressures   [state_sensor_idx] = pressure;
      g_state.tactile_temperatures[state_sensor_idx] = temperature;
 8001f0c:	f8dd c004 	ldr.w	ip, [sp, #4]
      if (tactile_i2c(port, BAROM_ADDR | I2C_READ, msg, 4) != I2C_SUCCESS)
        continue;
      //printf("port %d mcu %d sensor %d rx 4 bytes: 0x%02x  0x%02x  0x%02x  0x%02x\r\n",
      //       port, mcu, sensor, msg[0], msg[1], msg[2], msg[3]);
      const uint16_t pressure = ((uint16_t)msg[0] << 2) | (msg[1] >> 6);
      const uint16_t temperature = ((uint16_t)msg[2] << 2) | (msg[3] >> 6);
 8001f10:	f89d 000e 	ldrb.w	r0, [sp, #14]
      //       port, sensor_addr, pressure, temperature);

      const uint_fast8_t state_sensor_idx = port * SENSORS_PER_FINGER + 
                                            sensor_idx;
      g_state.tactile_pressures   [state_sensor_idx] = pressure;
      g_state.tactile_temperatures[state_sensor_idx] = temperature;
 8001f14:	f8bc c004 	ldrh.w	ip, [ip, #4]
 8001f18:	f8dd c004 	ldr.w	ip, [sp, #4]
      if (tactile_i2c(port, BAROM_ADDR | I2C_READ, msg, 4) != I2C_SUCCESS)
        continue;
      //printf("port %d mcu %d sensor %d rx 4 bytes: 0x%02x  0x%02x  0x%02x  0x%02x\r\n",
      //       port, mcu, sensor, msg[0], msg[1], msg[2], msg[3]);
      const uint16_t pressure = ((uint16_t)msg[0] << 2) | (msg[1] >> 6);
      const uint16_t temperature = ((uint16_t)msg[2] << 2) | (msg[3] >> 6);
 8001f1c:	ea4e 0e80 	orr.w	lr, lr, r0, lsl #2
                                            sensor_idx;
      g_state.tactile_pressures   [state_sensor_idx] = pressure;
      g_state.tactile_temperatures[state_sensor_idx] = temperature;

      // de-activate this sensor
      if (tactile_i2c(port, sensor_addr | I2C_READ, msg, 1) != I2C_SUCCESS)
 8001f20:	aa03      	add	r2, sp, #12
 8001f22:	4628      	mov	r0, r5
      //       port, sensor_addr, pressure, temperature);

      const uint_fast8_t state_sensor_idx = port * SENSORS_PER_FINGER + 
                                            sensor_idx;
      g_state.tactile_pressures   [state_sensor_idx] = pressure;
      g_state.tactile_temperatures[state_sensor_idx] = temperature;
 8001f24:	f8ac e004 	strh.w	lr, [ip, #4]

      // de-activate this sensor
      if (tactile_i2c(port, sensor_addr | I2C_READ, msg, 1) != I2C_SUCCESS)
 8001f28:	f7ff fe68 	bl	8001bfc <tactile_i2c>
 8001f2c:	e78f      	b.n	8001e4e <tactile_poll+0x26>
    return I2C_FAIL;
}

void tactile_poll()
{
  for (uint_fast8_t port = 0; port < NUM_TACTILE_PORTS; port++)
 8001f2e:	3701      	adds	r7, #1
 8001f30:	2f04      	cmp	r7, #4
 8001f32:	d183      	bne.n	8001e3c <tactile_poll+0x14>
      if (tactile_i2c(port, sensor_addr | I2C_READ, msg, 1) != I2C_SUCCESS)
          continue;
    }
  }
  //printf("\r\n");
}
 8001f34:	b005      	add	sp, #20
 8001f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        continue;
      uint8_t sensor_addr; // look up the sensor address
      if (port < NUM_FINGERS)
        sensor_addr = g_tactile_finger_addrs[sensor_idx];
      else
        sensor_addr = g_tactile_palm_addrs[sensor_idx];
 8001f3a:	f8df e01c 	ldr.w	lr, [pc, #28]	; 8001f58 <tactile_poll+0x130>
 8001f3e:	f814 e00e 	ldrb.w	lr, [r4, lr]
 8001f42:	f8cd e000 	str.w	lr, [sp]
 8001f46:	e7a6      	b.n	8001e96 <tactile_poll+0x6e>
 8001f48:	08009118 	.word	0x08009118
 8001f4c:	080090b8 	.word	0x080090b8
 8001f50:	0800910c 	.word	0x0800910c
 8001f54:	2000fca0 	.word	0x2000fca0
 8001f58:	080090bc 	.word	0x080090bc

08001f5c <pin_set_output_type>:
#include <stdio.h>

void pin_set_output_type(GPIO_TypeDef *gpio, 
                         const uint8_t pin_idx,
                         const uint8_t output_type)
{
 8001f5c:	b530      	push	{r4, r5, lr}
  if (output_type == PIN_OUTPUT_TYPE_OPEN_DRAIN)
 8001f5e:	2a01      	cmp	r2, #1
#include <stdio.h>

void pin_set_output_type(GPIO_TypeDef *gpio, 
                         const uint8_t pin_idx,
                         const uint8_t output_type)
{
 8001f60:	b083      	sub	sp, #12
 8001f62:	4604      	mov	r4, r0
 8001f64:	460d      	mov	r5, r1
  if (output_type == PIN_OUTPUT_TYPE_OPEN_DRAIN)
 8001f66:	d00b      	beq.n	8001f80 <pin_set_output_type+0x24>
    printf("setting pin %d to open-drain\r\n", pin_idx);
    gpio->OTYPER |= (1 << pin_idx);
  }
  else
  {
    printf("setting pin %d to push-pull\r\n", pin_idx);
 8001f68:	480b      	ldr	r0, [pc, #44]	; (8001f98 <pin_set_output_type+0x3c>)
 8001f6a:	f000 fa29 	bl	80023c0 <printf>
    gpio->OTYPER &= ~(1 << pin_idx);
 8001f6e:	6863      	ldr	r3, [r4, #4]
 8001f70:	2201      	movs	r2, #1
 8001f72:	fa02 f505 	lsl.w	r5, r2, r5
 8001f76:	ea23 0505 	bic.w	r5, r3, r5
 8001f7a:	6065      	str	r5, [r4, #4]
  }
}
 8001f7c:	b003      	add	sp, #12
 8001f7e:	bd30      	pop	{r4, r5, pc}
                         const uint8_t pin_idx,
                         const uint8_t output_type)
{
  if (output_type == PIN_OUTPUT_TYPE_OPEN_DRAIN)
  {
    printf("setting pin %d to open-drain\r\n", pin_idx);
 8001f80:	4806      	ldr	r0, [pc, #24]	; (8001f9c <pin_set_output_type+0x40>)
 8001f82:	9201      	str	r2, [sp, #4]
 8001f84:	f000 fa1c 	bl	80023c0 <printf>
    gpio->OTYPER |= (1 << pin_idx);
 8001f88:	9a01      	ldr	r2, [sp, #4]
 8001f8a:	6863      	ldr	r3, [r4, #4]
 8001f8c:	40aa      	lsls	r2, r5
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	6062      	str	r2, [r4, #4]
  else
  {
    printf("setting pin %d to push-pull\r\n", pin_idx);
    gpio->OTYPER &= ~(1 << pin_idx);
  }
}
 8001f92:	b003      	add	sp, #12
 8001f94:	bd30      	pop	{r4, r5, pc}
 8001f96:	bf00      	nop
 8001f98:	0800913c 	.word	0x0800913c
 8001f9c:	0800911c 	.word	0x0800911c

08001fa0 <pin_set_alternate_function>:

void pin_set_alternate_function(GPIO_TypeDef *gpio,
                                const uint8_t pin_idx,
                                const uint8_t function_idx)
{
  if (pin_idx > 15 || function_idx > 15)
 8001fa0:	290f      	cmp	r1, #15
}

void pin_set_alternate_function(GPIO_TypeDef *gpio,
                                const uint8_t pin_idx,
                                const uint8_t function_idx)
{
 8001fa2:	b470      	push	{r4, r5, r6}
  if (pin_idx > 15 || function_idx > 15)
 8001fa4:	d820      	bhi.n	8001fe8 <pin_set_alternate_function+0x48>
 8001fa6:	2a0f      	cmp	r2, #15
 8001fa8:	d81e      	bhi.n	8001fe8 <pin_set_alternate_function+0x48>
    return; // adios amigo
  volatile uint32_t *af_reg = (pin_idx < 8) ? &gpio->AFR[0] : &gpio->AFR[1];
 8001faa:	2907      	cmp	r1, #7
 8001fac:	d91e      	bls.n	8001fec <pin_set_alternate_function+0x4c>
  const uint8_t reg_ofs = (pin_idx < 8) ? (pin_idx * 4) : ((pin_idx-8) * 4);
 8001fae:	f1a1 0408 	sub.w	r4, r1, #8
 8001fb2:	00a4      	lsls	r4, r4, #2
 8001fb4:	b2e4      	uxtb	r4, r4
                                const uint8_t pin_idx,
                                const uint8_t function_idx)
{
  if (pin_idx > 15 || function_idx > 15)
    return; // adios amigo
  volatile uint32_t *af_reg = (pin_idx < 8) ? &gpio->AFR[0] : &gpio->AFR[1];
 8001fb6:	f100 0324 	add.w	r3, r0, #36	; 0x24
  const uint8_t reg_ofs = (pin_idx < 8) ? (pin_idx * 4) : ((pin_idx-8) * 4);
  *af_reg &= ~(0xf << reg_ofs); // zero out whatever was there before
 8001fba:	681e      	ldr	r6, [r3, #0]
 8001fbc:	250f      	movs	r5, #15
 8001fbe:	40a5      	lsls	r5, r4
 8001fc0:	ea26 0505 	bic.w	r5, r6, r5
 8001fc4:	601d      	str	r5, [r3, #0]
  *af_reg |= function_idx << reg_ofs; // set the alternate function register
 8001fc6:	681d      	ldr	r5, [r3, #0]
 8001fc8:	40a2      	lsls	r2, r4
 8001fca:	432a      	orrs	r2, r5
 8001fcc:	601a      	str	r2, [r3, #0]
  gpio->MODER &= ~(3 << (pin_idx * 2)); // zero out whatever was there before
 8001fce:	6802      	ldr	r2, [r0, #0]
 8001fd0:	0049      	lsls	r1, r1, #1
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	408b      	lsls	r3, r1
 8001fd6:	ea22 0303 	bic.w	r3, r2, r3
 8001fda:	6003      	str	r3, [r0, #0]
  gpio->MODER |= 2 << (pin_idx * 2); // put the GPIO in alternate-function mode
 8001fdc:	6803      	ldr	r3, [r0, #0]
 8001fde:	2202      	movs	r2, #2
 8001fe0:	fa02 f101 	lsl.w	r1, r2, r1
 8001fe4:	4319      	orrs	r1, r3
 8001fe6:	6001      	str	r1, [r0, #0]
}
 8001fe8:	bc70      	pop	{r4, r5, r6}
 8001fea:	4770      	bx	lr
                                const uint8_t function_idx)
{
  if (pin_idx > 15 || function_idx > 15)
    return; // adios amigo
  volatile uint32_t *af_reg = (pin_idx < 8) ? &gpio->AFR[0] : &gpio->AFR[1];
  const uint8_t reg_ofs = (pin_idx < 8) ? (pin_idx * 4) : ((pin_idx-8) * 4);
 8001fec:	008c      	lsls	r4, r1, #2
 8001fee:	b2e4      	uxtb	r4, r4
                                const uint8_t pin_idx,
                                const uint8_t function_idx)
{
  if (pin_idx > 15 || function_idx > 15)
    return; // adios amigo
  volatile uint32_t *af_reg = (pin_idx < 8) ? &gpio->AFR[0] : &gpio->AFR[1];
 8001ff0:	f100 0320 	add.w	r3, r0, #32
 8001ff4:	e7e1      	b.n	8001fba <pin_set_alternate_function+0x1a>
 8001ff6:	bf00      	nop

08001ff8 <pin_set_output>:
  gpio->MODER |= 2 << (pin_idx * 2); // put the GPIO in alternate-function mode
}

void pin_set_output(GPIO_TypeDef *gpio, const uint8_t pin_idx)
{
  if (pin_idx > 15)
 8001ff8:	290f      	cmp	r1, #15
 8001ffa:	d80c      	bhi.n	8002016 <pin_set_output+0x1e>
    return; // adios amigo
  gpio->MODER &= ~(3 << (pin_idx * 2));
 8001ffc:	6802      	ldr	r2, [r0, #0]
 8001ffe:	0049      	lsls	r1, r1, #1
 8002000:	2303      	movs	r3, #3
 8002002:	408b      	lsls	r3, r1
 8002004:	ea22 0303 	bic.w	r3, r2, r3
 8002008:	6003      	str	r3, [r0, #0]
  gpio->MODER |= 1 << (pin_idx * 2);
 800200a:	6803      	ldr	r3, [r0, #0]
 800200c:	2201      	movs	r2, #1
 800200e:	fa02 f101 	lsl.w	r1, r2, r1
 8002012:	4319      	orrs	r1, r3
 8002014:	6001      	str	r1, [r0, #0]
 8002016:	4770      	bx	lr

08002018 <pin_set_output_level>:

void pin_set_output_level(GPIO_TypeDef *gpio, 
                          const uint8_t pin_idx, 
                          const uint8_t pin_level)
{
  if (pin_idx > 15)
 8002018:	290f      	cmp	r1, #15
 800201a:	d805      	bhi.n	8002028 <pin_set_output_level+0x10>
    return;
  if (pin_level)
    gpio->BSRRL = 1 << pin_idx;
 800201c:	2301      	movs	r3, #1
 800201e:	fa03 f101 	lsl.w	r1, r3, r1
 8002022:	b289      	uxth	r1, r1
                          const uint8_t pin_idx, 
                          const uint8_t pin_level)
{
  if (pin_idx > 15)
    return;
  if (pin_level)
 8002024:	b90a      	cbnz	r2, 800202a <pin_set_output_level+0x12>
    gpio->BSRRL = 1 << pin_idx;
  else
    gpio->BSRRH = 1 << pin_idx;
 8002026:	8341      	strh	r1, [r0, #26]
 8002028:	4770      	bx	lr
                          const uint8_t pin_level)
{
  if (pin_idx > 15)
    return;
  if (pin_level)
    gpio->BSRRL = 1 << pin_idx;
 800202a:	8301      	strh	r1, [r0, #24]
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop

08002030 <enc_poll>:
  enc_poll(); // first one will be garbage
  enc_poll(); // and the second one
}

void enc_poll()
{
 8002030:	b4f0      	push	{r4, r5, r6, r7}
  GPIOE->BSRRH = 1 << PORTE_ENC_CS; // assert (pull down) CS
 8002032:	4a1e      	ldr	r2, [pc, #120]	; (80020ac <enc_poll+0x7c>)
  enc_poll(); // first one will be garbage
  enc_poll(); // and the second one
}

void enc_poll()
{
 8002034:	b082      	sub	sp, #8
  GPIOE->BSRRH = 1 << PORTE_ENC_CS; // assert (pull down) CS
  for (volatile int i = 0; i < 10; i++) { } // needs at least 350 ns
 8002036:	2300      	movs	r3, #0
  enc_poll(); // and the second one
}

void enc_poll()
{
  GPIOE->BSRRH = 1 << PORTE_ENC_CS; // assert (pull down) CS
 8002038:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800203c:	8351      	strh	r1, [r2, #26]
  for (volatile int i = 0; i < 10; i++) { } // needs at least 350 ns
 800203e:	9300      	str	r3, [sp, #0]
 8002040:	9b00      	ldr	r3, [sp, #0]
 8002042:	2b09      	cmp	r3, #9
 8002044:	dc05      	bgt.n	8002052 <enc_poll+0x22>
 8002046:	9b00      	ldr	r3, [sp, #0]
 8002048:	3301      	adds	r3, #1
 800204a:	9300      	str	r3, [sp, #0]
 800204c:	9b00      	ldr	r3, [sp, #0]
 800204e:	2b09      	cmp	r3, #9
 8002050:	ddf9      	ble.n	8002046 <enc_poll+0x16>
  SPI4->DR; // clear the rx data register in case it has some garbage
 8002052:	4b17      	ldr	r3, [pc, #92]	; (80020b0 <enc_poll+0x80>)
 8002054:	4817      	ldr	r0, [pc, #92]	; (80020b4 <enc_poll+0x84>)
 8002056:	899a      	ldrh	r2, [r3, #12]
  for (int i = 0; i < NUM_ENC; i++)
  {
    SPI4->DR = 0xffff; 
    while (!(SPI4->SR & SPI_SR_TXE)) { } // wait for buffer room
 8002058:	461e      	mov	r6, r3
void enc_poll()
{
  GPIOE->BSRRH = 1 << PORTE_ENC_CS; // assert (pull down) CS
  for (volatile int i = 0; i < 10; i++) { } // needs at least 350 ns
  SPI4->DR; // clear the rx data register in case it has some garbage
  for (int i = 0; i < NUM_ENC; i++)
 800205a:	2100      	movs	r1, #0
  {
    SPI4->DR = 0xffff; 
 800205c:	f04f 35ff 	mov.w	r5, #4294967295
 8002060:	819d      	strh	r5, [r3, #12]
    while (!(SPI4->SR & SPI_SR_TXE)) { } // wait for buffer room
 8002062:	891a      	ldrh	r2, [r3, #8]
 8002064:	0794      	lsls	r4, r2, #30
 8002066:	d5fc      	bpl.n	8002062 <enc_poll+0x32>
    while (!(SPI4->SR & SPI_SR_RXNE)) { }
 8002068:	891a      	ldrh	r2, [r3, #8]
 800206a:	07d2      	lsls	r2, r2, #31
 800206c:	d5fc      	bpl.n	8002068 <enc_poll+0x38>
    g_state.encoders[i] = SPI4->DR & 0x3fff;
 800206e:	89b4      	ldrh	r4, [r6, #12]
 8002070:	f101 0250 	add.w	r2, r1, #80	; 0x50
void enc_poll()
{
  GPIOE->BSRRH = 1 << PORTE_ENC_CS; // assert (pull down) CS
  for (volatile int i = 0; i < 10; i++) { } // needs at least 350 ns
  SPI4->DR; // clear the rx data register in case it has some garbage
  for (int i = 0; i < NUM_ENC; i++)
 8002074:	3101      	adds	r1, #1
  {
    SPI4->DR = 0xffff; 
    while (!(SPI4->SR & SPI_SR_TXE)) { } // wait for buffer room
    while (!(SPI4->SR & SPI_SR_RXNE)) { }
    g_state.encoders[i] = SPI4->DR & 0x3fff;
 8002076:	f3c4 040d 	ubfx	r4, r4, #0, #14
void enc_poll()
{
  GPIOE->BSRRH = 1 << PORTE_ENC_CS; // assert (pull down) CS
  for (volatile int i = 0; i < 10; i++) { } // needs at least 350 ns
  SPI4->DR; // clear the rx data register in case it has some garbage
  for (int i = 0; i < NUM_ENC; i++)
 800207a:	2903      	cmp	r1, #3
  {
    SPI4->DR = 0xffff; 
    while (!(SPI4->SR & SPI_SR_TXE)) { } // wait for buffer room
    while (!(SPI4->SR & SPI_SR_RXNE)) { }
    g_state.encoders[i] = SPI4->DR & 0x3fff;
 800207c:	f830 7012 	ldrh.w	r7, [r0, r2, lsl #1]
 8002080:	f820 4012 	strh.w	r4, [r0, r2, lsl #1]
 8002084:	f04f 0200 	mov.w	r2, #0
void enc_poll()
{
  GPIOE->BSRRH = 1 << PORTE_ENC_CS; // assert (pull down) CS
  for (volatile int i = 0; i < 10; i++) { } // needs at least 350 ns
  SPI4->DR; // clear the rx data register in case it has some garbage
  for (int i = 0; i < NUM_ENC; i++)
 8002088:	d1ea      	bne.n	8002060 <enc_poll+0x30>
    SPI4->DR = 0xffff; 
    while (!(SPI4->SR & SPI_SR_TXE)) { } // wait for buffer room
    while (!(SPI4->SR & SPI_SR_RXNE)) { }
    g_state.encoders[i] = SPI4->DR & 0x3fff;
  }
  for (volatile int i = 0; i < 1; i++) { } // needs at least 50 ns
 800208a:	9201      	str	r2, [sp, #4]
 800208c:	9b01      	ldr	r3, [sp, #4]
 800208e:	4293      	cmp	r3, r2
 8002090:	dc05      	bgt.n	800209e <enc_poll+0x6e>
 8002092:	9b01      	ldr	r3, [sp, #4]
 8002094:	3301      	adds	r3, #1
 8002096:	9301      	str	r3, [sp, #4]
 8002098:	9b01      	ldr	r3, [sp, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	ddf9      	ble.n	8002092 <enc_poll+0x62>
  GPIOE->BSRRL = 1 << PORTE_ENC_CS; // de-assert (pull up) CS
 800209e:	4b03      	ldr	r3, [pc, #12]	; (80020ac <enc_poll+0x7c>)
 80020a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020a4:	831a      	strh	r2, [r3, #24]
  printf("       enc: %06d  %06d  %06d\r\n",
         g_state.encoders[0],
         g_state.encoders[1],
         g_state.encoders[2]);
  */
}
 80020a6:	b002      	add	sp, #8
 80020a8:	bcf0      	pop	{r4, r5, r6, r7}
 80020aa:	4770      	bx	lr
 80020ac:	40021000 	.word	0x40021000
 80020b0:	40013400 	.word	0x40013400
 80020b4:	2000fca0 	.word	0x2000fca0

080020b8 <enc_init>:
#define PORTE_ENC_SCLK 12
#define PORTE_ENC_MISO 13
#define PORTE_ENC_MOSI 14

void enc_init()
{
 80020b8:	b510      	push	{r4, lr}
  printf("enc_init()\r\n");
 80020ba:	4815      	ldr	r0, [pc, #84]	; (8002110 <enc_init+0x58>)
  RCC->APB2ENR |= RCC_APB2ENR_SPI4EN; // turn on SPI4

  pin_set_output(GPIOE, PORTE_ENC_CS);
 80020bc:	4c15      	ldr	r4, [pc, #84]	; (8002114 <enc_init+0x5c>)
#define PORTE_ENC_MISO 13
#define PORTE_ENC_MOSI 14

void enc_init()
{
  printf("enc_init()\r\n");
 80020be:	f000 f9c1 	bl	8002444 <puts>
  RCC->APB2ENR |= RCC_APB2ENR_SPI4EN; // turn on SPI4
 80020c2:	4b15      	ldr	r3, [pc, #84]	; (8002118 <enc_init+0x60>)
 80020c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020ca:	645a      	str	r2, [r3, #68]	; 0x44

  pin_set_output(GPIOE, PORTE_ENC_CS);
 80020cc:	4620      	mov	r0, r4
 80020ce:	210b      	movs	r1, #11
 80020d0:	f7ff ff92 	bl	8001ff8 <pin_set_output>
  pin_set_output_level(GPIOE, PORTE_ENC_CS, 1);
 80020d4:	4620      	mov	r0, r4
 80020d6:	210b      	movs	r1, #11
 80020d8:	2201      	movs	r2, #1
 80020da:	f7ff ff9d 	bl	8002018 <pin_set_output_level>
  pin_set_alternate_function(GPIOE, PORTE_ENC_SCLK, 5);
 80020de:	4620      	mov	r0, r4
 80020e0:	210c      	movs	r1, #12
 80020e2:	2205      	movs	r2, #5
 80020e4:	f7ff ff5c 	bl	8001fa0 <pin_set_alternate_function>
  pin_set_alternate_function(GPIOE, PORTE_ENC_MISO, 5);
 80020e8:	4620      	mov	r0, r4
 80020ea:	210d      	movs	r1, #13
 80020ec:	2205      	movs	r2, #5
 80020ee:	f7ff ff57 	bl	8001fa0 <pin_set_alternate_function>
  pin_set_alternate_function(GPIOE, PORTE_ENC_MOSI, 5);
 80020f2:	4620      	mov	r0, r4
 80020f4:	210e      	movs	r1, #14
 80020f6:	2205      	movs	r2, #5
 80020f8:	f7ff ff52 	bl	8001fa0 <pin_set_alternate_function>

  // spi4 is running from a 84 MHz pclk. set it up with 
  // sclk = pclk/128 to be super slow for now.
  SPI4->CR1 = SPI_CR1_DFF  | // 16-bit mode
 80020fc:	4b07      	ldr	r3, [pc, #28]	; (800211c <enc_init+0x64>)
 80020fe:	f640 3275 	movw	r2, #2933	; 0xb75
 8002102:	801a      	strh	r2, [r3, #0]
              SPI_CR1_CPHA | // cpha=1, cpol=0 for AS5048A
              SPI_CR1_SSM  | // software slave-select mode
              SPI_CR1_SSI  |
              SPI_CR1_SPE;

  enc_poll(); // first one will be garbage
 8002104:	f7ff ff94 	bl	8002030 <enc_poll>
  enc_poll(); // and the second one
}
 8002108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
              SPI_CR1_SSM  | // software slave-select mode
              SPI_CR1_SSI  |
              SPI_CR1_SPE;

  enc_poll(); // first one will be garbage
  enc_poll(); // and the second one
 800210c:	f7ff bf90 	b.w	8002030 <enc_poll>
 8002110:	0800915c 	.word	0x0800915c
 8002114:	40021000 	.word	0x40021000
 8002118:	40023800 	.word	0x40023800
 800211c:	40013400 	.word	0x40013400

08002120 <state_init>:

volatile state_t g_state;

void state_init()
{
  g_state.header[0] = 0x01; // version number of this state format
 8002120:	4a10      	ldr	r2, [pc, #64]	; (8002164 <state_init+0x44>)
  g_state.header[1] = 0x00; // pad 3 bytes so we get 32 bit alignment next
 8002122:	2000      	movs	r0, #0

volatile state_t g_state;

void state_init()
{
  g_state.header[0] = 0x01; // version number of this state format
 8002124:	2101      	movs	r1, #1
#include "state.h"

volatile state_t g_state;

void state_init()
{
 8002126:	b410      	push	{r4}
  g_state.header[0] = 0x01; // version number of this state format
  g_state.header[1] = 0x00; // pad 3 bytes so we get 32 bit alignment next
  g_state.header[2] = 0x00; // ditto
  g_state.header[3] = 0x00; // ditto
  g_state.systime = 0;
  for (uint_fast8_t i = 0; i < NUM_SENSORS; i++)
 8002128:	4603      	mov	r3, r0

volatile state_t g_state;

void state_init()
{
  g_state.header[0] = 0x01; // version number of this state format
 800212a:	7011      	strb	r1, [r2, #0]
  g_state.header[1] = 0x00; // pad 3 bytes so we get 32 bit alignment next
 800212c:	7050      	strb	r0, [r2, #1]
  g_state.header[2] = 0x00; // ditto
  g_state.header[3] = 0x00; // ditto
  g_state.systime = 0;
  for (uint_fast8_t i = 0; i < NUM_SENSORS; i++)
    g_state.tactile_pressures[i] = g_state.tactile_temperatures[i] = 0;
 800212e:	4601      	mov	r1, r0

void state_init()
{
  g_state.header[0] = 0x01; // version number of this state format
  g_state.header[1] = 0x00; // pad 3 bytes so we get 32 bit alignment next
  g_state.header[2] = 0x00; // ditto
 8002130:	7090      	strb	r0, [r2, #2]
  g_state.header[3] = 0x00; // ditto
 8002132:	70d0      	strb	r0, [r2, #3]
  g_state.systime = 0;
 8002134:	6050      	str	r0, [r2, #4]
  for (uint_fast8_t i = 0; i < NUM_SENSORS; i++)
    g_state.tactile_pressures[i] = g_state.tactile_temperatures[i] = 0;
 8002136:	f103 0428 	add.w	r4, r3, #40	; 0x28
 800213a:	1d18      	adds	r0, r3, #4
 800213c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
  g_state.header[0] = 0x01; // version number of this state format
  g_state.header[1] = 0x00; // pad 3 bytes so we get 32 bit alignment next
  g_state.header[2] = 0x00; // ditto
  g_state.header[3] = 0x00; // ditto
  g_state.systime = 0;
  for (uint_fast8_t i = 0; i < NUM_SENSORS; i++)
 8002140:	3301      	adds	r3, #1
 8002142:	2b26      	cmp	r3, #38	; 0x26
    g_state.tactile_pressures[i] = g_state.tactile_temperatures[i] = 0;
 8002144:	80a1      	strh	r1, [r4, #4]
 8002146:	f822 1010 	strh.w	r1, [r2, r0, lsl #1]
 800214a:	4c06      	ldr	r4, [pc, #24]	; (8002164 <state_init+0x44>)
 800214c:	f04f 0000 	mov.w	r0, #0
  g_state.header[0] = 0x01; // version number of this state format
  g_state.header[1] = 0x00; // pad 3 bytes so we get 32 bit alignment next
  g_state.header[2] = 0x00; // ditto
  g_state.header[3] = 0x00; // ditto
  g_state.systime = 0;
  for (uint_fast8_t i = 0; i < NUM_SENSORS; i++)
 8002150:	d1f1      	bne.n	8002136 <state_init+0x16>
    g_state.tactile_pressures[i] = g_state.tactile_temperatures[i] = 0;
  for (uint_fast8_t i = 0; i < NUM_ENC; i++)
    g_state.encoders[i] = 0;
 8002152:	f8a4 00a0 	strh.w	r0, [r4, #160]	; 0xa0
 8002156:	f8a4 00a2 	strh.w	r0, [r4, #162]	; 0xa2
 800215a:	f8a4 00a4 	strh.w	r0, [r4, #164]	; 0xa4
}
 800215e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002162:	4770      	bx	lr
 8002164:	2000fca0 	.word	0x2000fca0

08002168 <exit>:
 8002168:	b508      	push	{r3, lr}
 800216a:	2100      	movs	r1, #0
 800216c:	4604      	mov	r4, r0
 800216e:	f001 fcf7 	bl	8003b60 <__call_exitprocs>
 8002172:	4b04      	ldr	r3, [pc, #16]	; (8002184 <exit+0x1c>)
 8002174:	6818      	ldr	r0, [r3, #0]
 8002176:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002178:	b103      	cbz	r3, 800217c <exit+0x14>
 800217a:	4798      	blx	r3
 800217c:	4620      	mov	r0, r4
 800217e:	f7fe fb33 	bl	80007e8 <_exit>
 8002182:	bf00      	nop
 8002184:	0800916c 	.word	0x0800916c

08002188 <__libc_init_array>:
 8002188:	b570      	push	{r4, r5, r6, lr}
 800218a:	4e0f      	ldr	r6, [pc, #60]	; (80021c8 <__libc_init_array+0x40>)
 800218c:	4d0f      	ldr	r5, [pc, #60]	; (80021cc <__libc_init_array+0x44>)
 800218e:	1b76      	subs	r6, r6, r5
 8002190:	10b6      	asrs	r6, r6, #2
 8002192:	d007      	beq.n	80021a4 <__libc_init_array+0x1c>
 8002194:	3d04      	subs	r5, #4
 8002196:	2400      	movs	r4, #0
 8002198:	3401      	adds	r4, #1
 800219a:	f855 3f04 	ldr.w	r3, [r5, #4]!
 800219e:	4798      	blx	r3
 80021a0:	42a6      	cmp	r6, r4
 80021a2:	d1f9      	bne.n	8002198 <__libc_init_array+0x10>
 80021a4:	4e0a      	ldr	r6, [pc, #40]	; (80021d0 <__libc_init_array+0x48>)
 80021a6:	4d0b      	ldr	r5, [pc, #44]	; (80021d4 <__libc_init_array+0x4c>)
 80021a8:	1b76      	subs	r6, r6, r5
 80021aa:	f007 f8c5 	bl	8009338 <_init>
 80021ae:	10b6      	asrs	r6, r6, #2
 80021b0:	d008      	beq.n	80021c4 <__libc_init_array+0x3c>
 80021b2:	3d04      	subs	r5, #4
 80021b4:	2400      	movs	r4, #0
 80021b6:	3401      	adds	r4, #1
 80021b8:	f855 3f04 	ldr.w	r3, [r5, #4]!
 80021bc:	4798      	blx	r3
 80021be:	42a6      	cmp	r6, r4
 80021c0:	d1f9      	bne.n	80021b6 <__libc_init_array+0x2e>
 80021c2:	bd70      	pop	{r4, r5, r6, pc}
 80021c4:	bd70      	pop	{r4, r5, r6, pc}
 80021c6:	bf00      	nop
 80021c8:	08009344 	.word	0x08009344
 80021cc:	08009344 	.word	0x08009344
 80021d0:	0800934c 	.word	0x0800934c
 80021d4:	08009344 	.word	0x08009344

080021d8 <memcpy>:
 80021d8:	4684      	mov	ip, r0
 80021da:	ea41 0300 	orr.w	r3, r1, r0
 80021de:	f013 0303 	ands.w	r3, r3, #3
 80021e2:	d16d      	bne.n	80022c0 <memcpy+0xe8>
 80021e4:	3a40      	subs	r2, #64	; 0x40
 80021e6:	d341      	bcc.n	800226c <memcpy+0x94>
 80021e8:	f851 3b04 	ldr.w	r3, [r1], #4
 80021ec:	f840 3b04 	str.w	r3, [r0], #4
 80021f0:	f851 3b04 	ldr.w	r3, [r1], #4
 80021f4:	f840 3b04 	str.w	r3, [r0], #4
 80021f8:	f851 3b04 	ldr.w	r3, [r1], #4
 80021fc:	f840 3b04 	str.w	r3, [r0], #4
 8002200:	f851 3b04 	ldr.w	r3, [r1], #4
 8002204:	f840 3b04 	str.w	r3, [r0], #4
 8002208:	f851 3b04 	ldr.w	r3, [r1], #4
 800220c:	f840 3b04 	str.w	r3, [r0], #4
 8002210:	f851 3b04 	ldr.w	r3, [r1], #4
 8002214:	f840 3b04 	str.w	r3, [r0], #4
 8002218:	f851 3b04 	ldr.w	r3, [r1], #4
 800221c:	f840 3b04 	str.w	r3, [r0], #4
 8002220:	f851 3b04 	ldr.w	r3, [r1], #4
 8002224:	f840 3b04 	str.w	r3, [r0], #4
 8002228:	f851 3b04 	ldr.w	r3, [r1], #4
 800222c:	f840 3b04 	str.w	r3, [r0], #4
 8002230:	f851 3b04 	ldr.w	r3, [r1], #4
 8002234:	f840 3b04 	str.w	r3, [r0], #4
 8002238:	f851 3b04 	ldr.w	r3, [r1], #4
 800223c:	f840 3b04 	str.w	r3, [r0], #4
 8002240:	f851 3b04 	ldr.w	r3, [r1], #4
 8002244:	f840 3b04 	str.w	r3, [r0], #4
 8002248:	f851 3b04 	ldr.w	r3, [r1], #4
 800224c:	f840 3b04 	str.w	r3, [r0], #4
 8002250:	f851 3b04 	ldr.w	r3, [r1], #4
 8002254:	f840 3b04 	str.w	r3, [r0], #4
 8002258:	f851 3b04 	ldr.w	r3, [r1], #4
 800225c:	f840 3b04 	str.w	r3, [r0], #4
 8002260:	f851 3b04 	ldr.w	r3, [r1], #4
 8002264:	f840 3b04 	str.w	r3, [r0], #4
 8002268:	3a40      	subs	r2, #64	; 0x40
 800226a:	d2bd      	bcs.n	80021e8 <memcpy+0x10>
 800226c:	3230      	adds	r2, #48	; 0x30
 800226e:	d311      	bcc.n	8002294 <memcpy+0xbc>
 8002270:	f851 3b04 	ldr.w	r3, [r1], #4
 8002274:	f840 3b04 	str.w	r3, [r0], #4
 8002278:	f851 3b04 	ldr.w	r3, [r1], #4
 800227c:	f840 3b04 	str.w	r3, [r0], #4
 8002280:	f851 3b04 	ldr.w	r3, [r1], #4
 8002284:	f840 3b04 	str.w	r3, [r0], #4
 8002288:	f851 3b04 	ldr.w	r3, [r1], #4
 800228c:	f840 3b04 	str.w	r3, [r0], #4
 8002290:	3a10      	subs	r2, #16
 8002292:	d2ed      	bcs.n	8002270 <memcpy+0x98>
 8002294:	320c      	adds	r2, #12
 8002296:	d305      	bcc.n	80022a4 <memcpy+0xcc>
 8002298:	f851 3b04 	ldr.w	r3, [r1], #4
 800229c:	f840 3b04 	str.w	r3, [r0], #4
 80022a0:	3a04      	subs	r2, #4
 80022a2:	d2f9      	bcs.n	8002298 <memcpy+0xc0>
 80022a4:	3204      	adds	r2, #4
 80022a6:	d008      	beq.n	80022ba <memcpy+0xe2>
 80022a8:	07d2      	lsls	r2, r2, #31
 80022aa:	bf1c      	itt	ne
 80022ac:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80022b0:	f800 3b01 	strbne.w	r3, [r0], #1
 80022b4:	d301      	bcc.n	80022ba <memcpy+0xe2>
 80022b6:	880b      	ldrh	r3, [r1, #0]
 80022b8:	8003      	strh	r3, [r0, #0]
 80022ba:	4660      	mov	r0, ip
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	2a08      	cmp	r2, #8
 80022c2:	d313      	bcc.n	80022ec <memcpy+0x114>
 80022c4:	078b      	lsls	r3, r1, #30
 80022c6:	d08d      	beq.n	80021e4 <memcpy+0xc>
 80022c8:	f010 0303 	ands.w	r3, r0, #3
 80022cc:	d08a      	beq.n	80021e4 <memcpy+0xc>
 80022ce:	f1c3 0304 	rsb	r3, r3, #4
 80022d2:	1ad2      	subs	r2, r2, r3
 80022d4:	07db      	lsls	r3, r3, #31
 80022d6:	bf1c      	itt	ne
 80022d8:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80022dc:	f800 3b01 	strbne.w	r3, [r0], #1
 80022e0:	d380      	bcc.n	80021e4 <memcpy+0xc>
 80022e2:	f831 3b02 	ldrh.w	r3, [r1], #2
 80022e6:	f820 3b02 	strh.w	r3, [r0], #2
 80022ea:	e77b      	b.n	80021e4 <memcpy+0xc>
 80022ec:	3a04      	subs	r2, #4
 80022ee:	d3d9      	bcc.n	80022a4 <memcpy+0xcc>
 80022f0:	3a01      	subs	r2, #1
 80022f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80022f6:	f800 3b01 	strb.w	r3, [r0], #1
 80022fa:	d2f9      	bcs.n	80022f0 <memcpy+0x118>
 80022fc:	780b      	ldrb	r3, [r1, #0]
 80022fe:	7003      	strb	r3, [r0, #0]
 8002300:	784b      	ldrb	r3, [r1, #1]
 8002302:	7043      	strb	r3, [r0, #1]
 8002304:	788b      	ldrb	r3, [r1, #2]
 8002306:	7083      	strb	r3, [r0, #2]
 8002308:	4660      	mov	r0, ip
 800230a:	4770      	bx	lr

0800230c <memset>:
 800230c:	b4f0      	push	{r4, r5, r6, r7}
 800230e:	0784      	lsls	r4, r0, #30
 8002310:	d043      	beq.n	800239a <memset+0x8e>
 8002312:	1e54      	subs	r4, r2, #1
 8002314:	2a00      	cmp	r2, #0
 8002316:	d03e      	beq.n	8002396 <memset+0x8a>
 8002318:	b2cd      	uxtb	r5, r1
 800231a:	4603      	mov	r3, r0
 800231c:	e003      	b.n	8002326 <memset+0x1a>
 800231e:	1e62      	subs	r2, r4, #1
 8002320:	2c00      	cmp	r4, #0
 8002322:	d038      	beq.n	8002396 <memset+0x8a>
 8002324:	4614      	mov	r4, r2
 8002326:	f803 5b01 	strb.w	r5, [r3], #1
 800232a:	079a      	lsls	r2, r3, #30
 800232c:	d1f7      	bne.n	800231e <memset+0x12>
 800232e:	2c03      	cmp	r4, #3
 8002330:	d92a      	bls.n	8002388 <memset+0x7c>
 8002332:	b2cd      	uxtb	r5, r1
 8002334:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8002338:	2c0f      	cmp	r4, #15
 800233a:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 800233e:	d915      	bls.n	800236c <memset+0x60>
 8002340:	f1a4 0710 	sub.w	r7, r4, #16
 8002344:	093f      	lsrs	r7, r7, #4
 8002346:	f103 0610 	add.w	r6, r3, #16
 800234a:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 800234e:	461a      	mov	r2, r3
 8002350:	6015      	str	r5, [r2, #0]
 8002352:	6055      	str	r5, [r2, #4]
 8002354:	6095      	str	r5, [r2, #8]
 8002356:	60d5      	str	r5, [r2, #12]
 8002358:	3210      	adds	r2, #16
 800235a:	42b2      	cmp	r2, r6
 800235c:	d1f8      	bne.n	8002350 <memset+0x44>
 800235e:	f004 040f 	and.w	r4, r4, #15
 8002362:	3701      	adds	r7, #1
 8002364:	2c03      	cmp	r4, #3
 8002366:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 800236a:	d90d      	bls.n	8002388 <memset+0x7c>
 800236c:	461e      	mov	r6, r3
 800236e:	4622      	mov	r2, r4
 8002370:	3a04      	subs	r2, #4
 8002372:	2a03      	cmp	r2, #3
 8002374:	f846 5b04 	str.w	r5, [r6], #4
 8002378:	d8fa      	bhi.n	8002370 <memset+0x64>
 800237a:	1f22      	subs	r2, r4, #4
 800237c:	f022 0203 	bic.w	r2, r2, #3
 8002380:	3204      	adds	r2, #4
 8002382:	4413      	add	r3, r2
 8002384:	f004 0403 	and.w	r4, r4, #3
 8002388:	b12c      	cbz	r4, 8002396 <memset+0x8a>
 800238a:	b2c9      	uxtb	r1, r1
 800238c:	441c      	add	r4, r3
 800238e:	f803 1b01 	strb.w	r1, [r3], #1
 8002392:	42a3      	cmp	r3, r4
 8002394:	d1fb      	bne.n	800238e <memset+0x82>
 8002396:	bcf0      	pop	{r4, r5, r6, r7}
 8002398:	4770      	bx	lr
 800239a:	4614      	mov	r4, r2
 800239c:	4603      	mov	r3, r0
 800239e:	e7c6      	b.n	800232e <memset+0x22>

080023a0 <_printf_r>:
 80023a0:	b40e      	push	{r1, r2, r3}
 80023a2:	b500      	push	{lr}
 80023a4:	b082      	sub	sp, #8
 80023a6:	ab03      	add	r3, sp, #12
 80023a8:	6881      	ldr	r1, [r0, #8]
 80023aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80023ae:	9301      	str	r3, [sp, #4]
 80023b0:	f000 f882 	bl	80024b8 <_vfprintf_r>
 80023b4:	b002      	add	sp, #8
 80023b6:	f85d eb04 	ldr.w	lr, [sp], #4
 80023ba:	b003      	add	sp, #12
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop

080023c0 <printf>:
 80023c0:	b40f      	push	{r0, r1, r2, r3}
 80023c2:	b500      	push	{lr}
 80023c4:	4a07      	ldr	r2, [pc, #28]	; (80023e4 <printf+0x24>)
 80023c6:	b083      	sub	sp, #12
 80023c8:	ab04      	add	r3, sp, #16
 80023ca:	6810      	ldr	r0, [r2, #0]
 80023cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80023d0:	6881      	ldr	r1, [r0, #8]
 80023d2:	9301      	str	r3, [sp, #4]
 80023d4:	f000 f870 	bl	80024b8 <_vfprintf_r>
 80023d8:	b003      	add	sp, #12
 80023da:	f85d eb04 	ldr.w	lr, [sp], #4
 80023de:	b004      	add	sp, #16
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	20000498 	.word	0x20000498

080023e8 <_puts_r>:
 80023e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ea:	4604      	mov	r4, r0
 80023ec:	b089      	sub	sp, #36	; 0x24
 80023ee:	4608      	mov	r0, r1
 80023f0:	460d      	mov	r5, r1
 80023f2:	f000 f82f 	bl	8002454 <strlen>
 80023f6:	68a3      	ldr	r3, [r4, #8]
 80023f8:	4f11      	ldr	r7, [pc, #68]	; (8002440 <_puts_r+0x58>)
 80023fa:	899a      	ldrh	r2, [r3, #12]
 80023fc:	9504      	str	r5, [sp, #16]
 80023fe:	2102      	movs	r1, #2
 8002400:	f100 0e01 	add.w	lr, r0, #1
 8002404:	2601      	movs	r6, #1
 8002406:	ad04      	add	r5, sp, #16
 8002408:	9102      	str	r1, [sp, #8]
 800240a:	0491      	lsls	r1, r2, #18
 800240c:	9005      	str	r0, [sp, #20]
 800240e:	f8cd e00c 	str.w	lr, [sp, #12]
 8002412:	9706      	str	r7, [sp, #24]
 8002414:	9607      	str	r6, [sp, #28]
 8002416:	9501      	str	r5, [sp, #4]
 8002418:	d406      	bmi.n	8002428 <_puts_r+0x40>
 800241a:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800241c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002420:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8002424:	819a      	strh	r2, [r3, #12]
 8002426:	6659      	str	r1, [r3, #100]	; 0x64
 8002428:	4620      	mov	r0, r4
 800242a:	4619      	mov	r1, r3
 800242c:	aa01      	add	r2, sp, #4
 800242e:	f002 fee9 	bl	8005204 <__sfvwrite_r>
 8002432:	2800      	cmp	r0, #0
 8002434:	bf0c      	ite	eq
 8002436:	200a      	moveq	r0, #10
 8002438:	f04f 30ff 	movne.w	r0, #4294967295
 800243c:	b009      	add	sp, #36	; 0x24
 800243e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002440:	08009158 	.word	0x08009158

08002444 <puts>:
 8002444:	4b02      	ldr	r3, [pc, #8]	; (8002450 <puts+0xc>)
 8002446:	4601      	mov	r1, r0
 8002448:	6818      	ldr	r0, [r3, #0]
 800244a:	f7ff bfcd 	b.w	80023e8 <_puts_r>
 800244e:	bf00      	nop
 8002450:	20000498 	.word	0x20000498

08002454 <strlen>:
 8002454:	f020 0103 	bic.w	r1, r0, #3
 8002458:	f010 0003 	ands.w	r0, r0, #3
 800245c:	f1c0 0000 	rsb	r0, r0, #0
 8002460:	f851 3b04 	ldr.w	r3, [r1], #4
 8002464:	f100 0c04 	add.w	ip, r0, #4
 8002468:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800246c:	f06f 0200 	mvn.w	r2, #0
 8002470:	bf1c      	itt	ne
 8002472:	fa22 f20c 	lsrne.w	r2, r2, ip
 8002476:	4313      	orrne	r3, r2
 8002478:	f04f 0c01 	mov.w	ip, #1
 800247c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 8002480:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 8002484:	eba3 020c 	sub.w	r2, r3, ip
 8002488:	ea22 0203 	bic.w	r2, r2, r3
 800248c:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 8002490:	bf04      	itt	eq
 8002492:	f851 3b04 	ldreq.w	r3, [r1], #4
 8002496:	3004      	addeq	r0, #4
 8002498:	d0f4      	beq.n	8002484 <strlen+0x30>
 800249a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800249e:	bf1f      	itttt	ne
 80024a0:	3001      	addne	r0, #1
 80024a2:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
 80024a6:	3001      	addne	r0, #1
 80024a8:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
 80024ac:	bf18      	it	ne
 80024ae:	3001      	addne	r0, #1
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	0000      	movs	r0, r0
	...

080024b8 <_vfprintf_r>:
 80024b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024bc:	b0c5      	sub	sp, #276	; 0x114
 80024be:	461c      	mov	r4, r3
 80024c0:	4689      	mov	r9, r1
 80024c2:	9206      	str	r2, [sp, #24]
 80024c4:	9009      	str	r0, [sp, #36]	; 0x24
 80024c6:	f003 f8a5 	bl	8005614 <_localeconv_r>
 80024ca:	6800      	ldr	r0, [r0, #0]
 80024cc:	9011      	str	r0, [sp, #68]	; 0x44
 80024ce:	f7ff ffc1 	bl	8002454 <strlen>
 80024d2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80024d4:	9014      	str	r0, [sp, #80]	; 0x50
 80024d6:	940b      	str	r4, [sp, #44]	; 0x2c
 80024d8:	b11d      	cbz	r5, 80024e2 <_vfprintf_r+0x2a>
 80024da:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f000 810b 	beq.w	80026f8 <_vfprintf_r+0x240>
 80024e2:	f8b9 200c 	ldrh.w	r2, [r9, #12]
 80024e6:	b293      	uxth	r3, r2
 80024e8:	0499      	lsls	r1, r3, #18
 80024ea:	d40a      	bmi.n	8002502 <_vfprintf_r+0x4a>
 80024ec:	f8d9 1064 	ldr.w	r1, [r9, #100]	; 0x64
 80024f0:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
 80024f4:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 80024f8:	f8a9 300c 	strh.w	r3, [r9, #12]
 80024fc:	f8c9 1064 	str.w	r1, [r9, #100]	; 0x64
 8002500:	b29b      	uxth	r3, r3
 8002502:	071a      	lsls	r2, r3, #28
 8002504:	f140 80c2 	bpl.w	800268c <_vfprintf_r+0x1d4>
 8002508:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800250c:	2a00      	cmp	r2, #0
 800250e:	f000 80bd 	beq.w	800268c <_vfprintf_r+0x1d4>
 8002512:	f003 031a 	and.w	r3, r3, #26
 8002516:	2b0a      	cmp	r3, #10
 8002518:	f000 80c4 	beq.w	80026a4 <_vfprintf_r+0x1ec>
 800251c:	ed9f 7b7a 	vldr	d7, [pc, #488]	; 8002708 <_vfprintf_r+0x250>
 8002520:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 8002524:	2300      	movs	r3, #0
 8002526:	ac34      	add	r4, sp, #208	; 0xd0
 8002528:	930d      	str	r3, [sp, #52]	; 0x34
 800252a:	9404      	str	r4, [sp, #16]
 800252c:	9329      	str	r3, [sp, #164]	; 0xa4
 800252e:	9328      	str	r3, [sp, #160]	; 0xa0
 8002530:	9316      	str	r3, [sp, #88]	; 0x58
 8002532:	9315      	str	r3, [sp, #84]	; 0x54
 8002534:	930c      	str	r3, [sp, #48]	; 0x30
 8002536:	9427      	str	r4, [sp, #156]	; 0x9c
 8002538:	4626      	mov	r6, r4
 800253a:	f8dd c018 	ldr.w	ip, [sp, #24]
 800253e:	f89c 3000 	ldrb.w	r3, [ip]
 8002542:	2b00      	cmp	r3, #0
 8002544:	f000 80dc 	beq.w	8002700 <_vfprintf_r+0x248>
 8002548:	2b25      	cmp	r3, #37	; 0x25
 800254a:	f000 80d9 	beq.w	8002700 <_vfprintf_r+0x248>
 800254e:	f10c 0201 	add.w	r2, ip, #1
 8002552:	e002      	b.n	800255a <_vfprintf_r+0xa2>
 8002554:	2b25      	cmp	r3, #37	; 0x25
 8002556:	f000 808b 	beq.w	8002670 <_vfprintf_r+0x1b8>
 800255a:	4614      	mov	r4, r2
 800255c:	3201      	adds	r2, #1
 800255e:	7823      	ldrb	r3, [r4, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d1f7      	bne.n	8002554 <_vfprintf_r+0x9c>
 8002564:	9806      	ldr	r0, [sp, #24]
 8002566:	1a25      	subs	r5, r4, r0
 8002568:	b17d      	cbz	r5, 800258a <_vfprintf_r+0xd2>
 800256a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800256c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800256e:	9806      	ldr	r0, [sp, #24]
 8002570:	6030      	str	r0, [r6, #0]
 8002572:	3301      	adds	r3, #1
 8002574:	442a      	add	r2, r5
 8002576:	2b07      	cmp	r3, #7
 8002578:	6075      	str	r5, [r6, #4]
 800257a:	9229      	str	r2, [sp, #164]	; 0xa4
 800257c:	9328      	str	r3, [sp, #160]	; 0xa0
 800257e:	f300 80a4 	bgt.w	80026ca <_vfprintf_r+0x212>
 8002582:	3608      	adds	r6, #8
 8002584:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002586:	4429      	add	r1, r5
 8002588:	910c      	str	r1, [sp, #48]	; 0x30
 800258a:	7823      	ldrb	r3, [r4, #0]
 800258c:	2b00      	cmp	r3, #0
 800258e:	f000 80a4 	beq.w	80026da <_vfprintf_r+0x222>
 8002592:	2300      	movs	r3, #0
 8002594:	1c65      	adds	r5, r4, #1
 8002596:	f894 8001 	ldrb.w	r8, [r4, #1]
 800259a:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 800259e:	f04f 34ff 	mov.w	r4, #4294967295
 80025a2:	461a      	mov	r2, r3
 80025a4:	930a      	str	r3, [sp, #40]	; 0x28
 80025a6:	9305      	str	r3, [sp, #20]
 80025a8:	9506      	str	r5, [sp, #24]
 80025aa:	9407      	str	r4, [sp, #28]
 80025ac:	462b      	mov	r3, r5
 80025ae:	3301      	adds	r3, #1
 80025b0:	f1a8 0120 	sub.w	r1, r8, #32
 80025b4:	2958      	cmp	r1, #88	; 0x58
 80025b6:	f200 83fe 	bhi.w	8002db6 <_vfprintf_r+0x8fe>
 80025ba:	e8df f011 	tbh	[pc, r1, lsl #1]
 80025be:	023d      	.short	0x023d
 80025c0:	03fc03fc 	.word	0x03fc03fc
 80025c4:	03fc0309 	.word	0x03fc0309
 80025c8:	03fc03fc 	.word	0x03fc03fc
 80025cc:	03fc03fc 	.word	0x03fc03fc
 80025d0:	024403fc 	.word	0x024403fc
 80025d4:	03fc0239 	.word	0x03fc0239
 80025d8:	033b0060 	.word	0x033b0060
 80025dc:	037b03fc 	.word	0x037b03fc
 80025e0:	03820382 	.word	0x03820382
 80025e4:	03820382 	.word	0x03820382
 80025e8:	03820382 	.word	0x03820382
 80025ec:	03820382 	.word	0x03820382
 80025f0:	03fc0382 	.word	0x03fc0382
 80025f4:	03fc03fc 	.word	0x03fc03fc
 80025f8:	03fc03fc 	.word	0x03fc03fc
 80025fc:	03fc03fc 	.word	0x03fc03fc
 8002600:	03fc03fc 	.word	0x03fc03fc
 8002604:	035903fc 	.word	0x035903fc
 8002608:	03fc03a3 	.word	0x03fc03a3
 800260c:	03fc03a3 	.word	0x03fc03a3
 8002610:	03fc03fc 	.word	0x03fc03fc
 8002614:	039303fc 	.word	0x039303fc
 8002618:	03fc03fc 	.word	0x03fc03fc
 800261c:	03fc03da 	.word	0x03fc03da
 8002620:	03fc03fc 	.word	0x03fc03fc
 8002624:	03fc03fc 	.word	0x03fc03fc
 8002628:	03fc02a9 	.word	0x03fc02a9
 800262c:	02c903fc 	.word	0x02c903fc
 8002630:	03fc03fc 	.word	0x03fc03fc
 8002634:	03fc03fc 	.word	0x03fc03fc
 8002638:	03fc03fc 	.word	0x03fc03fc
 800263c:	03fc03fc 	.word	0x03fc03fc
 8002640:	03fc03fc 	.word	0x03fc03fc
 8002644:	03220310 	.word	0x03220310
 8002648:	03a303a3 	.word	0x03a303a3
 800264c:	02df03a3 	.word	0x02df03a3
 8002650:	03fc0322 	.word	0x03fc0322
 8002654:	02e803fc 	.word	0x02e803fc
 8002658:	02f403fc 	.word	0x02f403fc
 800265c:	02220210 	.word	0x02220210
 8002660:	03fc0251 	.word	0x03fc0251
 8002664:	03fc025a 	.word	0x03fc025a
 8002668:	03fc00a9 	.word	0x03fc00a9
 800266c:	028103fc 	.word	0x028103fc
 8002670:	9906      	ldr	r1, [sp, #24]
 8002672:	1a65      	subs	r5, r4, r1
 8002674:	e778      	b.n	8002568 <_vfprintf_r+0xb0>
 8002676:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8002678:	910b      	str	r1, [sp, #44]	; 0x2c
 800267a:	4264      	negs	r4, r4
 800267c:	940a      	str	r4, [sp, #40]	; 0x28
 800267e:	9d05      	ldr	r5, [sp, #20]
 8002680:	f045 0504 	orr.w	r5, r5, #4
 8002684:	9505      	str	r5, [sp, #20]
 8002686:	f893 8000 	ldrb.w	r8, [r3]
 800268a:	e790      	b.n	80025ae <_vfprintf_r+0xf6>
 800268c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800268e:	4649      	mov	r1, r9
 8002690:	f001 f9fa 	bl	8003a88 <__swsetup_r>
 8002694:	b9a0      	cbnz	r0, 80026c0 <_vfprintf_r+0x208>
 8002696:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800269a:	f003 031a 	and.w	r3, r3, #26
 800269e:	2b0a      	cmp	r3, #10
 80026a0:	f47f af3c 	bne.w	800251c <_vfprintf_r+0x64>
 80026a4:	f9b9 300e 	ldrsh.w	r3, [r9, #14]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f6ff af37 	blt.w	800251c <_vfprintf_r+0x64>
 80026ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80026b0:	9a06      	ldr	r2, [sp, #24]
 80026b2:	4649      	mov	r1, r9
 80026b4:	4623      	mov	r3, r4
 80026b6:	f001 f9ab 	bl	8003a10 <__sbprintf>
 80026ba:	b045      	add	sp, #276	; 0x114
 80026bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026c0:	f04f 30ff 	mov.w	r0, #4294967295
 80026c4:	b045      	add	sp, #276	; 0x114
 80026c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 80026cc:	4649      	mov	r1, r9
 80026ce:	aa27      	add	r2, sp, #156	; 0x9c
 80026d0:	f004 fb86 	bl	8006de0 <__sprint_r>
 80026d4:	b940      	cbnz	r0, 80026e8 <_vfprintf_r+0x230>
 80026d6:	ae34      	add	r6, sp, #208	; 0xd0
 80026d8:	e754      	b.n	8002584 <_vfprintf_r+0xcc>
 80026da:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80026dc:	b123      	cbz	r3, 80026e8 <_vfprintf_r+0x230>
 80026de:	9809      	ldr	r0, [sp, #36]	; 0x24
 80026e0:	4649      	mov	r1, r9
 80026e2:	aa27      	add	r2, sp, #156	; 0x9c
 80026e4:	f004 fb7c 	bl	8006de0 <__sprint_r>
 80026e8:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80026ec:	065b      	lsls	r3, r3, #25
 80026ee:	d4e7      	bmi.n	80026c0 <_vfprintf_r+0x208>
 80026f0:	980c      	ldr	r0, [sp, #48]	; 0x30
 80026f2:	b045      	add	sp, #276	; 0x114
 80026f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026f8:	4628      	mov	r0, r5
 80026fa:	f002 fb73 	bl	8004de4 <__sinit>
 80026fe:	e6f0      	b.n	80024e2 <_vfprintf_r+0x2a>
 8002700:	9c06      	ldr	r4, [sp, #24]
 8002702:	e742      	b.n	800258a <_vfprintf_r+0xd2>
 8002704:	f3af 8000 	nop.w
	...
 8002710:	9c05      	ldr	r4, [sp, #20]
 8002712:	9306      	str	r3, [sp, #24]
 8002714:	06a2      	lsls	r2, r4, #26
 8002716:	f140 8206 	bpl.w	8002b26 <_vfprintf_r+0x66e>
 800271a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800271c:	1deb      	adds	r3, r5, #7
 800271e:	f023 0307 	bic.w	r3, r3, #7
 8002722:	f103 0c08 	add.w	ip, r3, #8
 8002726:	e9d3 4500 	ldrd	r4, r5, [r3]
 800272a:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 800272e:	2301      	movs	r3, #1
 8002730:	f04f 0a00 	mov.w	sl, #0
 8002734:	f88d a07f 	strb.w	sl, [sp, #127]	; 0x7f
 8002738:	9907      	ldr	r1, [sp, #28]
 800273a:	2900      	cmp	r1, #0
 800273c:	db05      	blt.n	800274a <_vfprintf_r+0x292>
 800273e:	f8dd c014 	ldr.w	ip, [sp, #20]
 8002742:	f02c 0c80 	bic.w	ip, ip, #128	; 0x80
 8002746:	f8cd c014 	str.w	ip, [sp, #20]
 800274a:	ea54 0005 	orrs.w	r0, r4, r5
 800274e:	f040 834b 	bne.w	8002de8 <_vfprintf_r+0x930>
 8002752:	9907      	ldr	r1, [sp, #28]
 8002754:	2900      	cmp	r1, #0
 8002756:	f040 8347 	bne.w	8002de8 <_vfprintf_r+0x930>
 800275a:	2b00      	cmp	r3, #0
 800275c:	f040 84bd 	bne.w	80030da <_vfprintf_r+0xc22>
 8002760:	f8dd c014 	ldr.w	ip, [sp, #20]
 8002764:	f01c 0f01 	tst.w	ip, #1
 8002768:	f000 84b7 	beq.w	80030da <_vfprintf_r+0xc22>
 800276c:	af44      	add	r7, sp, #272	; 0x110
 800276e:	2330      	movs	r3, #48	; 0x30
 8002770:	f807 3d41 	strb.w	r3, [r7, #-65]!
 8002774:	9d04      	ldr	r5, [sp, #16]
 8002776:	1bec      	subs	r4, r5, r7
 8002778:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800277c:	2500      	movs	r5, #0
 800277e:	4564      	cmp	r4, ip
 8002780:	bfa8      	it	ge
 8002782:	46a4      	movge	ip, r4
 8002784:	f8cd c020 	str.w	ip, [sp, #32]
 8002788:	9510      	str	r5, [sp, #64]	; 0x40
 800278a:	f1ba 0f00 	cmp.w	sl, #0
 800278e:	d002      	beq.n	8002796 <_vfprintf_r+0x2de>
 8002790:	9d08      	ldr	r5, [sp, #32]
 8002792:	3501      	adds	r5, #1
 8002794:	9508      	str	r5, [sp, #32]
 8002796:	9b05      	ldr	r3, [sp, #20]
 8002798:	f013 0302 	ands.w	r3, r3, #2
 800279c:	930e      	str	r3, [sp, #56]	; 0x38
 800279e:	d002      	beq.n	80027a6 <_vfprintf_r+0x2ee>
 80027a0:	9d08      	ldr	r5, [sp, #32]
 80027a2:	3502      	adds	r5, #2
 80027a4:	9508      	str	r5, [sp, #32]
 80027a6:	f8dd c014 	ldr.w	ip, [sp, #20]
 80027aa:	f01c 0c84 	ands.w	ip, ip, #132	; 0x84
 80027ae:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 80027b2:	f040 8316 	bne.w	8002de2 <_vfprintf_r+0x92a>
 80027b6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80027b8:	f8dd c020 	ldr.w	ip, [sp, #32]
 80027bc:	ebcc 0b05 	rsb	fp, ip, r5
 80027c0:	f1bb 0f00 	cmp.w	fp, #0
 80027c4:	f340 830d 	ble.w	8002de2 <_vfprintf_r+0x92a>
 80027c8:	f1bb 0f10 	cmp.w	fp, #16
 80027cc:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80027ce:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80027d0:	f8df a528 	ldr.w	sl, [pc, #1320]	; 8002cfc <_vfprintf_r+0x844>
 80027d4:	dd27      	ble.n	8002826 <_vfprintf_r+0x36e>
 80027d6:	9717      	str	r7, [sp, #92]	; 0x5c
 80027d8:	2510      	movs	r5, #16
 80027da:	4657      	mov	r7, sl
 80027dc:	46a2      	mov	sl, r4
 80027de:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80027e0:	e006      	b.n	80027f0 <_vfprintf_r+0x338>
 80027e2:	f1ab 0b10 	sub.w	fp, fp, #16
 80027e6:	f1bb 0f10 	cmp.w	fp, #16
 80027ea:	f106 0608 	add.w	r6, r6, #8
 80027ee:	dd17      	ble.n	8002820 <_vfprintf_r+0x368>
 80027f0:	3201      	adds	r2, #1
 80027f2:	3110      	adds	r1, #16
 80027f4:	2a07      	cmp	r2, #7
 80027f6:	9129      	str	r1, [sp, #164]	; 0xa4
 80027f8:	9228      	str	r2, [sp, #160]	; 0xa0
 80027fa:	6037      	str	r7, [r6, #0]
 80027fc:	6075      	str	r5, [r6, #4]
 80027fe:	ddf0      	ble.n	80027e2 <_vfprintf_r+0x32a>
 8002800:	4620      	mov	r0, r4
 8002802:	4649      	mov	r1, r9
 8002804:	aa27      	add	r2, sp, #156	; 0x9c
 8002806:	f004 faeb 	bl	8006de0 <__sprint_r>
 800280a:	2800      	cmp	r0, #0
 800280c:	f47f af6c 	bne.w	80026e8 <_vfprintf_r+0x230>
 8002810:	f1ab 0b10 	sub.w	fp, fp, #16
 8002814:	f1bb 0f10 	cmp.w	fp, #16
 8002818:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800281a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800281c:	ae34      	add	r6, sp, #208	; 0xd0
 800281e:	dce7      	bgt.n	80027f0 <_vfprintf_r+0x338>
 8002820:	4654      	mov	r4, sl
 8002822:	46ba      	mov	sl, r7
 8002824:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8002826:	3201      	adds	r2, #1
 8002828:	eb0b 0c01 	add.w	ip, fp, r1
 800282c:	2a07      	cmp	r2, #7
 800282e:	f8cd c0a4 	str.w	ip, [sp, #164]	; 0xa4
 8002832:	9228      	str	r2, [sp, #160]	; 0xa0
 8002834:	e886 0c00 	stmia.w	r6, {sl, fp}
 8002838:	f300 849e 	bgt.w	8003178 <_vfprintf_r+0xcc0>
 800283c:	f89d a07f 	ldrb.w	sl, [sp, #127]	; 0x7f
 8002840:	3608      	adds	r6, #8
 8002842:	f1ba 0f00 	cmp.w	sl, #0
 8002846:	d00f      	beq.n	8002868 <_vfprintf_r+0x3b0>
 8002848:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800284a:	3301      	adds	r3, #1
 800284c:	f10c 0c01 	add.w	ip, ip, #1
 8002850:	f10d 017f 	add.w	r1, sp, #127	; 0x7f
 8002854:	2201      	movs	r2, #1
 8002856:	2b07      	cmp	r3, #7
 8002858:	f8cd c0a4 	str.w	ip, [sp, #164]	; 0xa4
 800285c:	9328      	str	r3, [sp, #160]	; 0xa0
 800285e:	e886 0006 	stmia.w	r6, {r1, r2}
 8002862:	f300 8420 	bgt.w	80030a6 <_vfprintf_r+0xbee>
 8002866:	3608      	adds	r6, #8
 8002868:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800286a:	b173      	cbz	r3, 800288a <_vfprintf_r+0x3d2>
 800286c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800286e:	3301      	adds	r3, #1
 8002870:	f10c 0c02 	add.w	ip, ip, #2
 8002874:	a920      	add	r1, sp, #128	; 0x80
 8002876:	2202      	movs	r2, #2
 8002878:	2b07      	cmp	r3, #7
 800287a:	f8cd c0a4 	str.w	ip, [sp, #164]	; 0xa4
 800287e:	9328      	str	r3, [sp, #160]	; 0xa0
 8002880:	e886 0006 	stmia.w	r6, {r1, r2}
 8002884:	f300 841c 	bgt.w	80030c0 <_vfprintf_r+0xc08>
 8002888:	3608      	adds	r6, #8
 800288a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800288c:	2d80      	cmp	r5, #128	; 0x80
 800288e:	f000 834c 	beq.w	8002f2a <_vfprintf_r+0xa72>
 8002892:	9a07      	ldr	r2, [sp, #28]
 8002894:	1b15      	subs	r5, r2, r4
 8002896:	2d00      	cmp	r5, #0
 8002898:	dd3d      	ble.n	8002916 <_vfprintf_r+0x45e>
 800289a:	2d10      	cmp	r5, #16
 800289c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800289e:	f8df a460 	ldr.w	sl, [pc, #1120]	; 8002d00 <_vfprintf_r+0x848>
 80028a2:	dd2c      	ble.n	80028fe <_vfprintf_r+0x446>
 80028a4:	4651      	mov	r1, sl
 80028a6:	9407      	str	r4, [sp, #28]
 80028a8:	46aa      	mov	sl, r5
 80028aa:	f04f 0b10 	mov.w	fp, #16
 80028ae:	4662      	mov	r2, ip
 80028b0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80028b2:	460d      	mov	r5, r1
 80028b4:	e006      	b.n	80028c4 <_vfprintf_r+0x40c>
 80028b6:	f1aa 0a10 	sub.w	sl, sl, #16
 80028ba:	f1ba 0f10 	cmp.w	sl, #16
 80028be:	f106 0608 	add.w	r6, r6, #8
 80028c2:	dd17      	ble.n	80028f4 <_vfprintf_r+0x43c>
 80028c4:	3301      	adds	r3, #1
 80028c6:	3210      	adds	r2, #16
 80028c8:	2b07      	cmp	r3, #7
 80028ca:	9229      	str	r2, [sp, #164]	; 0xa4
 80028cc:	9328      	str	r3, [sp, #160]	; 0xa0
 80028ce:	e886 0820 	stmia.w	r6, {r5, fp}
 80028d2:	ddf0      	ble.n	80028b6 <_vfprintf_r+0x3fe>
 80028d4:	4620      	mov	r0, r4
 80028d6:	4649      	mov	r1, r9
 80028d8:	aa27      	add	r2, sp, #156	; 0x9c
 80028da:	f004 fa81 	bl	8006de0 <__sprint_r>
 80028de:	2800      	cmp	r0, #0
 80028e0:	f47f af02 	bne.w	80026e8 <_vfprintf_r+0x230>
 80028e4:	f1aa 0a10 	sub.w	sl, sl, #16
 80028e8:	f1ba 0f10 	cmp.w	sl, #16
 80028ec:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80028ee:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80028f0:	ae34      	add	r6, sp, #208	; 0xd0
 80028f2:	dce7      	bgt.n	80028c4 <_vfprintf_r+0x40c>
 80028f4:	4694      	mov	ip, r2
 80028f6:	9c07      	ldr	r4, [sp, #28]
 80028f8:	462a      	mov	r2, r5
 80028fa:	4655      	mov	r5, sl
 80028fc:	4692      	mov	sl, r2
 80028fe:	3301      	adds	r3, #1
 8002900:	44ac      	add	ip, r5
 8002902:	2b07      	cmp	r3, #7
 8002904:	f8cd c0a4 	str.w	ip, [sp, #164]	; 0xa4
 8002908:	9328      	str	r3, [sp, #160]	; 0xa0
 800290a:	f8c6 a000 	str.w	sl, [r6]
 800290e:	6075      	str	r5, [r6, #4]
 8002910:	f300 83bd 	bgt.w	800308e <_vfprintf_r+0xbd6>
 8002914:	3608      	adds	r6, #8
 8002916:	9d05      	ldr	r5, [sp, #20]
 8002918:	05eb      	lsls	r3, r5, #23
 800291a:	f100 82a6 	bmi.w	8002e6a <_vfprintf_r+0x9b2>
 800291e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002920:	6037      	str	r7, [r6, #0]
 8002922:	3301      	adds	r3, #1
 8002924:	44a4      	add	ip, r4
 8002926:	2b07      	cmp	r3, #7
 8002928:	f8cd c0a4 	str.w	ip, [sp, #164]	; 0xa4
 800292c:	6074      	str	r4, [r6, #4]
 800292e:	9328      	str	r3, [sp, #160]	; 0xa0
 8002930:	f300 8397 	bgt.w	8003062 <_vfprintf_r+0xbaa>
 8002934:	3608      	adds	r6, #8
 8002936:	9c05      	ldr	r4, [sp, #20]
 8002938:	0762      	lsls	r2, r4, #29
 800293a:	d540      	bpl.n	80029be <_vfprintf_r+0x506>
 800293c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800293e:	9808      	ldr	r0, [sp, #32]
 8002940:	1a2c      	subs	r4, r5, r0
 8002942:	2c00      	cmp	r4, #0
 8002944:	dd3b      	ble.n	80029be <_vfprintf_r+0x506>
 8002946:	2c10      	cmp	r4, #16
 8002948:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800294a:	f8df a3b0 	ldr.w	sl, [pc, #944]	; 8002cfc <_vfprintf_r+0x844>
 800294e:	dd22      	ble.n	8002996 <_vfprintf_r+0x4de>
 8002950:	2510      	movs	r5, #16
 8002952:	4662      	mov	r2, ip
 8002954:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8002958:	4657      	mov	r7, sl
 800295a:	e004      	b.n	8002966 <_vfprintf_r+0x4ae>
 800295c:	3c10      	subs	r4, #16
 800295e:	2c10      	cmp	r4, #16
 8002960:	f106 0608 	add.w	r6, r6, #8
 8002964:	dd15      	ble.n	8002992 <_vfprintf_r+0x4da>
 8002966:	3301      	adds	r3, #1
 8002968:	3210      	adds	r2, #16
 800296a:	2b07      	cmp	r3, #7
 800296c:	9229      	str	r2, [sp, #164]	; 0xa4
 800296e:	9328      	str	r3, [sp, #160]	; 0xa0
 8002970:	6037      	str	r7, [r6, #0]
 8002972:	6075      	str	r5, [r6, #4]
 8002974:	ddf2      	ble.n	800295c <_vfprintf_r+0x4a4>
 8002976:	4640      	mov	r0, r8
 8002978:	4649      	mov	r1, r9
 800297a:	aa27      	add	r2, sp, #156	; 0x9c
 800297c:	f004 fa30 	bl	8006de0 <__sprint_r>
 8002980:	2800      	cmp	r0, #0
 8002982:	f47f aeb1 	bne.w	80026e8 <_vfprintf_r+0x230>
 8002986:	3c10      	subs	r4, #16
 8002988:	2c10      	cmp	r4, #16
 800298a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800298c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800298e:	ae34      	add	r6, sp, #208	; 0xd0
 8002990:	dce9      	bgt.n	8002966 <_vfprintf_r+0x4ae>
 8002992:	4694      	mov	ip, r2
 8002994:	46ba      	mov	sl, r7
 8002996:	3301      	adds	r3, #1
 8002998:	44a4      	add	ip, r4
 800299a:	2b07      	cmp	r3, #7
 800299c:	f8cd c0a4 	str.w	ip, [sp, #164]	; 0xa4
 80029a0:	9328      	str	r3, [sp, #160]	; 0xa0
 80029a2:	f8c6 a000 	str.w	sl, [r6]
 80029a6:	6074      	str	r4, [r6, #4]
 80029a8:	dd09      	ble.n	80029be <_vfprintf_r+0x506>
 80029aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80029ac:	4649      	mov	r1, r9
 80029ae:	aa27      	add	r2, sp, #156	; 0x9c
 80029b0:	f004 fa16 	bl	8006de0 <__sprint_r>
 80029b4:	2800      	cmp	r0, #0
 80029b6:	f47f ae97 	bne.w	80026e8 <_vfprintf_r+0x230>
 80029ba:	f8dd c0a4 	ldr.w	ip, [sp, #164]	; 0xa4
 80029be:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80029c0:	9808      	ldr	r0, [sp, #32]
 80029c2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80029c4:	42a8      	cmp	r0, r5
 80029c6:	bfac      	ite	ge
 80029c8:	1824      	addge	r4, r4, r0
 80029ca:	1964      	addlt	r4, r4, r5
 80029cc:	940c      	str	r4, [sp, #48]	; 0x30
 80029ce:	f1bc 0f00 	cmp.w	ip, #0
 80029d2:	f040 8352 	bne.w	800307a <_vfprintf_r+0xbc2>
 80029d6:	2300      	movs	r3, #0
 80029d8:	9328      	str	r3, [sp, #160]	; 0xa0
 80029da:	ae34      	add	r6, sp, #208	; 0xd0
 80029dc:	e5ad      	b.n	800253a <_vfprintf_r+0x82>
 80029de:	f8dd c014 	ldr.w	ip, [sp, #20]
 80029e2:	9306      	str	r3, [sp, #24]
 80029e4:	f01c 0320 	ands.w	r3, ip, #32
 80029e8:	f000 81ce 	beq.w	8002d88 <_vfprintf_r+0x8d0>
 80029ec:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80029ee:	1de3      	adds	r3, r4, #7
 80029f0:	f023 0307 	bic.w	r3, r3, #7
 80029f4:	f103 0508 	add.w	r5, r3, #8
 80029f8:	950b      	str	r5, [sp, #44]	; 0x2c
 80029fa:	e9d3 4500 	ldrd	r4, r5, [r3]
 80029fe:	2300      	movs	r3, #0
 8002a00:	e696      	b.n	8002730 <_vfprintf_r+0x278>
 8002a02:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002a04:	f8dd c014 	ldr.w	ip, [sp, #20]
 8002a08:	9306      	str	r3, [sp, #24]
 8002a0a:	1d15      	adds	r5, r2, #4
 8002a0c:	2330      	movs	r3, #48	; 0x30
 8002a0e:	f04f 0878 	mov.w	r8, #120	; 0x78
 8002a12:	f04c 0c02 	orr.w	ip, ip, #2
 8002a16:	48b7      	ldr	r0, [pc, #732]	; (8002cf4 <_vfprintf_r+0x83c>)
 8002a18:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
 8002a1c:	950b      	str	r5, [sp, #44]	; 0x2c
 8002a1e:	6814      	ldr	r4, [r2, #0]
 8002a20:	f8cd c014 	str.w	ip, [sp, #20]
 8002a24:	2500      	movs	r5, #0
 8002a26:	f88d 8081 	strb.w	r8, [sp, #129]	; 0x81
 8002a2a:	9016      	str	r0, [sp, #88]	; 0x58
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	e67f      	b.n	8002730 <_vfprintf_r+0x278>
 8002a30:	f893 8000 	ldrb.w	r8, [r3]
 8002a34:	222b      	movs	r2, #43	; 0x2b
 8002a36:	e5ba      	b.n	80025ae <_vfprintf_r+0xf6>
 8002a38:	f893 8000 	ldrb.w	r8, [r3]
 8002a3c:	2a00      	cmp	r2, #0
 8002a3e:	f47f adb6 	bne.w	80025ae <_vfprintf_r+0xf6>
 8002a42:	2220      	movs	r2, #32
 8002a44:	e5b3      	b.n	80025ae <_vfprintf_r+0xf6>
 8002a46:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8002a48:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8002a4a:	6824      	ldr	r4, [r4, #0]
 8002a4c:	940a      	str	r4, [sp, #40]	; 0x28
 8002a4e:	2c00      	cmp	r4, #0
 8002a50:	f105 0104 	add.w	r1, r5, #4
 8002a54:	f6ff ae0f 	blt.w	8002676 <_vfprintf_r+0x1be>
 8002a58:	910b      	str	r1, [sp, #44]	; 0x2c
 8002a5a:	f893 8000 	ldrb.w	r8, [r3]
 8002a5e:	e5a6      	b.n	80025ae <_vfprintf_r+0xf6>
 8002a60:	f8dd c014 	ldr.w	ip, [sp, #20]
 8002a64:	f04c 0c20 	orr.w	ip, ip, #32
 8002a68:	f8cd c014 	str.w	ip, [sp, #20]
 8002a6c:	f893 8000 	ldrb.w	r8, [r3]
 8002a70:	e59d      	b.n	80025ae <_vfprintf_r+0xf6>
 8002a72:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8002a74:	9306      	str	r3, [sp, #24]
 8002a76:	6827      	ldr	r7, [r4, #0]
 8002a78:	f04f 0a00 	mov.w	sl, #0
 8002a7c:	f88d a07f 	strb.w	sl, [sp, #127]	; 0x7f
 8002a80:	1d25      	adds	r5, r4, #4
 8002a82:	2f00      	cmp	r7, #0
 8002a84:	f000 8679 	beq.w	800377a <_vfprintf_r+0x12c2>
 8002a88:	9c07      	ldr	r4, [sp, #28]
 8002a8a:	2c00      	cmp	r4, #0
 8002a8c:	4638      	mov	r0, r7
 8002a8e:	f2c0 862e 	blt.w	80036ee <_vfprintf_r+0x1236>
 8002a92:	4651      	mov	r1, sl
 8002a94:	4622      	mov	r2, r4
 8002a96:	f003 f8d9 	bl	8005c4c <memchr>
 8002a9a:	2800      	cmp	r0, #0
 8002a9c:	f000 86b2 	beq.w	8003804 <_vfprintf_r+0x134c>
 8002aa0:	9c07      	ldr	r4, [sp, #28]
 8002aa2:	950b      	str	r5, [sp, #44]	; 0x2c
 8002aa4:	1bc0      	subs	r0, r0, r7
 8002aa6:	42a0      	cmp	r0, r4
 8002aa8:	bfb8      	it	lt
 8002aaa:	4604      	movlt	r4, r0
 8002aac:	ea24 75e4 	bic.w	r5, r4, r4, asr #31
 8002ab0:	f8cd a01c 	str.w	sl, [sp, #28]
 8002ab4:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8002ab8:	9508      	str	r5, [sp, #32]
 8002aba:	f89d a07f 	ldrb.w	sl, [sp, #127]	; 0x7f
 8002abe:	e664      	b.n	800278a <_vfprintf_r+0x2d2>
 8002ac0:	9d05      	ldr	r5, [sp, #20]
 8002ac2:	4c8c      	ldr	r4, [pc, #560]	; (8002cf4 <_vfprintf_r+0x83c>)
 8002ac4:	9306      	str	r3, [sp, #24]
 8002ac6:	06af      	lsls	r7, r5, #26
 8002ac8:	9416      	str	r4, [sp, #88]	; 0x58
 8002aca:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
 8002ace:	d547      	bpl.n	8002b60 <_vfprintf_r+0x6a8>
 8002ad0:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 8002ad4:	f10c 0307 	add.w	r3, ip, #7
 8002ad8:	f023 0307 	bic.w	r3, r3, #7
 8002adc:	f103 0408 	add.w	r4, r3, #8
 8002ae0:	940b      	str	r4, [sp, #44]	; 0x2c
 8002ae2:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002ae6:	f8dd c014 	ldr.w	ip, [sp, #20]
 8002aea:	f01c 0f01 	tst.w	ip, #1
 8002aee:	f000 82f8 	beq.w	80030e2 <_vfprintf_r+0xc2a>
 8002af2:	ea54 0005 	orrs.w	r0, r4, r5
 8002af6:	f000 82f4 	beq.w	80030e2 <_vfprintf_r+0xc2a>
 8002afa:	2330      	movs	r3, #48	; 0x30
 8002afc:	f04c 0c02 	orr.w	ip, ip, #2
 8002b00:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
 8002b04:	f88d 8081 	strb.w	r8, [sp, #129]	; 0x81
 8002b08:	f8cd c014 	str.w	ip, [sp, #20]
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	e60f      	b.n	8002730 <_vfprintf_r+0x278>
 8002b10:	f8dd c014 	ldr.w	ip, [sp, #20]
 8002b14:	9306      	str	r3, [sp, #24]
 8002b16:	f04c 0c10 	orr.w	ip, ip, #16
 8002b1a:	f8cd c014 	str.w	ip, [sp, #20]
 8002b1e:	9c05      	ldr	r4, [sp, #20]
 8002b20:	06a2      	lsls	r2, r4, #26
 8002b22:	f53f adfa 	bmi.w	800271a <_vfprintf_r+0x262>
 8002b26:	9c05      	ldr	r4, [sp, #20]
 8002b28:	06e3      	lsls	r3, r4, #27
 8002b2a:	f100 8334 	bmi.w	8003196 <_vfprintf_r+0xcde>
 8002b2e:	f8dd c014 	ldr.w	ip, [sp, #20]
 8002b32:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8002b36:	f000 832e 	beq.w	8003196 <_vfprintf_r+0xcde>
 8002b3a:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 8002b3e:	f8bc 4000 	ldrh.w	r4, [ip]
 8002b42:	f10c 0c04 	add.w	ip, ip, #4
 8002b46:	2500      	movs	r5, #0
 8002b48:	2301      	movs	r3, #1
 8002b4a:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 8002b4e:	e5ef      	b.n	8002730 <_vfprintf_r+0x278>
 8002b50:	9d05      	ldr	r5, [sp, #20]
 8002b52:	4c69      	ldr	r4, [pc, #420]	; (8002cf8 <_vfprintf_r+0x840>)
 8002b54:	9306      	str	r3, [sp, #24]
 8002b56:	06af      	lsls	r7, r5, #26
 8002b58:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
 8002b5c:	9416      	str	r4, [sp, #88]	; 0x58
 8002b5e:	d4b7      	bmi.n	8002ad0 <_vfprintf_r+0x618>
 8002b60:	9d05      	ldr	r5, [sp, #20]
 8002b62:	06ed      	lsls	r5, r5, #27
 8002b64:	f140 84ef 	bpl.w	8003546 <_vfprintf_r+0x108e>
 8002b68:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 8002b6c:	f8dc 4000 	ldr.w	r4, [ip]
 8002b70:	f10c 0c04 	add.w	ip, ip, #4
 8002b74:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 8002b78:	2500      	movs	r5, #0
 8002b7a:	e7b4      	b.n	8002ae6 <_vfprintf_r+0x62e>
 8002b7c:	f8dd c014 	ldr.w	ip, [sp, #20]
 8002b80:	f04c 0c40 	orr.w	ip, ip, #64	; 0x40
 8002b84:	f8cd c014 	str.w	ip, [sp, #20]
 8002b88:	f893 8000 	ldrb.w	r8, [r3]
 8002b8c:	e50f      	b.n	80025ae <_vfprintf_r+0xf6>
 8002b8e:	f893 8000 	ldrb.w	r8, [r3]
 8002b92:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
 8002b96:	4619      	mov	r1, r3
 8002b98:	f000 857b 	beq.w	8003692 <_vfprintf_r+0x11da>
 8002b9c:	9d05      	ldr	r5, [sp, #20]
 8002b9e:	f045 0510 	orr.w	r5, r5, #16
 8002ba2:	9505      	str	r5, [sp, #20]
 8002ba4:	e503      	b.n	80025ae <_vfprintf_r+0xf6>
 8002ba6:	f8dd c014 	ldr.w	ip, [sp, #20]
 8002baa:	9306      	str	r3, [sp, #24]
 8002bac:	f01c 0f20 	tst.w	ip, #32
 8002bb0:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
 8002bb4:	f000 84a7 	beq.w	8003506 <_vfprintf_r+0x104e>
 8002bb8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8002bba:	6821      	ldr	r1, [r4, #0]
 8002bbc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8002bbe:	17e5      	asrs	r5, r4, #31
 8002bc0:	462b      	mov	r3, r5
 8002bc2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8002bc4:	4622      	mov	r2, r4
 8002bc6:	3504      	adds	r5, #4
 8002bc8:	950b      	str	r5, [sp, #44]	; 0x2c
 8002bca:	e9c1 2300 	strd	r2, r3, [r1]
 8002bce:	e4b4      	b.n	800253a <_vfprintf_r+0x82>
 8002bd0:	9d05      	ldr	r5, [sp, #20]
 8002bd2:	f045 0501 	orr.w	r5, r5, #1
 8002bd6:	9505      	str	r5, [sp, #20]
 8002bd8:	f893 8000 	ldrb.w	r8, [r3]
 8002bdc:	e4e7      	b.n	80025ae <_vfprintf_r+0xf6>
 8002bde:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002be0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8002be2:	9306      	str	r3, [sp, #24]
 8002be4:	6812      	ldr	r2, [r2, #0]
 8002be6:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 8002bea:	2300      	movs	r3, #0
 8002bec:	2401      	movs	r4, #1
 8002bee:	3504      	adds	r5, #4
 8002bf0:	469a      	mov	sl, r3
 8002bf2:	9408      	str	r4, [sp, #32]
 8002bf4:	950b      	str	r5, [sp, #44]	; 0x2c
 8002bf6:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8002bfa:	9307      	str	r3, [sp, #28]
 8002bfc:	9310      	str	r3, [sp, #64]	; 0x40
 8002bfe:	af2a      	add	r7, sp, #168	; 0xa8
 8002c00:	e5c9      	b.n	8002796 <_vfprintf_r+0x2de>
 8002c02:	9c05      	ldr	r4, [sp, #20]
 8002c04:	9306      	str	r3, [sp, #24]
 8002c06:	06a3      	lsls	r3, r4, #26
 8002c08:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
 8002c0c:	d53c      	bpl.n	8002c88 <_vfprintf_r+0x7d0>
 8002c0e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8002c10:	1de9      	adds	r1, r5, #7
 8002c12:	f021 0107 	bic.w	r1, r1, #7
 8002c16:	e9d1 2300 	ldrd	r2, r3, [r1]
 8002c1a:	3108      	adds	r1, #8
 8002c1c:	910b      	str	r1, [sp, #44]	; 0x2c
 8002c1e:	4614      	mov	r4, r2
 8002c20:	461d      	mov	r5, r3
 8002c22:	2a00      	cmp	r2, #0
 8002c24:	f173 0000 	sbcs.w	r0, r3, #0
 8002c28:	f2c0 83d1 	blt.w	80033ce <_vfprintf_r+0xf16>
 8002c2c:	f89d a07f 	ldrb.w	sl, [sp, #127]	; 0x7f
 8002c30:	2301      	movs	r3, #1
 8002c32:	e581      	b.n	8002738 <_vfprintf_r+0x280>
 8002c34:	f893 8000 	ldrb.w	r8, [r3]
 8002c38:	f1b8 0f2a 	cmp.w	r8, #42	; 0x2a
 8002c3c:	f103 0001 	add.w	r0, r3, #1
 8002c40:	f000 86b8 	beq.w	80039b4 <_vfprintf_r+0x14fc>
 8002c44:	f1a8 0130 	sub.w	r1, r8, #48	; 0x30
 8002c48:	2909      	cmp	r1, #9
 8002c4a:	bf98      	it	ls
 8002c4c:	2300      	movls	r3, #0
 8002c4e:	f200 8629 	bhi.w	80038a4 <_vfprintf_r+0x13ec>
 8002c52:	f810 8b01 	ldrb.w	r8, [r0], #1
 8002c56:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002c5a:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8002c5e:	f1a8 0130 	sub.w	r1, r8, #48	; 0x30
 8002c62:	2909      	cmp	r1, #9
 8002c64:	d9f5      	bls.n	8002c52 <_vfprintf_r+0x79a>
 8002c66:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002c6a:	9307      	str	r3, [sp, #28]
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	e49f      	b.n	80025b0 <_vfprintf_r+0xf8>
 8002c70:	f8dd c014 	ldr.w	ip, [sp, #20]
 8002c74:	9306      	str	r3, [sp, #24]
 8002c76:	f04c 0c10 	orr.w	ip, ip, #16
 8002c7a:	f8cd c014 	str.w	ip, [sp, #20]
 8002c7e:	9c05      	ldr	r4, [sp, #20]
 8002c80:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
 8002c84:	06a3      	lsls	r3, r4, #26
 8002c86:	d4c2      	bmi.n	8002c0e <_vfprintf_r+0x756>
 8002c88:	f8dd c014 	ldr.w	ip, [sp, #20]
 8002c8c:	f01c 0f10 	tst.w	ip, #16
 8002c90:	f040 82b3 	bne.w	80031fa <_vfprintf_r+0xd42>
 8002c94:	9c05      	ldr	r4, [sp, #20]
 8002c96:	0667      	lsls	r7, r4, #25
 8002c98:	f140 82af 	bpl.w	80031fa <_vfprintf_r+0xd42>
 8002c9c:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 8002ca0:	f9bc 4000 	ldrsh.w	r4, [ip]
 8002ca4:	f10c 0c04 	add.w	ip, ip, #4
 8002ca8:	17e5      	asrs	r5, r4, #31
 8002caa:	4622      	mov	r2, r4
 8002cac:	462b      	mov	r3, r5
 8002cae:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 8002cb2:	e7b6      	b.n	8002c22 <_vfprintf_r+0x76a>
 8002cb4:	9d05      	ldr	r5, [sp, #20]
 8002cb6:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8002cba:	9505      	str	r5, [sp, #20]
 8002cbc:	f893 8000 	ldrb.w	r8, [r3]
 8002cc0:	e475      	b.n	80025ae <_vfprintf_r+0xf6>
 8002cc2:	2400      	movs	r4, #0
 8002cc4:	f1a8 0130 	sub.w	r1, r8, #48	; 0x30
 8002cc8:	940a      	str	r4, [sp, #40]	; 0x28
 8002cca:	4620      	mov	r0, r4
 8002ccc:	f813 8b01 	ldrb.w	r8, [r3], #1
 8002cd0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002cd4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002cd8:	f1a8 0130 	sub.w	r1, r8, #48	; 0x30
 8002cdc:	2909      	cmp	r1, #9
 8002cde:	d9f5      	bls.n	8002ccc <_vfprintf_r+0x814>
 8002ce0:	900a      	str	r0, [sp, #40]	; 0x28
 8002ce2:	e465      	b.n	80025b0 <_vfprintf_r+0xf8>
 8002ce4:	9d05      	ldr	r5, [sp, #20]
 8002ce6:	f045 0508 	orr.w	r5, r5, #8
 8002cea:	9505      	str	r5, [sp, #20]
 8002cec:	f893 8000 	ldrb.w	r8, [r3]
 8002cf0:	e45d      	b.n	80025ae <_vfprintf_r+0xf6>
 8002cf2:	bf00      	nop
 8002cf4:	080091a4 	.word	0x080091a4
 8002cf8:	08009190 	.word	0x08009190
 8002cfc:	080091c4 	.word	0x080091c4
 8002d00:	08009170 	.word	0x08009170
 8002d04:	9c05      	ldr	r4, [sp, #20]
 8002d06:	9306      	str	r3, [sp, #24]
 8002d08:	0725      	lsls	r5, r4, #28
 8002d0a:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
 8002d0e:	f140 840e 	bpl.w	800352e <_vfprintf_r+0x1076>
 8002d12:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8002d14:	1deb      	adds	r3, r5, #7
 8002d16:	f023 0307 	bic.w	r3, r3, #7
 8002d1a:	ed93 7b00 	vldr	d7, [r3]
 8002d1e:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 8002d22:	f103 0c08 	add.w	ip, r3, #8
 8002d26:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 8002d2a:	ed9d 0b12 	vldr	d0, [sp, #72]	; 0x48
 8002d2e:	f003 fe8b 	bl	8006a48 <__fpclassifyd>
 8002d32:	2801      	cmp	r0, #1
 8002d34:	f040 8355 	bne.w	80033e2 <_vfprintf_r+0xf2a>
 8002d38:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	2300      	movs	r3, #0
 8002d40:	f005 fdd4 	bl	80088ec <__aeabi_dcmplt>
 8002d44:	2800      	cmp	r0, #0
 8002d46:	f040 8533 	bne.w	80037b0 <_vfprintf_r+0x12f8>
 8002d4a:	f89d a07f 	ldrb.w	sl, [sp, #127]	; 0x7f
 8002d4e:	f8dd c014 	ldr.w	ip, [sp, #20]
 8002d52:	4f9f      	ldr	r7, [pc, #636]	; (8002fd0 <_vfprintf_r+0xb18>)
 8002d54:	4b9f      	ldr	r3, [pc, #636]	; (8002fd4 <_vfprintf_r+0xb1c>)
 8002d56:	2500      	movs	r5, #0
 8002d58:	2403      	movs	r4, #3
 8002d5a:	f02c 0c80 	bic.w	ip, ip, #128	; 0x80
 8002d5e:	9408      	str	r4, [sp, #32]
 8002d60:	9507      	str	r5, [sp, #28]
 8002d62:	f8cd c014 	str.w	ip, [sp, #20]
 8002d66:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002d6a:	bfd8      	it	le
 8002d6c:	461f      	movle	r7, r3
 8002d6e:	9510      	str	r5, [sp, #64]	; 0x40
 8002d70:	e50b      	b.n	800278a <_vfprintf_r+0x2d2>
 8002d72:	9d05      	ldr	r5, [sp, #20]
 8002d74:	9306      	str	r3, [sp, #24]
 8002d76:	f045 0510 	orr.w	r5, r5, #16
 8002d7a:	9505      	str	r5, [sp, #20]
 8002d7c:	f8dd c014 	ldr.w	ip, [sp, #20]
 8002d80:	f01c 0320 	ands.w	r3, ip, #32
 8002d84:	f47f ae32 	bne.w	80029ec <_vfprintf_r+0x534>
 8002d88:	f8dd c014 	ldr.w	ip, [sp, #20]
 8002d8c:	f01c 0210 	ands.w	r2, ip, #16
 8002d90:	f040 823f 	bne.w	8003212 <_vfprintf_r+0xd5a>
 8002d94:	f8dd c014 	ldr.w	ip, [sp, #20]
 8002d98:	f01c 0340 	ands.w	r3, ip, #64	; 0x40
 8002d9c:	f000 8239 	beq.w	8003212 <_vfprintf_r+0xd5a>
 8002da0:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 8002da4:	f8bc 4000 	ldrh.w	r4, [ip]
 8002da8:	f10c 0c04 	add.w	ip, ip, #4
 8002dac:	4613      	mov	r3, r2
 8002dae:	2500      	movs	r5, #0
 8002db0:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 8002db4:	e4bc      	b.n	8002730 <_vfprintf_r+0x278>
 8002db6:	9306      	str	r3, [sp, #24]
 8002db8:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
 8002dbc:	f1b8 0f00 	cmp.w	r8, #0
 8002dc0:	f43f ac8b 	beq.w	80026da <_vfprintf_r+0x222>
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	f04f 0c01 	mov.w	ip, #1
 8002dca:	469a      	mov	sl, r3
 8002dcc:	f8cd c020 	str.w	ip, [sp, #32]
 8002dd0:	f88d 80a8 	strb.w	r8, [sp, #168]	; 0xa8
 8002dd4:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8002dd8:	9307      	str	r3, [sp, #28]
 8002dda:	9310      	str	r3, [sp, #64]	; 0x40
 8002ddc:	4664      	mov	r4, ip
 8002dde:	af2a      	add	r7, sp, #168	; 0xa8
 8002de0:	e4d9      	b.n	8002796 <_vfprintf_r+0x2de>
 8002de2:	f8dd c0a4 	ldr.w	ip, [sp, #164]	; 0xa4
 8002de6:	e52c      	b.n	8002842 <_vfprintf_r+0x38a>
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	f000 80e3 	beq.w	8002fb4 <_vfprintf_r+0xafc>
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	f10d 03cf 	add.w	r3, sp, #207	; 0xcf
 8002df4:	d118      	bne.n	8002e28 <_vfprintf_r+0x970>
 8002df6:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	f004 000f 	and.w	r0, r4, #15
 8002e00:	0922      	lsrs	r2, r4, #4
 8002e02:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
 8002e06:	460f      	mov	r7, r1
 8002e08:	092b      	lsrs	r3, r5, #4
 8002e0a:	f81c 1000 	ldrb.w	r1, [ip, r0]
 8002e0e:	7039      	strb	r1, [r7, #0]
 8002e10:	ea52 0003 	orrs.w	r0, r2, r3
 8002e14:	4614      	mov	r4, r2
 8002e16:	461d      	mov	r5, r3
 8002e18:	f107 31ff 	add.w	r1, r7, #4294967295
 8002e1c:	d1ee      	bne.n	8002dfc <_vfprintf_r+0x944>
 8002e1e:	9d04      	ldr	r5, [sp, #16]
 8002e20:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
 8002e24:	1bec      	subs	r4, r5, r7
 8002e26:	e4a7      	b.n	8002778 <_vfprintf_r+0x2c0>
 8002e28:	08e0      	lsrs	r0, r4, #3
 8002e2a:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
 8002e2e:	f004 0207 	and.w	r2, r4, #7
 8002e32:	08e9      	lsrs	r1, r5, #3
 8002e34:	3230      	adds	r2, #48	; 0x30
 8002e36:	ea50 0c01 	orrs.w	ip, r0, r1
 8002e3a:	461f      	mov	r7, r3
 8002e3c:	701a      	strb	r2, [r3, #0]
 8002e3e:	4604      	mov	r4, r0
 8002e40:	460d      	mov	r5, r1
 8002e42:	f103 33ff 	add.w	r3, r3, #4294967295
 8002e46:	d1ef      	bne.n	8002e28 <_vfprintf_r+0x970>
 8002e48:	9c05      	ldr	r4, [sp, #20]
 8002e4a:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 8002e4e:	07e0      	lsls	r0, r4, #31
 8002e50:	4639      	mov	r1, r7
 8002e52:	f140 80b8 	bpl.w	8002fc6 <_vfprintf_r+0xb0e>
 8002e56:	2a30      	cmp	r2, #48	; 0x30
 8002e58:	f000 80b5 	beq.w	8002fc6 <_vfprintf_r+0xb0e>
 8002e5c:	9d04      	ldr	r5, [sp, #16]
 8002e5e:	461f      	mov	r7, r3
 8002e60:	2330      	movs	r3, #48	; 0x30
 8002e62:	1bec      	subs	r4, r5, r7
 8002e64:	f801 3c01 	strb.w	r3, [r1, #-1]
 8002e68:	e486      	b.n	8002778 <_vfprintf_r+0x2c0>
 8002e6a:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8002e6e:	f340 80b7 	ble.w	8002fe0 <_vfprintf_r+0xb28>
 8002e72:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8002e76:	2200      	movs	r2, #0
 8002e78:	2300      	movs	r3, #0
 8002e7a:	f8cd c00c 	str.w	ip, [sp, #12]
 8002e7e:	f005 fd2b 	bl	80088d8 <__aeabi_dcmpeq>
 8002e82:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8002e86:	2800      	cmp	r0, #0
 8002e88:	f000 812e 	beq.w	80030e8 <_vfprintf_r+0xc30>
 8002e8c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002e8e:	4a52      	ldr	r2, [pc, #328]	; (8002fd8 <_vfprintf_r+0xb20>)
 8002e90:	6032      	str	r2, [r6, #0]
 8002e92:	3301      	adds	r3, #1
 8002e94:	f10c 0c01 	add.w	ip, ip, #1
 8002e98:	2201      	movs	r2, #1
 8002e9a:	2b07      	cmp	r3, #7
 8002e9c:	f8cd c0a4 	str.w	ip, [sp, #164]	; 0xa4
 8002ea0:	9328      	str	r3, [sp, #160]	; 0xa0
 8002ea2:	6072      	str	r2, [r6, #4]
 8002ea4:	f300 836f 	bgt.w	8003586 <_vfprintf_r+0x10ce>
 8002ea8:	3608      	adds	r6, #8
 8002eaa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002eac:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8002eae:	42a3      	cmp	r3, r4
 8002eb0:	db03      	blt.n	8002eba <_vfprintf_r+0xa02>
 8002eb2:	9d05      	ldr	r5, [sp, #20]
 8002eb4:	07ef      	lsls	r7, r5, #31
 8002eb6:	f57f ad3e 	bpl.w	8002936 <_vfprintf_r+0x47e>
 8002eba:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002ebc:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8002ebe:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8002ec0:	6034      	str	r4, [r6, #0]
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	44ac      	add	ip, r5
 8002ec6:	2b07      	cmp	r3, #7
 8002ec8:	f8cd c0a4 	str.w	ip, [sp, #164]	; 0xa4
 8002ecc:	6075      	str	r5, [r6, #4]
 8002ece:	9328      	str	r3, [sp, #160]	; 0xa0
 8002ed0:	f300 83e8 	bgt.w	80036a4 <_vfprintf_r+0x11ec>
 8002ed4:	3608      	adds	r6, #8
 8002ed6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8002ed8:	1e6c      	subs	r4, r5, #1
 8002eda:	2c00      	cmp	r4, #0
 8002edc:	f77f ad2b 	ble.w	8002936 <_vfprintf_r+0x47e>
 8002ee0:	2c10      	cmp	r4, #16
 8002ee2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002ee4:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 8002fdc <_vfprintf_r+0xb24>
 8002ee8:	f340 819c 	ble.w	8003224 <_vfprintf_r+0xd6c>
 8002eec:	2510      	movs	r5, #16
 8002eee:	4662      	mov	r2, ip
 8002ef0:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8002ef4:	4657      	mov	r7, sl
 8002ef6:	e004      	b.n	8002f02 <_vfprintf_r+0xa4a>
 8002ef8:	3608      	adds	r6, #8
 8002efa:	3c10      	subs	r4, #16
 8002efc:	2c10      	cmp	r4, #16
 8002efe:	f340 818f 	ble.w	8003220 <_vfprintf_r+0xd68>
 8002f02:	3301      	adds	r3, #1
 8002f04:	3210      	adds	r2, #16
 8002f06:	2b07      	cmp	r3, #7
 8002f08:	9229      	str	r2, [sp, #164]	; 0xa4
 8002f0a:	9328      	str	r3, [sp, #160]	; 0xa0
 8002f0c:	6037      	str	r7, [r6, #0]
 8002f0e:	6075      	str	r5, [r6, #4]
 8002f10:	ddf2      	ble.n	8002ef8 <_vfprintf_r+0xa40>
 8002f12:	4640      	mov	r0, r8
 8002f14:	4649      	mov	r1, r9
 8002f16:	aa27      	add	r2, sp, #156	; 0x9c
 8002f18:	f003 ff62 	bl	8006de0 <__sprint_r>
 8002f1c:	2800      	cmp	r0, #0
 8002f1e:	f47f abe3 	bne.w	80026e8 <_vfprintf_r+0x230>
 8002f22:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8002f24:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002f26:	ae34      	add	r6, sp, #208	; 0xd0
 8002f28:	e7e7      	b.n	8002efa <_vfprintf_r+0xa42>
 8002f2a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002f2c:	9908      	ldr	r1, [sp, #32]
 8002f2e:	1a45      	subs	r5, r0, r1
 8002f30:	2d00      	cmp	r5, #0
 8002f32:	f77f acae 	ble.w	8002892 <_vfprintf_r+0x3da>
 8002f36:	2d10      	cmp	r5, #16
 8002f38:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002f3a:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 8002fdc <_vfprintf_r+0xb24>
 8002f3e:	dd2c      	ble.n	8002f9a <_vfprintf_r+0xae2>
 8002f40:	4651      	mov	r1, sl
 8002f42:	940e      	str	r4, [sp, #56]	; 0x38
 8002f44:	46aa      	mov	sl, r5
 8002f46:	f04f 0b10 	mov.w	fp, #16
 8002f4a:	4662      	mov	r2, ip
 8002f4c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8002f4e:	460d      	mov	r5, r1
 8002f50:	e006      	b.n	8002f60 <_vfprintf_r+0xaa8>
 8002f52:	f1aa 0a10 	sub.w	sl, sl, #16
 8002f56:	f1ba 0f10 	cmp.w	sl, #16
 8002f5a:	f106 0608 	add.w	r6, r6, #8
 8002f5e:	dd17      	ble.n	8002f90 <_vfprintf_r+0xad8>
 8002f60:	3301      	adds	r3, #1
 8002f62:	3210      	adds	r2, #16
 8002f64:	2b07      	cmp	r3, #7
 8002f66:	9229      	str	r2, [sp, #164]	; 0xa4
 8002f68:	9328      	str	r3, [sp, #160]	; 0xa0
 8002f6a:	e886 0820 	stmia.w	r6, {r5, fp}
 8002f6e:	ddf0      	ble.n	8002f52 <_vfprintf_r+0xa9a>
 8002f70:	4620      	mov	r0, r4
 8002f72:	4649      	mov	r1, r9
 8002f74:	aa27      	add	r2, sp, #156	; 0x9c
 8002f76:	f003 ff33 	bl	8006de0 <__sprint_r>
 8002f7a:	2800      	cmp	r0, #0
 8002f7c:	f47f abb4 	bne.w	80026e8 <_vfprintf_r+0x230>
 8002f80:	f1aa 0a10 	sub.w	sl, sl, #16
 8002f84:	f1ba 0f10 	cmp.w	sl, #16
 8002f88:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8002f8a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002f8c:	ae34      	add	r6, sp, #208	; 0xd0
 8002f8e:	dce7      	bgt.n	8002f60 <_vfprintf_r+0xaa8>
 8002f90:	4694      	mov	ip, r2
 8002f92:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8002f94:	462a      	mov	r2, r5
 8002f96:	4655      	mov	r5, sl
 8002f98:	4692      	mov	sl, r2
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	44ac      	add	ip, r5
 8002f9e:	2b07      	cmp	r3, #7
 8002fa0:	f8cd c0a4 	str.w	ip, [sp, #164]	; 0xa4
 8002fa4:	9328      	str	r3, [sp, #160]	; 0xa0
 8002fa6:	f8c6 a000 	str.w	sl, [r6]
 8002faa:	6075      	str	r5, [r6, #4]
 8002fac:	f300 8202 	bgt.w	80033b4 <_vfprintf_r+0xefc>
 8002fb0:	3608      	adds	r6, #8
 8002fb2:	e46e      	b.n	8002892 <_vfprintf_r+0x3da>
 8002fb4:	2d00      	cmp	r5, #0
 8002fb6:	bf08      	it	eq
 8002fb8:	2c0a      	cmpeq	r4, #10
 8002fba:	f080 813f 	bcs.w	800323c <_vfprintf_r+0xd84>
 8002fbe:	af44      	add	r7, sp, #272	; 0x110
 8002fc0:	3430      	adds	r4, #48	; 0x30
 8002fc2:	f807 4d41 	strb.w	r4, [r7, #-65]!
 8002fc6:	9d04      	ldr	r5, [sp, #16]
 8002fc8:	1bec      	subs	r4, r5, r7
 8002fca:	f7ff bbd5 	b.w	8002778 <_vfprintf_r+0x2c0>
 8002fce:	bf00      	nop
 8002fd0:	08009184 	.word	0x08009184
 8002fd4:	08009180 	.word	0x08009180
 8002fd8:	080091c0 	.word	0x080091c0
 8002fdc:	08009170 	.word	0x08009170
 8002fe0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8002fe2:	2c01      	cmp	r4, #1
 8002fe4:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 8002fe6:	f340 81a7 	ble.w	8003338 <_vfprintf_r+0xe80>
 8002fea:	3401      	adds	r4, #1
 8002fec:	f10c 0501 	add.w	r5, ip, #1
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	2c07      	cmp	r4, #7
 8002ff4:	9529      	str	r5, [sp, #164]	; 0xa4
 8002ff6:	9428      	str	r4, [sp, #160]	; 0xa0
 8002ff8:	6037      	str	r7, [r6, #0]
 8002ffa:	6073      	str	r3, [r6, #4]
 8002ffc:	f300 81b7 	bgt.w	800336e <_vfprintf_r+0xeb6>
 8003000:	3608      	adds	r6, #8
 8003002:	9814      	ldr	r0, [sp, #80]	; 0x50
 8003004:	9911      	ldr	r1, [sp, #68]	; 0x44
 8003006:	6031      	str	r1, [r6, #0]
 8003008:	3401      	adds	r4, #1
 800300a:	4405      	add	r5, r0
 800300c:	2c07      	cmp	r4, #7
 800300e:	9529      	str	r5, [sp, #164]	; 0xa4
 8003010:	9428      	str	r4, [sp, #160]	; 0xa0
 8003012:	6070      	str	r0, [r6, #4]
 8003014:	f300 81c2 	bgt.w	800339c <_vfprintf_r+0xee4>
 8003018:	3608      	adds	r6, #8
 800301a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800301e:	2200      	movs	r2, #0
 8003020:	2300      	movs	r3, #0
 8003022:	f005 fc59 	bl	80088d8 <__aeabi_dcmpeq>
 8003026:	2800      	cmp	r0, #0
 8003028:	f040 80bd 	bne.w	80031a6 <_vfprintf_r+0xcee>
 800302c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800302e:	3401      	adds	r4, #1
 8003030:	1e53      	subs	r3, r2, #1
 8003032:	3701      	adds	r7, #1
 8003034:	441d      	add	r5, r3
 8003036:	2c07      	cmp	r4, #7
 8003038:	9428      	str	r4, [sp, #160]	; 0xa0
 800303a:	9529      	str	r5, [sp, #164]	; 0xa4
 800303c:	6037      	str	r7, [r6, #0]
 800303e:	6073      	str	r3, [r6, #4]
 8003040:	f300 8189 	bgt.w	8003356 <_vfprintf_r+0xe9e>
 8003044:	3608      	adds	r6, #8
 8003046:	f8dd c054 	ldr.w	ip, [sp, #84]	; 0x54
 800304a:	3401      	adds	r4, #1
 800304c:	44ac      	add	ip, r5
 800304e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8003050:	f8cd c0a4 	str.w	ip, [sp, #164]	; 0xa4
 8003054:	ab23      	add	r3, sp, #140	; 0x8c
 8003056:	2c07      	cmp	r4, #7
 8003058:	9428      	str	r4, [sp, #160]	; 0xa0
 800305a:	e886 0028 	stmia.w	r6, {r3, r5}
 800305e:	f77f ac69 	ble.w	8002934 <_vfprintf_r+0x47c>
 8003062:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003064:	4649      	mov	r1, r9
 8003066:	aa27      	add	r2, sp, #156	; 0x9c
 8003068:	f003 feba 	bl	8006de0 <__sprint_r>
 800306c:	2800      	cmp	r0, #0
 800306e:	f47f ab3b 	bne.w	80026e8 <_vfprintf_r+0x230>
 8003072:	f8dd c0a4 	ldr.w	ip, [sp, #164]	; 0xa4
 8003076:	ae34      	add	r6, sp, #208	; 0xd0
 8003078:	e45d      	b.n	8002936 <_vfprintf_r+0x47e>
 800307a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800307c:	4649      	mov	r1, r9
 800307e:	aa27      	add	r2, sp, #156	; 0x9c
 8003080:	f003 feae 	bl	8006de0 <__sprint_r>
 8003084:	2800      	cmp	r0, #0
 8003086:	f43f aca6 	beq.w	80029d6 <_vfprintf_r+0x51e>
 800308a:	f7ff bb2d 	b.w	80026e8 <_vfprintf_r+0x230>
 800308e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003090:	4649      	mov	r1, r9
 8003092:	aa27      	add	r2, sp, #156	; 0x9c
 8003094:	f003 fea4 	bl	8006de0 <__sprint_r>
 8003098:	2800      	cmp	r0, #0
 800309a:	f47f ab25 	bne.w	80026e8 <_vfprintf_r+0x230>
 800309e:	f8dd c0a4 	ldr.w	ip, [sp, #164]	; 0xa4
 80030a2:	ae34      	add	r6, sp, #208	; 0xd0
 80030a4:	e437      	b.n	8002916 <_vfprintf_r+0x45e>
 80030a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80030a8:	4649      	mov	r1, r9
 80030aa:	aa27      	add	r2, sp, #156	; 0x9c
 80030ac:	f003 fe98 	bl	8006de0 <__sprint_r>
 80030b0:	2800      	cmp	r0, #0
 80030b2:	f47f ab19 	bne.w	80026e8 <_vfprintf_r+0x230>
 80030b6:	f8dd c0a4 	ldr.w	ip, [sp, #164]	; 0xa4
 80030ba:	ae34      	add	r6, sp, #208	; 0xd0
 80030bc:	f7ff bbd4 	b.w	8002868 <_vfprintf_r+0x3b0>
 80030c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80030c2:	4649      	mov	r1, r9
 80030c4:	aa27      	add	r2, sp, #156	; 0x9c
 80030c6:	f003 fe8b 	bl	8006de0 <__sprint_r>
 80030ca:	2800      	cmp	r0, #0
 80030cc:	f47f ab0c 	bne.w	80026e8 <_vfprintf_r+0x230>
 80030d0:	f8dd c0a4 	ldr.w	ip, [sp, #164]	; 0xa4
 80030d4:	ae34      	add	r6, sp, #208	; 0xd0
 80030d6:	f7ff bbd8 	b.w	800288a <_vfprintf_r+0x3d2>
 80030da:	9c07      	ldr	r4, [sp, #28]
 80030dc:	af34      	add	r7, sp, #208	; 0xd0
 80030de:	f7ff bb4b 	b.w	8002778 <_vfprintf_r+0x2c0>
 80030e2:	2302      	movs	r3, #2
 80030e4:	f7ff bb24 	b.w	8002730 <_vfprintf_r+0x278>
 80030e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	f340 8257 	ble.w	800359e <_vfprintf_r+0x10e6>
 80030f0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80030f2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80030f4:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 80030f8:	42ac      	cmp	r4, r5
 80030fa:	bfa8      	it	ge
 80030fc:	462c      	movge	r4, r5
 80030fe:	2c00      	cmp	r4, #0
 8003100:	44b8      	add	r8, r7
 8003102:	dd0b      	ble.n	800311c <_vfprintf_r+0xc64>
 8003104:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003106:	6037      	str	r7, [r6, #0]
 8003108:	3301      	adds	r3, #1
 800310a:	44a4      	add	ip, r4
 800310c:	2b07      	cmp	r3, #7
 800310e:	f8cd c0a4 	str.w	ip, [sp, #164]	; 0xa4
 8003112:	6074      	str	r4, [r6, #4]
 8003114:	9328      	str	r3, [sp, #160]	; 0xa0
 8003116:	f300 82fa 	bgt.w	800370e <_vfprintf_r+0x1256>
 800311a:	3608      	adds	r6, #8
 800311c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800311e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8003122:	1b2c      	subs	r4, r5, r4
 8003124:	2c00      	cmp	r4, #0
 8003126:	f340 80b1 	ble.w	800328c <_vfprintf_r+0xdd4>
 800312a:	2c10      	cmp	r4, #16
 800312c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800312e:	f8df a70c 	ldr.w	sl, [pc, #1804]	; 800383c <_vfprintf_r+0x1384>
 8003132:	f340 821b 	ble.w	800356c <_vfprintf_r+0x10b4>
 8003136:	4651      	mov	r1, sl
 8003138:	2510      	movs	r5, #16
 800313a:	46ba      	mov	sl, r7
 800313c:	4662      	mov	r2, ip
 800313e:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8003142:	460f      	mov	r7, r1
 8003144:	e004      	b.n	8003150 <_vfprintf_r+0xc98>
 8003146:	3608      	adds	r6, #8
 8003148:	3c10      	subs	r4, #16
 800314a:	2c10      	cmp	r4, #16
 800314c:	f340 820a 	ble.w	8003564 <_vfprintf_r+0x10ac>
 8003150:	3301      	adds	r3, #1
 8003152:	3210      	adds	r2, #16
 8003154:	2b07      	cmp	r3, #7
 8003156:	9229      	str	r2, [sp, #164]	; 0xa4
 8003158:	9328      	str	r3, [sp, #160]	; 0xa0
 800315a:	6037      	str	r7, [r6, #0]
 800315c:	6075      	str	r5, [r6, #4]
 800315e:	ddf2      	ble.n	8003146 <_vfprintf_r+0xc8e>
 8003160:	4658      	mov	r0, fp
 8003162:	4649      	mov	r1, r9
 8003164:	aa27      	add	r2, sp, #156	; 0x9c
 8003166:	f003 fe3b 	bl	8006de0 <__sprint_r>
 800316a:	2800      	cmp	r0, #0
 800316c:	f47f aabc 	bne.w	80026e8 <_vfprintf_r+0x230>
 8003170:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8003172:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003174:	ae34      	add	r6, sp, #208	; 0xd0
 8003176:	e7e7      	b.n	8003148 <_vfprintf_r+0xc90>
 8003178:	9809      	ldr	r0, [sp, #36]	; 0x24
 800317a:	4649      	mov	r1, r9
 800317c:	aa27      	add	r2, sp, #156	; 0x9c
 800317e:	f003 fe2f 	bl	8006de0 <__sprint_r>
 8003182:	2800      	cmp	r0, #0
 8003184:	f47f aab0 	bne.w	80026e8 <_vfprintf_r+0x230>
 8003188:	f89d a07f 	ldrb.w	sl, [sp, #127]	; 0x7f
 800318c:	f8dd c0a4 	ldr.w	ip, [sp, #164]	; 0xa4
 8003190:	ae34      	add	r6, sp, #208	; 0xd0
 8003192:	f7ff bb56 	b.w	8002842 <_vfprintf_r+0x38a>
 8003196:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8003198:	682c      	ldr	r4, [r5, #0]
 800319a:	3504      	adds	r5, #4
 800319c:	950b      	str	r5, [sp, #44]	; 0x2c
 800319e:	2301      	movs	r3, #1
 80031a0:	2500      	movs	r5, #0
 80031a2:	f7ff bac5 	b.w	8002730 <_vfprintf_r+0x278>
 80031a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80031a8:	1e5f      	subs	r7, r3, #1
 80031aa:	2f00      	cmp	r7, #0
 80031ac:	f77f af4b 	ble.w	8003046 <_vfprintf_r+0xb8e>
 80031b0:	2f10      	cmp	r7, #16
 80031b2:	f8df a688 	ldr.w	sl, [pc, #1672]	; 800383c <_vfprintf_r+0x1384>
 80031b6:	f340 80e6 	ble.w	8003386 <_vfprintf_r+0xece>
 80031ba:	f04f 0810 	mov.w	r8, #16
 80031be:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80031c2:	e004      	b.n	80031ce <_vfprintf_r+0xd16>
 80031c4:	3608      	adds	r6, #8
 80031c6:	3f10      	subs	r7, #16
 80031c8:	2f10      	cmp	r7, #16
 80031ca:	f340 80dc 	ble.w	8003386 <_vfprintf_r+0xece>
 80031ce:	3401      	adds	r4, #1
 80031d0:	3510      	adds	r5, #16
 80031d2:	2c07      	cmp	r4, #7
 80031d4:	9529      	str	r5, [sp, #164]	; 0xa4
 80031d6:	9428      	str	r4, [sp, #160]	; 0xa0
 80031d8:	f8c6 a000 	str.w	sl, [r6]
 80031dc:	f8c6 8004 	str.w	r8, [r6, #4]
 80031e0:	ddf0      	ble.n	80031c4 <_vfprintf_r+0xd0c>
 80031e2:	4658      	mov	r0, fp
 80031e4:	4649      	mov	r1, r9
 80031e6:	aa27      	add	r2, sp, #156	; 0x9c
 80031e8:	f003 fdfa 	bl	8006de0 <__sprint_r>
 80031ec:	2800      	cmp	r0, #0
 80031ee:	f47f aa7b 	bne.w	80026e8 <_vfprintf_r+0x230>
 80031f2:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 80031f4:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 80031f6:	ae34      	add	r6, sp, #208	; 0xd0
 80031f8:	e7e5      	b.n	80031c6 <_vfprintf_r+0xd0e>
 80031fa:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80031fc:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 8003200:	682c      	ldr	r4, [r5, #0]
 8003202:	f10c 0c04 	add.w	ip, ip, #4
 8003206:	17e5      	asrs	r5, r4, #31
 8003208:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 800320c:	4622      	mov	r2, r4
 800320e:	462b      	mov	r3, r5
 8003210:	e507      	b.n	8002c22 <_vfprintf_r+0x76a>
 8003212:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8003214:	682c      	ldr	r4, [r5, #0]
 8003216:	3504      	adds	r5, #4
 8003218:	950b      	str	r5, [sp, #44]	; 0x2c
 800321a:	2500      	movs	r5, #0
 800321c:	f7ff ba88 	b.w	8002730 <_vfprintf_r+0x278>
 8003220:	4694      	mov	ip, r2
 8003222:	46ba      	mov	sl, r7
 8003224:	3301      	adds	r3, #1
 8003226:	44a4      	add	ip, r4
 8003228:	2b07      	cmp	r3, #7
 800322a:	f8cd c0a4 	str.w	ip, [sp, #164]	; 0xa4
 800322e:	9328      	str	r3, [sp, #160]	; 0xa0
 8003230:	f8c6 a000 	str.w	sl, [r6]
 8003234:	6074      	str	r4, [r6, #4]
 8003236:	f77f ab7d 	ble.w	8002934 <_vfprintf_r+0x47c>
 800323a:	e712      	b.n	8003062 <_vfprintf_r+0xbaa>
 800323c:	f10d 0bcf 	add.w	fp, sp, #207	; 0xcf
 8003240:	4620      	mov	r0, r4
 8003242:	4629      	mov	r1, r5
 8003244:	220a      	movs	r2, #10
 8003246:	2300      	movs	r3, #0
 8003248:	f005 fba0 	bl	800898c <__aeabi_uldivmod>
 800324c:	3230      	adds	r2, #48	; 0x30
 800324e:	f88b 2000 	strb.w	r2, [fp]
 8003252:	4620      	mov	r0, r4
 8003254:	4629      	mov	r1, r5
 8003256:	220a      	movs	r2, #10
 8003258:	2300      	movs	r3, #0
 800325a:	f005 fb97 	bl	800898c <__aeabi_uldivmod>
 800325e:	4604      	mov	r4, r0
 8003260:	460d      	mov	r5, r1
 8003262:	ea54 0c05 	orrs.w	ip, r4, r5
 8003266:	465f      	mov	r7, fp
 8003268:	f10b 3bff 	add.w	fp, fp, #4294967295
 800326c:	d1e8      	bne.n	8003240 <_vfprintf_r+0xd88>
 800326e:	9d04      	ldr	r5, [sp, #16]
 8003270:	1bec      	subs	r4, r5, r7
 8003272:	f7ff ba81 	b.w	8002778 <_vfprintf_r+0x2c0>
 8003276:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003278:	4649      	mov	r1, r9
 800327a:	aa27      	add	r2, sp, #156	; 0x9c
 800327c:	f003 fdb0 	bl	8006de0 <__sprint_r>
 8003280:	2800      	cmp	r0, #0
 8003282:	f47f aa31 	bne.w	80026e8 <_vfprintf_r+0x230>
 8003286:	f8dd c0a4 	ldr.w	ip, [sp, #164]	; 0xa4
 800328a:	ae34      	add	r6, sp, #208	; 0xd0
 800328c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800328e:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8003290:	442f      	add	r7, r5
 8003292:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8003294:	42ac      	cmp	r4, r5
 8003296:	db40      	blt.n	800331a <_vfprintf_r+0xe62>
 8003298:	9d05      	ldr	r5, [sp, #20]
 800329a:	07e8      	lsls	r0, r5, #31
 800329c:	d43d      	bmi.n	800331a <_vfprintf_r+0xe62>
 800329e:	980d      	ldr	r0, [sp, #52]	; 0x34
 80032a0:	ebc7 0508 	rsb	r5, r7, r8
 80032a4:	1b04      	subs	r4, r0, r4
 80032a6:	42ac      	cmp	r4, r5
 80032a8:	bfb8      	it	lt
 80032aa:	4625      	movlt	r5, r4
 80032ac:	2d00      	cmp	r5, #0
 80032ae:	dd0b      	ble.n	80032c8 <_vfprintf_r+0xe10>
 80032b0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80032b2:	6037      	str	r7, [r6, #0]
 80032b4:	3301      	adds	r3, #1
 80032b6:	44ac      	add	ip, r5
 80032b8:	2b07      	cmp	r3, #7
 80032ba:	f8cd c0a4 	str.w	ip, [sp, #164]	; 0xa4
 80032be:	6075      	str	r5, [r6, #4]
 80032c0:	9328      	str	r3, [sp, #160]	; 0xa0
 80032c2:	f300 824b 	bgt.w	800375c <_vfprintf_r+0x12a4>
 80032c6:	3608      	adds	r6, #8
 80032c8:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80032cc:	1b64      	subs	r4, r4, r5
 80032ce:	2c00      	cmp	r4, #0
 80032d0:	f77f ab31 	ble.w	8002936 <_vfprintf_r+0x47e>
 80032d4:	2c10      	cmp	r4, #16
 80032d6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80032d8:	f8df a560 	ldr.w	sl, [pc, #1376]	; 800383c <_vfprintf_r+0x1384>
 80032dc:	dda2      	ble.n	8003224 <_vfprintf_r+0xd6c>
 80032de:	2510      	movs	r5, #16
 80032e0:	4662      	mov	r2, ip
 80032e2:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 80032e6:	4657      	mov	r7, sl
 80032e8:	e003      	b.n	80032f2 <_vfprintf_r+0xe3a>
 80032ea:	3608      	adds	r6, #8
 80032ec:	3c10      	subs	r4, #16
 80032ee:	2c10      	cmp	r4, #16
 80032f0:	dd96      	ble.n	8003220 <_vfprintf_r+0xd68>
 80032f2:	3301      	adds	r3, #1
 80032f4:	3210      	adds	r2, #16
 80032f6:	2b07      	cmp	r3, #7
 80032f8:	9229      	str	r2, [sp, #164]	; 0xa4
 80032fa:	9328      	str	r3, [sp, #160]	; 0xa0
 80032fc:	6037      	str	r7, [r6, #0]
 80032fe:	6075      	str	r5, [r6, #4]
 8003300:	ddf3      	ble.n	80032ea <_vfprintf_r+0xe32>
 8003302:	4640      	mov	r0, r8
 8003304:	4649      	mov	r1, r9
 8003306:	aa27      	add	r2, sp, #156	; 0x9c
 8003308:	f003 fd6a 	bl	8006de0 <__sprint_r>
 800330c:	2800      	cmp	r0, #0
 800330e:	f47f a9eb 	bne.w	80026e8 <_vfprintf_r+0x230>
 8003312:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8003314:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003316:	ae34      	add	r6, sp, #208	; 0xd0
 8003318:	e7e8      	b.n	80032ec <_vfprintf_r+0xe34>
 800331a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800331c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800331e:	6035      	str	r5, [r6, #0]
 8003320:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8003322:	6075      	str	r5, [r6, #4]
 8003324:	3301      	adds	r3, #1
 8003326:	44ac      	add	ip, r5
 8003328:	2b07      	cmp	r3, #7
 800332a:	f8cd c0a4 	str.w	ip, [sp, #164]	; 0xa4
 800332e:	9328      	str	r3, [sp, #160]	; 0xa0
 8003330:	f300 8207 	bgt.w	8003742 <_vfprintf_r+0x128a>
 8003334:	3608      	adds	r6, #8
 8003336:	e7b2      	b.n	800329e <_vfprintf_r+0xde6>
 8003338:	9d05      	ldr	r5, [sp, #20]
 800333a:	07e9      	lsls	r1, r5, #31
 800333c:	f53f ae55 	bmi.w	8002fea <_vfprintf_r+0xb32>
 8003340:	3401      	adds	r4, #1
 8003342:	f10c 0501 	add.w	r5, ip, #1
 8003346:	2301      	movs	r3, #1
 8003348:	2c07      	cmp	r4, #7
 800334a:	9529      	str	r5, [sp, #164]	; 0xa4
 800334c:	9428      	str	r4, [sp, #160]	; 0xa0
 800334e:	6037      	str	r7, [r6, #0]
 8003350:	6073      	str	r3, [r6, #4]
 8003352:	f77f ae77 	ble.w	8003044 <_vfprintf_r+0xb8c>
 8003356:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003358:	4649      	mov	r1, r9
 800335a:	aa27      	add	r2, sp, #156	; 0x9c
 800335c:	f003 fd40 	bl	8006de0 <__sprint_r>
 8003360:	2800      	cmp	r0, #0
 8003362:	f47f a9c1 	bne.w	80026e8 <_vfprintf_r+0x230>
 8003366:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 8003368:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 800336a:	ae34      	add	r6, sp, #208	; 0xd0
 800336c:	e66b      	b.n	8003046 <_vfprintf_r+0xb8e>
 800336e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003370:	4649      	mov	r1, r9
 8003372:	aa27      	add	r2, sp, #156	; 0x9c
 8003374:	f003 fd34 	bl	8006de0 <__sprint_r>
 8003378:	2800      	cmp	r0, #0
 800337a:	f47f a9b5 	bne.w	80026e8 <_vfprintf_r+0x230>
 800337e:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 8003380:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 8003382:	ae34      	add	r6, sp, #208	; 0xd0
 8003384:	e63d      	b.n	8003002 <_vfprintf_r+0xb4a>
 8003386:	3401      	adds	r4, #1
 8003388:	443d      	add	r5, r7
 800338a:	2c07      	cmp	r4, #7
 800338c:	9529      	str	r5, [sp, #164]	; 0xa4
 800338e:	9428      	str	r4, [sp, #160]	; 0xa0
 8003390:	f8c6 a000 	str.w	sl, [r6]
 8003394:	6077      	str	r7, [r6, #4]
 8003396:	f77f ae55 	ble.w	8003044 <_vfprintf_r+0xb8c>
 800339a:	e7dc      	b.n	8003356 <_vfprintf_r+0xe9e>
 800339c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800339e:	4649      	mov	r1, r9
 80033a0:	aa27      	add	r2, sp, #156	; 0x9c
 80033a2:	f003 fd1d 	bl	8006de0 <__sprint_r>
 80033a6:	2800      	cmp	r0, #0
 80033a8:	f47f a99e 	bne.w	80026e8 <_vfprintf_r+0x230>
 80033ac:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 80033ae:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 80033b0:	ae34      	add	r6, sp, #208	; 0xd0
 80033b2:	e632      	b.n	800301a <_vfprintf_r+0xb62>
 80033b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80033b6:	4649      	mov	r1, r9
 80033b8:	aa27      	add	r2, sp, #156	; 0x9c
 80033ba:	f003 fd11 	bl	8006de0 <__sprint_r>
 80033be:	2800      	cmp	r0, #0
 80033c0:	f47f a992 	bne.w	80026e8 <_vfprintf_r+0x230>
 80033c4:	f8dd c0a4 	ldr.w	ip, [sp, #164]	; 0xa4
 80033c8:	ae34      	add	r6, sp, #208	; 0xd0
 80033ca:	f7ff ba62 	b.w	8002892 <_vfprintf_r+0x3da>
 80033ce:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
 80033d2:	4264      	negs	r4, r4
 80033d4:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 80033d8:	f88d a07f 	strb.w	sl, [sp, #127]	; 0x7f
 80033dc:	2301      	movs	r3, #1
 80033de:	f7ff b9ab 	b.w	8002738 <_vfprintf_r+0x280>
 80033e2:	ed9d 0b12 	vldr	d0, [sp, #72]	; 0x48
 80033e6:	f003 fb2f 	bl	8006a48 <__fpclassifyd>
 80033ea:	2800      	cmp	r0, #0
 80033ec:	f000 8123 	beq.w	8003636 <_vfprintf_r+0x117e>
 80033f0:	9c07      	ldr	r4, [sp, #28]
 80033f2:	3401      	adds	r4, #1
 80033f4:	f028 0a20 	bic.w	sl, r8, #32
 80033f8:	f000 826f 	beq.w	80038da <_vfprintf_r+0x1422>
 80033fc:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8003400:	d104      	bne.n	800340c <_vfprintf_r+0xf54>
 8003402:	9c07      	ldr	r4, [sp, #28]
 8003404:	2c00      	cmp	r4, #0
 8003406:	bf08      	it	eq
 8003408:	2401      	moveq	r4, #1
 800340a:	9407      	str	r4, [sp, #28]
 800340c:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8003410:	9d05      	ldr	r5, [sp, #20]
 8003412:	2b00      	cmp	r3, #0
 8003414:	f445 7580 	orr.w	r5, r5, #256	; 0x100
 8003418:	950e      	str	r5, [sp, #56]	; 0x38
 800341a:	f2c0 8255 	blt.w	80038c8 <_vfprintf_r+0x1410>
 800341e:	ed9d 7b12 	vldr	d7, [sp, #72]	; 0x48
 8003422:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
 8003426:	f04f 0b00 	mov.w	fp, #0
 800342a:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800342e:	f000 81da 	beq.w	80037e6 <_vfprintf_r+0x132e>
 8003432:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003436:	f000 81d6 	beq.w	80037e6 <_vfprintf_r+0x132e>
 800343a:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
 800343e:	bf0c      	ite	eq
 8003440:	9c07      	ldreq	r4, [sp, #28]
 8003442:	9d07      	ldrne	r5, [sp, #28]
 8003444:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003446:	bf08      	it	eq
 8003448:	1c65      	addeq	r5, r4, #1
 800344a:	aa22      	add	r2, sp, #136	; 0x88
 800344c:	ab25      	add	r3, sp, #148	; 0x94
 800344e:	e88d 000c 	stmia.w	sp, {r2, r3}
 8003452:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
 8003456:	2102      	movs	r1, #2
 8003458:	462a      	mov	r2, r5
 800345a:	ab21      	add	r3, sp, #132	; 0x84
 800345c:	f000 fc98 	bl	8003d90 <_dtoa_r>
 8003460:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8003464:	4607      	mov	r7, r0
 8003466:	d002      	beq.n	800346e <_vfprintf_r+0xfb6>
 8003468:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800346c:	d105      	bne.n	800347a <_vfprintf_r+0xfc2>
 800346e:	f8dd c014 	ldr.w	ip, [sp, #20]
 8003472:	f01c 0f01 	tst.w	ip, #1
 8003476:	f000 8233 	beq.w	80038e0 <_vfprintf_r+0x1428>
 800347a:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
 800347e:	eb07 0405 	add.w	r4, r7, r5
 8003482:	f000 81cb 	beq.w	800381c <_vfprintf_r+0x1364>
 8003486:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 800348a:	2200      	movs	r2, #0
 800348c:	2300      	movs	r3, #0
 800348e:	f005 fa23 	bl	80088d8 <__aeabi_dcmpeq>
 8003492:	2800      	cmp	r0, #0
 8003494:	f040 81a5 	bne.w	80037e2 <_vfprintf_r+0x132a>
 8003498:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800349a:	429c      	cmp	r4, r3
 800349c:	d906      	bls.n	80034ac <_vfprintf_r+0xff4>
 800349e:	2130      	movs	r1, #48	; 0x30
 80034a0:	1c5a      	adds	r2, r3, #1
 80034a2:	9225      	str	r2, [sp, #148]	; 0x94
 80034a4:	7019      	strb	r1, [r3, #0]
 80034a6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80034a8:	429c      	cmp	r4, r3
 80034aa:	d8f9      	bhi.n	80034a0 <_vfprintf_r+0xfe8>
 80034ac:	1bdb      	subs	r3, r3, r7
 80034ae:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80034b2:	930d      	str	r3, [sp, #52]	; 0x34
 80034b4:	f000 818d 	beq.w	80037d2 <_vfprintf_r+0x131a>
 80034b8:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80034bc:	f340 8292 	ble.w	80039e4 <_vfprintf_r+0x152c>
 80034c0:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80034c4:	f000 823c 	beq.w	8003940 <_vfprintf_r+0x1488>
 80034c8:	9c21      	ldr	r4, [sp, #132]	; 0x84
 80034ca:	9410      	str	r4, [sp, #64]	; 0x40
 80034cc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80034ce:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80034d0:	42ac      	cmp	r4, r5
 80034d2:	f300 81ec 	bgt.w	80038ae <_vfprintf_r+0x13f6>
 80034d6:	f8dd c014 	ldr.w	ip, [sp, #20]
 80034da:	f01c 0f01 	tst.w	ip, #1
 80034de:	f040 823c 	bne.w	800395a <_vfprintf_r+0x14a2>
 80034e2:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 80034e6:	462c      	mov	r4, r5
 80034e8:	f04f 0867 	mov.w	r8, #103	; 0x67
 80034ec:	f1bb 0f00 	cmp.w	fp, #0
 80034f0:	f040 8164 	bne.w	80037bc <_vfprintf_r+0x1304>
 80034f4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80034f6:	9308      	str	r3, [sp, #32]
 80034f8:	9505      	str	r5, [sp, #20]
 80034fa:	f8cd b01c 	str.w	fp, [sp, #28]
 80034fe:	f89d a07f 	ldrb.w	sl, [sp, #127]	; 0x7f
 8003502:	f7ff b942 	b.w	800278a <_vfprintf_r+0x2d2>
 8003506:	f8dd c014 	ldr.w	ip, [sp, #20]
 800350a:	f01c 0f10 	tst.w	ip, #16
 800350e:	f040 80ab 	bne.w	8003668 <_vfprintf_r+0x11b0>
 8003512:	f8dd c014 	ldr.w	ip, [sp, #20]
 8003516:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800351a:	f000 813d 	beq.w	8003798 <_vfprintf_r+0x12e0>
 800351e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8003520:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003522:	6823      	ldr	r3, [r4, #0]
 8003524:	3404      	adds	r4, #4
 8003526:	940b      	str	r4, [sp, #44]	; 0x2c
 8003528:	801d      	strh	r5, [r3, #0]
 800352a:	f7ff b806 	b.w	800253a <_vfprintf_r+0x82>
 800352e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8003530:	1de3      	adds	r3, r4, #7
 8003532:	f023 0307 	bic.w	r3, r3, #7
 8003536:	ed93 7b00 	vldr	d7, [r3]
 800353a:	3308      	adds	r3, #8
 800353c:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 8003540:	930b      	str	r3, [sp, #44]	; 0x2c
 8003542:	f7ff bbf2 	b.w	8002d2a <_vfprintf_r+0x872>
 8003546:	9c05      	ldr	r4, [sp, #20]
 8003548:	0664      	lsls	r4, r4, #25
 800354a:	f140 8086 	bpl.w	800365a <_vfprintf_r+0x11a2>
 800354e:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 8003552:	f8bc 4000 	ldrh.w	r4, [ip]
 8003556:	f10c 0c04 	add.w	ip, ip, #4
 800355a:	2500      	movs	r5, #0
 800355c:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 8003560:	f7ff bac1 	b.w	8002ae6 <_vfprintf_r+0x62e>
 8003564:	4694      	mov	ip, r2
 8003566:	463a      	mov	r2, r7
 8003568:	4657      	mov	r7, sl
 800356a:	4692      	mov	sl, r2
 800356c:	3301      	adds	r3, #1
 800356e:	44a4      	add	ip, r4
 8003570:	2b07      	cmp	r3, #7
 8003572:	f8cd c0a4 	str.w	ip, [sp, #164]	; 0xa4
 8003576:	9328      	str	r3, [sp, #160]	; 0xa0
 8003578:	f8c6 a000 	str.w	sl, [r6]
 800357c:	6074      	str	r4, [r6, #4]
 800357e:	f73f ae7a 	bgt.w	8003276 <_vfprintf_r+0xdbe>
 8003582:	3608      	adds	r6, #8
 8003584:	e682      	b.n	800328c <_vfprintf_r+0xdd4>
 8003586:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003588:	4649      	mov	r1, r9
 800358a:	aa27      	add	r2, sp, #156	; 0x9c
 800358c:	f003 fc28 	bl	8006de0 <__sprint_r>
 8003590:	2800      	cmp	r0, #0
 8003592:	f47f a8a9 	bne.w	80026e8 <_vfprintf_r+0x230>
 8003596:	f8dd c0a4 	ldr.w	ip, [sp, #164]	; 0xa4
 800359a:	ae34      	add	r6, sp, #208	; 0xd0
 800359c:	e485      	b.n	8002eaa <_vfprintf_r+0x9f2>
 800359e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80035a0:	49a2      	ldr	r1, [pc, #648]	; (800382c <_vfprintf_r+0x1374>)
 80035a2:	6031      	str	r1, [r6, #0]
 80035a4:	3201      	adds	r2, #1
 80035a6:	f10c 0c01 	add.w	ip, ip, #1
 80035aa:	2101      	movs	r1, #1
 80035ac:	2a07      	cmp	r2, #7
 80035ae:	f8cd c0a4 	str.w	ip, [sp, #164]	; 0xa4
 80035b2:	9228      	str	r2, [sp, #160]	; 0xa0
 80035b4:	6071      	str	r1, [r6, #4]
 80035b6:	dc5f      	bgt.n	8003678 <_vfprintf_r+0x11c0>
 80035b8:	3608      	adds	r6, #8
 80035ba:	461c      	mov	r4, r3
 80035bc:	b92c      	cbnz	r4, 80035ca <_vfprintf_r+0x1112>
 80035be:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80035c0:	b91d      	cbnz	r5, 80035ca <_vfprintf_r+0x1112>
 80035c2:	9d05      	ldr	r5, [sp, #20]
 80035c4:	07ed      	lsls	r5, r5, #31
 80035c6:	f57f a9b6 	bpl.w	8002936 <_vfprintf_r+0x47e>
 80035ca:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80035cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80035ce:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80035d0:	6035      	str	r5, [r6, #0]
 80035d2:	3301      	adds	r3, #1
 80035d4:	4462      	add	r2, ip
 80035d6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80035d8:	9229      	str	r2, [sp, #164]	; 0xa4
 80035da:	2b07      	cmp	r3, #7
 80035dc:	6075      	str	r5, [r6, #4]
 80035de:	9328      	str	r3, [sp, #160]	; 0xa0
 80035e0:	f300 8153 	bgt.w	800388a <_vfprintf_r+0x13d2>
 80035e4:	3608      	adds	r6, #8
 80035e6:	4264      	negs	r4, r4
 80035e8:	2c00      	cmp	r4, #0
 80035ea:	dd72      	ble.n	80036d2 <_vfprintf_r+0x121a>
 80035ec:	2c10      	cmp	r4, #16
 80035ee:	f8df a24c 	ldr.w	sl, [pc, #588]	; 800383c <_vfprintf_r+0x1384>
 80035f2:	f340 809b 	ble.w	800372c <_vfprintf_r+0x1274>
 80035f6:	4651      	mov	r1, sl
 80035f8:	2510      	movs	r5, #16
 80035fa:	46ba      	mov	sl, r7
 80035fc:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8003600:	460f      	mov	r7, r1
 8003602:	e004      	b.n	800360e <_vfprintf_r+0x1156>
 8003604:	3608      	adds	r6, #8
 8003606:	3c10      	subs	r4, #16
 8003608:	2c10      	cmp	r4, #16
 800360a:	f340 808c 	ble.w	8003726 <_vfprintf_r+0x126e>
 800360e:	3301      	adds	r3, #1
 8003610:	3210      	adds	r2, #16
 8003612:	2b07      	cmp	r3, #7
 8003614:	9229      	str	r2, [sp, #164]	; 0xa4
 8003616:	9328      	str	r3, [sp, #160]	; 0xa0
 8003618:	6037      	str	r7, [r6, #0]
 800361a:	6075      	str	r5, [r6, #4]
 800361c:	ddf2      	ble.n	8003604 <_vfprintf_r+0x114c>
 800361e:	4640      	mov	r0, r8
 8003620:	4649      	mov	r1, r9
 8003622:	aa27      	add	r2, sp, #156	; 0x9c
 8003624:	f003 fbdc 	bl	8006de0 <__sprint_r>
 8003628:	2800      	cmp	r0, #0
 800362a:	f47f a85d 	bne.w	80026e8 <_vfprintf_r+0x230>
 800362e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8003630:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003632:	ae34      	add	r6, sp, #208	; 0xd0
 8003634:	e7e7      	b.n	8003606 <_vfprintf_r+0x114e>
 8003636:	9d05      	ldr	r5, [sp, #20]
 8003638:	4f7d      	ldr	r7, [pc, #500]	; (8003830 <_vfprintf_r+0x1378>)
 800363a:	4b7e      	ldr	r3, [pc, #504]	; (8003834 <_vfprintf_r+0x137c>)
 800363c:	f89d a07f 	ldrb.w	sl, [sp, #127]	; 0x7f
 8003640:	9007      	str	r0, [sp, #28]
 8003642:	2403      	movs	r4, #3
 8003644:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8003648:	9408      	str	r4, [sp, #32]
 800364a:	9505      	str	r5, [sp, #20]
 800364c:	9010      	str	r0, [sp, #64]	; 0x40
 800364e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003652:	bfd8      	it	le
 8003654:	461f      	movle	r7, r3
 8003656:	f7ff b898 	b.w	800278a <_vfprintf_r+0x2d2>
 800365a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800365c:	682c      	ldr	r4, [r5, #0]
 800365e:	3504      	adds	r5, #4
 8003660:	950b      	str	r5, [sp, #44]	; 0x2c
 8003662:	2500      	movs	r5, #0
 8003664:	f7ff ba3f 	b.w	8002ae6 <_vfprintf_r+0x62e>
 8003668:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800366a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800366c:	6823      	ldr	r3, [r4, #0]
 800366e:	3404      	adds	r4, #4
 8003670:	940b      	str	r4, [sp, #44]	; 0x2c
 8003672:	601d      	str	r5, [r3, #0]
 8003674:	f7fe bf61 	b.w	800253a <_vfprintf_r+0x82>
 8003678:	9809      	ldr	r0, [sp, #36]	; 0x24
 800367a:	4649      	mov	r1, r9
 800367c:	aa27      	add	r2, sp, #156	; 0x9c
 800367e:	f003 fbaf 	bl	8006de0 <__sprint_r>
 8003682:	2800      	cmp	r0, #0
 8003684:	f47f a830 	bne.w	80026e8 <_vfprintf_r+0x230>
 8003688:	9c21      	ldr	r4, [sp, #132]	; 0x84
 800368a:	f8dd c0a4 	ldr.w	ip, [sp, #164]	; 0xa4
 800368e:	ae34      	add	r6, sp, #208	; 0xd0
 8003690:	e794      	b.n	80035bc <_vfprintf_r+0x1104>
 8003692:	9c05      	ldr	r4, [sp, #20]
 8003694:	f891 8001 	ldrb.w	r8, [r1, #1]
 8003698:	f044 0420 	orr.w	r4, r4, #32
 800369c:	3301      	adds	r3, #1
 800369e:	9405      	str	r4, [sp, #20]
 80036a0:	f7fe bf85 	b.w	80025ae <_vfprintf_r+0xf6>
 80036a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80036a6:	4649      	mov	r1, r9
 80036a8:	aa27      	add	r2, sp, #156	; 0x9c
 80036aa:	f003 fb99 	bl	8006de0 <__sprint_r>
 80036ae:	2800      	cmp	r0, #0
 80036b0:	f47f a81a 	bne.w	80026e8 <_vfprintf_r+0x230>
 80036b4:	f8dd c0a4 	ldr.w	ip, [sp, #164]	; 0xa4
 80036b8:	ae34      	add	r6, sp, #208	; 0xd0
 80036ba:	e40c      	b.n	8002ed6 <_vfprintf_r+0xa1e>
 80036bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80036be:	4649      	mov	r1, r9
 80036c0:	aa27      	add	r2, sp, #156	; 0x9c
 80036c2:	f003 fb8d 	bl	8006de0 <__sprint_r>
 80036c6:	2800      	cmp	r0, #0
 80036c8:	f47f a80e 	bne.w	80026e8 <_vfprintf_r+0x230>
 80036cc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80036ce:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80036d0:	ae34      	add	r6, sp, #208	; 0xd0
 80036d2:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 80036d6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80036d8:	6037      	str	r7, [r6, #0]
 80036da:	3301      	adds	r3, #1
 80036dc:	4494      	add	ip, r2
 80036de:	2b07      	cmp	r3, #7
 80036e0:	f8cd c0a4 	str.w	ip, [sp, #164]	; 0xa4
 80036e4:	9328      	str	r3, [sp, #160]	; 0xa0
 80036e6:	6074      	str	r4, [r6, #4]
 80036e8:	f77f a924 	ble.w	8002934 <_vfprintf_r+0x47c>
 80036ec:	e4b9      	b.n	8003062 <_vfprintf_r+0xbaa>
 80036ee:	f8cd a01c 	str.w	sl, [sp, #28]
 80036f2:	f7fe feaf 	bl	8002454 <strlen>
 80036f6:	950b      	str	r5, [sp, #44]	; 0x2c
 80036f8:	ea20 7ce0 	bic.w	ip, r0, r0, asr #31
 80036fc:	9d07      	ldr	r5, [sp, #28]
 80036fe:	f8cd c020 	str.w	ip, [sp, #32]
 8003702:	4604      	mov	r4, r0
 8003704:	9510      	str	r5, [sp, #64]	; 0x40
 8003706:	f89d a07f 	ldrb.w	sl, [sp, #127]	; 0x7f
 800370a:	f7ff b83e 	b.w	800278a <_vfprintf_r+0x2d2>
 800370e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003710:	4649      	mov	r1, r9
 8003712:	aa27      	add	r2, sp, #156	; 0x9c
 8003714:	f003 fb64 	bl	8006de0 <__sprint_r>
 8003718:	2800      	cmp	r0, #0
 800371a:	f47e afe5 	bne.w	80026e8 <_vfprintf_r+0x230>
 800371e:	f8dd c0a4 	ldr.w	ip, [sp, #164]	; 0xa4
 8003722:	ae34      	add	r6, sp, #208	; 0xd0
 8003724:	e4fa      	b.n	800311c <_vfprintf_r+0xc64>
 8003726:	4639      	mov	r1, r7
 8003728:	4657      	mov	r7, sl
 800372a:	468a      	mov	sl, r1
 800372c:	3301      	adds	r3, #1
 800372e:	4422      	add	r2, r4
 8003730:	2b07      	cmp	r3, #7
 8003732:	9229      	str	r2, [sp, #164]	; 0xa4
 8003734:	9328      	str	r3, [sp, #160]	; 0xa0
 8003736:	f8c6 a000 	str.w	sl, [r6]
 800373a:	6074      	str	r4, [r6, #4]
 800373c:	dcbe      	bgt.n	80036bc <_vfprintf_r+0x1204>
 800373e:	3608      	adds	r6, #8
 8003740:	e7c7      	b.n	80036d2 <_vfprintf_r+0x121a>
 8003742:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003744:	4649      	mov	r1, r9
 8003746:	aa27      	add	r2, sp, #156	; 0x9c
 8003748:	f003 fb4a 	bl	8006de0 <__sprint_r>
 800374c:	2800      	cmp	r0, #0
 800374e:	f47e afcb 	bne.w	80026e8 <_vfprintf_r+0x230>
 8003752:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8003754:	f8dd c0a4 	ldr.w	ip, [sp, #164]	; 0xa4
 8003758:	ae34      	add	r6, sp, #208	; 0xd0
 800375a:	e5a0      	b.n	800329e <_vfprintf_r+0xde6>
 800375c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800375e:	4649      	mov	r1, r9
 8003760:	aa27      	add	r2, sp, #156	; 0x9c
 8003762:	f003 fb3d 	bl	8006de0 <__sprint_r>
 8003766:	2800      	cmp	r0, #0
 8003768:	f47e afbe 	bne.w	80026e8 <_vfprintf_r+0x230>
 800376c:	9c21      	ldr	r4, [sp, #132]	; 0x84
 800376e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003770:	f8dd c0a4 	ldr.w	ip, [sp, #164]	; 0xa4
 8003774:	1b0c      	subs	r4, r1, r4
 8003776:	ae34      	add	r6, sp, #208	; 0xd0
 8003778:	e5a6      	b.n	80032c8 <_vfprintf_r+0xe10>
 800377a:	9c07      	ldr	r4, [sp, #28]
 800377c:	9710      	str	r7, [sp, #64]	; 0x40
 800377e:	2c06      	cmp	r4, #6
 8003780:	bf28      	it	cs
 8003782:	2406      	movcs	r4, #6
 8003784:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
 8003788:	46ba      	mov	sl, r7
 800378a:	9707      	str	r7, [sp, #28]
 800378c:	950b      	str	r5, [sp, #44]	; 0x2c
 800378e:	f8cd c020 	str.w	ip, [sp, #32]
 8003792:	4f29      	ldr	r7, [pc, #164]	; (8003838 <_vfprintf_r+0x1380>)
 8003794:	f7fe bff9 	b.w	800278a <_vfprintf_r+0x2d2>
 8003798:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 800379c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800379e:	f8dc 3000 	ldr.w	r3, [ip]
 80037a2:	f10c 0c04 	add.w	ip, ip, #4
 80037a6:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 80037aa:	601c      	str	r4, [r3, #0]
 80037ac:	f7fe bec5 	b.w	800253a <_vfprintf_r+0x82>
 80037b0:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
 80037b4:	f88d a07f 	strb.w	sl, [sp, #127]	; 0x7f
 80037b8:	f7ff bac9 	b.w	8002d4e <_vfprintf_r+0x896>
 80037bc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80037be:	9505      	str	r5, [sp, #20]
 80037c0:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
 80037c4:	2500      	movs	r5, #0
 80037c6:	9308      	str	r3, [sp, #32]
 80037c8:	f88d a07f 	strb.w	sl, [sp, #127]	; 0x7f
 80037cc:	9507      	str	r5, [sp, #28]
 80037ce:	f7fe bfdf 	b.w	8002790 <_vfprintf_r+0x2d8>
 80037d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80037d4:	1cdc      	adds	r4, r3, #3
 80037d6:	db33      	blt.n	8003840 <_vfprintf_r+0x1388>
 80037d8:	9c07      	ldr	r4, [sp, #28]
 80037da:	429c      	cmp	r4, r3
 80037dc:	db30      	blt.n	8003840 <_vfprintf_r+0x1388>
 80037de:	9310      	str	r3, [sp, #64]	; 0x40
 80037e0:	e674      	b.n	80034cc <_vfprintf_r+0x1014>
 80037e2:	4623      	mov	r3, r4
 80037e4:	e662      	b.n	80034ac <_vfprintf_r+0xff4>
 80037e6:	aa22      	add	r2, sp, #136	; 0x88
 80037e8:	ab25      	add	r3, sp, #148	; 0x94
 80037ea:	e88d 000c 	stmia.w	sp, {r2, r3}
 80037ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 80037f0:	9a07      	ldr	r2, [sp, #28]
 80037f2:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
 80037f6:	2103      	movs	r1, #3
 80037f8:	ab21      	add	r3, sp, #132	; 0x84
 80037fa:	f000 fac9 	bl	8003d90 <_dtoa_r>
 80037fe:	9d07      	ldr	r5, [sp, #28]
 8003800:	4607      	mov	r7, r0
 8003802:	e63a      	b.n	800347a <_vfprintf_r+0xfc2>
 8003804:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
 8003808:	f8cd c020 	str.w	ip, [sp, #32]
 800380c:	9c07      	ldr	r4, [sp, #28]
 800380e:	950b      	str	r5, [sp, #44]	; 0x2c
 8003810:	9007      	str	r0, [sp, #28]
 8003812:	9010      	str	r0, [sp, #64]	; 0x40
 8003814:	f89d a07f 	ldrb.w	sl, [sp, #127]	; 0x7f
 8003818:	f7fe bfb7 	b.w	800278a <_vfprintf_r+0x2d2>
 800381c:	783b      	ldrb	r3, [r7, #0]
 800381e:	2b30      	cmp	r3, #48	; 0x30
 8003820:	f000 80a2 	beq.w	8003968 <_vfprintf_r+0x14b0>
 8003824:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8003826:	442c      	add	r4, r5
 8003828:	e62d      	b.n	8003486 <_vfprintf_r+0xfce>
 800382a:	bf00      	nop
 800382c:	080091c0 	.word	0x080091c0
 8003830:	0800918c 	.word	0x0800918c
 8003834:	08009188 	.word	0x08009188
 8003838:	080091b8 	.word	0x080091b8
 800383c:	08009170 	.word	0x08009170
 8003840:	f1a8 0802 	sub.w	r8, r8, #2
 8003844:	3b01      	subs	r3, #1
 8003846:	2b00      	cmp	r3, #0
 8003848:	9321      	str	r3, [sp, #132]	; 0x84
 800384a:	bfba      	itte	lt
 800384c:	425b      	neglt	r3, r3
 800384e:	222d      	movlt	r2, #45	; 0x2d
 8003850:	222b      	movge	r2, #43	; 0x2b
 8003852:	2b09      	cmp	r3, #9
 8003854:	f88d 808c 	strb.w	r8, [sp, #140]	; 0x8c
 8003858:	f88d 208d 	strb.w	r2, [sp, #141]	; 0x8d
 800385c:	dc42      	bgt.n	80038e4 <_vfprintf_r+0x142c>
 800385e:	3330      	adds	r3, #48	; 0x30
 8003860:	2230      	movs	r2, #48	; 0x30
 8003862:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
 8003866:	f88d 208e 	strb.w	r2, [sp, #142]	; 0x8e
 800386a:	ab24      	add	r3, sp, #144	; 0x90
 800386c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800386e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8003870:	aa23      	add	r2, sp, #140	; 0x8c
 8003872:	1a9a      	subs	r2, r3, r2
 8003874:	2d01      	cmp	r5, #1
 8003876:	9215      	str	r2, [sp, #84]	; 0x54
 8003878:	4414      	add	r4, r2
 800387a:	f340 8091 	ble.w	80039a0 <_vfprintf_r+0x14e8>
 800387e:	3401      	adds	r4, #1
 8003880:	2500      	movs	r5, #0
 8003882:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 8003886:	9510      	str	r5, [sp, #64]	; 0x40
 8003888:	e630      	b.n	80034ec <_vfprintf_r+0x1034>
 800388a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800388c:	4649      	mov	r1, r9
 800388e:	aa27      	add	r2, sp, #156	; 0x9c
 8003890:	f003 faa6 	bl	8006de0 <__sprint_r>
 8003894:	2800      	cmp	r0, #0
 8003896:	f47e af27 	bne.w	80026e8 <_vfprintf_r+0x230>
 800389a:	9c21      	ldr	r4, [sp, #132]	; 0x84
 800389c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800389e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80038a0:	ae34      	add	r6, sp, #208	; 0xd0
 80038a2:	e6a0      	b.n	80035e6 <_vfprintf_r+0x112e>
 80038a4:	2400      	movs	r4, #0
 80038a6:	4603      	mov	r3, r0
 80038a8:	9407      	str	r4, [sp, #28]
 80038aa:	f7fe be81 	b.w	80025b0 <_vfprintf_r+0xf8>
 80038ae:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80038b0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80038b2:	2c00      	cmp	r4, #0
 80038b4:	bfd4      	ite	le
 80038b6:	f1c4 0402 	rsble	r4, r4, #2
 80038ba:	2401      	movgt	r4, #1
 80038bc:	442c      	add	r4, r5
 80038be:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 80038c2:	f04f 0867 	mov.w	r8, #103	; 0x67
 80038c6:	e611      	b.n	80034ec <_vfprintf_r+0x1034>
 80038c8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80038ca:	9812      	ldr	r0, [sp, #72]	; 0x48
 80038cc:	901c      	str	r0, [sp, #112]	; 0x70
 80038ce:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80038d2:	911d      	str	r1, [sp, #116]	; 0x74
 80038d4:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
 80038d8:	e5a7      	b.n	800342a <_vfprintf_r+0xf72>
 80038da:	2506      	movs	r5, #6
 80038dc:	9507      	str	r5, [sp, #28]
 80038de:	e595      	b.n	800340c <_vfprintf_r+0xf54>
 80038e0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80038e2:	e5e3      	b.n	80034ac <_vfprintf_r+0xff4>
 80038e4:	f10d 009a 	add.w	r0, sp, #154	; 0x9a
 80038e8:	4d41      	ldr	r5, [pc, #260]	; (80039f0 <_vfprintf_r+0x1538>)
 80038ea:	17da      	asrs	r2, r3, #31
 80038ec:	fb85 5103 	smull	r5, r1, r5, r3
 80038f0:	ebc2 01a1 	rsb	r1, r2, r1, asr #2
 80038f4:	eb01 0481 	add.w	r4, r1, r1, lsl #2
 80038f8:	4602      	mov	r2, r0
 80038fa:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
 80038fe:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8003902:	2909      	cmp	r1, #9
 8003904:	7010      	strb	r0, [r2, #0]
 8003906:	460b      	mov	r3, r1
 8003908:	f102 30ff 	add.w	r0, r2, #4294967295
 800390c:	dcec      	bgt.n	80038e8 <_vfprintf_r+0x1430>
 800390e:	f101 0330 	add.w	r3, r1, #48	; 0x30
 8003912:	f10d 049b 	add.w	r4, sp, #155	; 0x9b
 8003916:	b2d9      	uxtb	r1, r3
 8003918:	4284      	cmp	r4, r0
 800391a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800391e:	d963      	bls.n	80039e8 <_vfprintf_r+0x1530>
 8003920:	f10d 008d 	add.w	r0, sp, #141	; 0x8d
 8003924:	4613      	mov	r3, r2
 8003926:	e001      	b.n	800392c <_vfprintf_r+0x1474>
 8003928:	f813 1b01 	ldrb.w	r1, [r3], #1
 800392c:	42a3      	cmp	r3, r4
 800392e:	f800 1f01 	strb.w	r1, [r0, #1]!
 8003932:	d1f9      	bne.n	8003928 <_vfprintf_r+0x1470>
 8003934:	f50d 7c88 	add.w	ip, sp, #272	; 0x110
 8003938:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 800393c:	3bf6      	subs	r3, #246	; 0xf6
 800393e:	e795      	b.n	800386c <_vfprintf_r+0x13b4>
 8003940:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8003942:	9510      	str	r5, [sp, #64]	; 0x40
 8003944:	2d00      	cmp	r5, #0
 8003946:	9c07      	ldr	r4, [sp, #28]
 8003948:	dd23      	ble.n	8003992 <_vfprintf_r+0x14da>
 800394a:	b9dc      	cbnz	r4, 8003984 <_vfprintf_r+0x14cc>
 800394c:	9d05      	ldr	r5, [sp, #20]
 800394e:	07e8      	lsls	r0, r5, #31
 8003950:	d418      	bmi.n	8003984 <_vfprintf_r+0x14cc>
 8003952:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8003954:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 8003958:	e5c8      	b.n	80034ec <_vfprintf_r+0x1034>
 800395a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800395c:	1c6c      	adds	r4, r5, #1
 800395e:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 8003962:	f04f 0867 	mov.w	r8, #103	; 0x67
 8003966:	e5c1      	b.n	80034ec <_vfprintf_r+0x1034>
 8003968:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 800396c:	2200      	movs	r2, #0
 800396e:	2300      	movs	r3, #0
 8003970:	f004 ffb2 	bl	80088d8 <__aeabi_dcmpeq>
 8003974:	2800      	cmp	r0, #0
 8003976:	f47f af55 	bne.w	8003824 <_vfprintf_r+0x136c>
 800397a:	f1c5 0501 	rsb	r5, r5, #1
 800397e:	9521      	str	r5, [sp, #132]	; 0x84
 8003980:	442c      	add	r4, r5
 8003982:	e580      	b.n	8003486 <_vfprintf_r+0xfce>
 8003984:	9d07      	ldr	r5, [sp, #28]
 8003986:	1c6c      	adds	r4, r5, #1
 8003988:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800398a:	442c      	add	r4, r5
 800398c:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 8003990:	e5ac      	b.n	80034ec <_vfprintf_r+0x1034>
 8003992:	bb14      	cbnz	r4, 80039da <_vfprintf_r+0x1522>
 8003994:	9d05      	ldr	r5, [sp, #20]
 8003996:	07e9      	lsls	r1, r5, #31
 8003998:	d41f      	bmi.n	80039da <_vfprintf_r+0x1522>
 800399a:	2301      	movs	r3, #1
 800399c:	461c      	mov	r4, r3
 800399e:	e5a5      	b.n	80034ec <_vfprintf_r+0x1034>
 80039a0:	f8dd c014 	ldr.w	ip, [sp, #20]
 80039a4:	f01c 0301 	ands.w	r3, ip, #1
 80039a8:	f47f af69 	bne.w	800387e <_vfprintf_r+0x13c6>
 80039ac:	9310      	str	r3, [sp, #64]	; 0x40
 80039ae:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 80039b2:	e59b      	b.n	80034ec <_vfprintf_r+0x1034>
 80039b4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80039b6:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 80039ba:	682d      	ldr	r5, [r5, #0]
 80039bc:	f893 8001 	ldrb.w	r8, [r3, #1]
 80039c0:	9507      	str	r5, [sp, #28]
 80039c2:	f10c 0104 	add.w	r1, ip, #4
 80039c6:	2d00      	cmp	r5, #0
 80039c8:	910b      	str	r1, [sp, #44]	; 0x2c
 80039ca:	4603      	mov	r3, r0
 80039cc:	f6be adef 	bge.w	80025ae <_vfprintf_r+0xf6>
 80039d0:	f04f 34ff 	mov.w	r4, #4294967295
 80039d4:	9407      	str	r4, [sp, #28]
 80039d6:	f7fe bdea 	b.w	80025ae <_vfprintf_r+0xf6>
 80039da:	9d07      	ldr	r5, [sp, #28]
 80039dc:	1cac      	adds	r4, r5, #2
 80039de:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 80039e2:	e583      	b.n	80034ec <_vfprintf_r+0x1034>
 80039e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80039e6:	e72d      	b.n	8003844 <_vfprintf_r+0x138c>
 80039e8:	f10d 038e 	add.w	r3, sp, #142	; 0x8e
 80039ec:	e73e      	b.n	800386c <_vfprintf_r+0x13b4>
 80039ee:	bf00      	nop
 80039f0:	66666667 	.word	0x66666667
 80039f4:	f3af 8000 	nop.w

080039f8 <vfprintf>:
 80039f8:	b430      	push	{r4, r5}
 80039fa:	4c04      	ldr	r4, [pc, #16]	; (8003a0c <vfprintf+0x14>)
 80039fc:	460d      	mov	r5, r1
 80039fe:	4613      	mov	r3, r2
 8003a00:	4601      	mov	r1, r0
 8003a02:	462a      	mov	r2, r5
 8003a04:	6820      	ldr	r0, [r4, #0]
 8003a06:	bc30      	pop	{r4, r5}
 8003a08:	f7fe bd56 	b.w	80024b8 <_vfprintf_r>
 8003a0c:	20000498 	.word	0x20000498

08003a10 <__sbprintf>:
 8003a10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003a14:	460c      	mov	r4, r1
 8003a16:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 8003a1a:	f8b1 900c 	ldrh.w	r9, [r1, #12]
 8003a1e:	69e7      	ldr	r7, [r4, #28]
 8003a20:	6e49      	ldr	r1, [r1, #100]	; 0x64
 8003a22:	f8b4 800e 	ldrh.w	r8, [r4, #14]
 8003a26:	9119      	str	r1, [sp, #100]	; 0x64
 8003a28:	ad1a      	add	r5, sp, #104	; 0x68
 8003a2a:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8003a2e:	f04f 0e00 	mov.w	lr, #0
 8003a32:	9707      	str	r7, [sp, #28]
 8003a34:	f029 0902 	bic.w	r9, r9, #2
 8003a38:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8003a3a:	9500      	str	r5, [sp, #0]
 8003a3c:	4669      	mov	r1, sp
 8003a3e:	9504      	str	r5, [sp, #16]
 8003a40:	9602      	str	r6, [sp, #8]
 8003a42:	9605      	str	r6, [sp, #20]
 8003a44:	f8ad 900c 	strh.w	r9, [sp, #12]
 8003a48:	f8ad 800e 	strh.w	r8, [sp, #14]
 8003a4c:	9709      	str	r7, [sp, #36]	; 0x24
 8003a4e:	f8cd e018 	str.w	lr, [sp, #24]
 8003a52:	4606      	mov	r6, r0
 8003a54:	f7fe fd30 	bl	80024b8 <_vfprintf_r>
 8003a58:	1e05      	subs	r5, r0, #0
 8003a5a:	db07      	blt.n	8003a6c <__sbprintf+0x5c>
 8003a5c:	4630      	mov	r0, r6
 8003a5e:	4669      	mov	r1, sp
 8003a60:	f001 f96c 	bl	8004d3c <_fflush_r>
 8003a64:	2800      	cmp	r0, #0
 8003a66:	bf18      	it	ne
 8003a68:	f04f 35ff 	movne.w	r5, #4294967295
 8003a6c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8003a70:	065b      	lsls	r3, r3, #25
 8003a72:	d503      	bpl.n	8003a7c <__sbprintf+0x6c>
 8003a74:	89a3      	ldrh	r3, [r4, #12]
 8003a76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a7a:	81a3      	strh	r3, [r4, #12]
 8003a7c:	4628      	mov	r0, r5
 8003a7e:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 8003a82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003a86:	bf00      	nop

08003a88 <__swsetup_r>:
 8003a88:	4b2f      	ldr	r3, [pc, #188]	; (8003b48 <__swsetup_r+0xc0>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	b570      	push	{r4, r5, r6, lr}
 8003a8e:	4606      	mov	r6, r0
 8003a90:	460c      	mov	r4, r1
 8003a92:	b113      	cbz	r3, 8003a9a <__swsetup_r+0x12>
 8003a94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a96:	2a00      	cmp	r2, #0
 8003a98:	d036      	beq.n	8003b08 <__swsetup_r+0x80>
 8003a9a:	89a5      	ldrh	r5, [r4, #12]
 8003a9c:	b2ab      	uxth	r3, r5
 8003a9e:	0719      	lsls	r1, r3, #28
 8003aa0:	d50c      	bpl.n	8003abc <__swsetup_r+0x34>
 8003aa2:	6922      	ldr	r2, [r4, #16]
 8003aa4:	b1aa      	cbz	r2, 8003ad2 <__swsetup_r+0x4a>
 8003aa6:	f013 0101 	ands.w	r1, r3, #1
 8003aaa:	d01e      	beq.n	8003aea <__swsetup_r+0x62>
 8003aac:	6963      	ldr	r3, [r4, #20]
 8003aae:	2100      	movs	r1, #0
 8003ab0:	425b      	negs	r3, r3
 8003ab2:	61a3      	str	r3, [r4, #24]
 8003ab4:	60a1      	str	r1, [r4, #8]
 8003ab6:	b1f2      	cbz	r2, 8003af6 <__swsetup_r+0x6e>
 8003ab8:	2000      	movs	r0, #0
 8003aba:	bd70      	pop	{r4, r5, r6, pc}
 8003abc:	06da      	lsls	r2, r3, #27
 8003abe:	d53b      	bpl.n	8003b38 <__swsetup_r+0xb0>
 8003ac0:	075b      	lsls	r3, r3, #29
 8003ac2:	d425      	bmi.n	8003b10 <__swsetup_r+0x88>
 8003ac4:	6922      	ldr	r2, [r4, #16]
 8003ac6:	f045 0308 	orr.w	r3, r5, #8
 8003aca:	81a3      	strh	r3, [r4, #12]
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	2a00      	cmp	r2, #0
 8003ad0:	d1e9      	bne.n	8003aa6 <__swsetup_r+0x1e>
 8003ad2:	f403 7120 	and.w	r1, r3, #640	; 0x280
 8003ad6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8003ada:	d0e4      	beq.n	8003aa6 <__swsetup_r+0x1e>
 8003adc:	4630      	mov	r0, r6
 8003ade:	4621      	mov	r1, r4
 8003ae0:	f001 fda8 	bl	8005634 <__smakebuf_r>
 8003ae4:	89a3      	ldrh	r3, [r4, #12]
 8003ae6:	6922      	ldr	r2, [r4, #16]
 8003ae8:	e7dd      	b.n	8003aa6 <__swsetup_r+0x1e>
 8003aea:	0798      	lsls	r0, r3, #30
 8003aec:	bf58      	it	pl
 8003aee:	6961      	ldrpl	r1, [r4, #20]
 8003af0:	60a1      	str	r1, [r4, #8]
 8003af2:	2a00      	cmp	r2, #0
 8003af4:	d1e0      	bne.n	8003ab8 <__swsetup_r+0x30>
 8003af6:	89a3      	ldrh	r3, [r4, #12]
 8003af8:	061a      	lsls	r2, r3, #24
 8003afa:	d5dd      	bpl.n	8003ab8 <__swsetup_r+0x30>
 8003afc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b00:	81a3      	strh	r3, [r4, #12]
 8003b02:	f04f 30ff 	mov.w	r0, #4294967295
 8003b06:	bd70      	pop	{r4, r5, r6, pc}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f001 f96b 	bl	8004de4 <__sinit>
 8003b0e:	e7c4      	b.n	8003a9a <__swsetup_r+0x12>
 8003b10:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003b12:	b149      	cbz	r1, 8003b28 <__swsetup_r+0xa0>
 8003b14:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8003b18:	4299      	cmp	r1, r3
 8003b1a:	d003      	beq.n	8003b24 <__swsetup_r+0x9c>
 8003b1c:	4630      	mov	r0, r6
 8003b1e:	f001 faa3 	bl	8005068 <_free_r>
 8003b22:	89a5      	ldrh	r5, [r4, #12]
 8003b24:	2300      	movs	r3, #0
 8003b26:	6323      	str	r3, [r4, #48]	; 0x30
 8003b28:	f025 0524 	bic.w	r5, r5, #36	; 0x24
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	6922      	ldr	r2, [r4, #16]
 8003b30:	6063      	str	r3, [r4, #4]
 8003b32:	b2ad      	uxth	r5, r5
 8003b34:	6022      	str	r2, [r4, #0]
 8003b36:	e7c6      	b.n	8003ac6 <__swsetup_r+0x3e>
 8003b38:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8003b3c:	2309      	movs	r3, #9
 8003b3e:	6033      	str	r3, [r6, #0]
 8003b40:	f04f 30ff 	mov.w	r0, #4294967295
 8003b44:	81a5      	strh	r5, [r4, #12]
 8003b46:	bd70      	pop	{r4, r5, r6, pc}
 8003b48:	20000498 	.word	0x20000498

08003b4c <register_fini>:
 8003b4c:	4b02      	ldr	r3, [pc, #8]	; (8003b58 <register_fini+0xc>)
 8003b4e:	b113      	cbz	r3, 8003b56 <register_fini+0xa>
 8003b50:	4802      	ldr	r0, [pc, #8]	; (8003b5c <register_fini+0x10>)
 8003b52:	f000 b87d 	b.w	8003c50 <atexit>
 8003b56:	4770      	bx	lr
 8003b58:	00000000 	.word	0x00000000
 8003b5c:	08004f9d 	.word	0x08004f9d

08003b60 <__call_exitprocs>:
 8003b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b64:	4b38      	ldr	r3, [pc, #224]	; (8003c48 <__call_exitprocs+0xe8>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	b085      	sub	sp, #20
 8003b6a:	f503 72a4 	add.w	r2, r3, #328	; 0x148
 8003b6e:	9301      	str	r3, [sp, #4]
 8003b70:	9002      	str	r0, [sp, #8]
 8003b72:	460f      	mov	r7, r1
 8003b74:	9203      	str	r2, [sp, #12]
 8003b76:	9b01      	ldr	r3, [sp, #4]
 8003b78:	f8d3 8148 	ldr.w	r8, [r3, #328]	; 0x148
 8003b7c:	f1b8 0f00 	cmp.w	r8, #0
 8003b80:	d01c      	beq.n	8003bbc <__call_exitprocs+0x5c>
 8003b82:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8003b86:	f04f 0901 	mov.w	r9, #1
 8003b8a:	46da      	mov	sl, fp
 8003b8c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8003b90:	1e5c      	subs	r4, r3, #1
 8003b92:	d411      	bmi.n	8003bb8 <__call_exitprocs+0x58>
 8003b94:	f108 0588 	add.w	r5, r8, #136	; 0x88
 8003b98:	1c9e      	adds	r6, r3, #2
 8003b9a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8003b9e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8003ba2:	b177      	cbz	r7, 8003bc2 <__call_exitprocs+0x62>
 8003ba4:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8003ba6:	42bb      	cmp	r3, r7
 8003ba8:	d00b      	beq.n	8003bc2 <__call_exitprocs+0x62>
 8003baa:	3c01      	subs	r4, #1
 8003bac:	1c63      	adds	r3, r4, #1
 8003bae:	f1a5 0504 	sub.w	r5, r5, #4
 8003bb2:	f1a6 0604 	sub.w	r6, r6, #4
 8003bb6:	d1f4      	bne.n	8003ba2 <__call_exitprocs+0x42>
 8003bb8:	4a24      	ldr	r2, [pc, #144]	; (8003c4c <__call_exitprocs+0xec>)
 8003bba:	bb7a      	cbnz	r2, 8003c1c <__call_exitprocs+0xbc>
 8003bbc:	b005      	add	sp, #20
 8003bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bc2:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8003bc6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8003bca:	3a01      	subs	r2, #1
 8003bcc:	42a2      	cmp	r2, r4
 8003bce:	bf16      	itet	ne
 8003bd0:	2200      	movne	r2, #0
 8003bd2:	f8c8 4004 	streq.w	r4, [r8, #4]
 8003bd6:	f846 2c04 	strne.w	r2, [r6, #-4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d0e5      	beq.n	8003baa <__call_exitprocs+0x4a>
 8003bde:	f8d8 1188 	ldr.w	r1, [r8, #392]	; 0x188
 8003be2:	f8d8 b004 	ldr.w	fp, [r8, #4]
 8003be6:	fa09 f204 	lsl.w	r2, r9, r4
 8003bea:	420a      	tst	r2, r1
 8003bec:	d010      	beq.n	8003c10 <__call_exitprocs+0xb0>
 8003bee:	f8d8 118c 	ldr.w	r1, [r8, #396]	; 0x18c
 8003bf2:	420a      	tst	r2, r1
 8003bf4:	d10e      	bne.n	8003c14 <__call_exitprocs+0xb4>
 8003bf6:	9802      	ldr	r0, [sp, #8]
 8003bf8:	f855 1c04 	ldr.w	r1, [r5, #-4]
 8003bfc:	4798      	blx	r3
 8003bfe:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8003c02:	455b      	cmp	r3, fp
 8003c04:	d1b7      	bne.n	8003b76 <__call_exitprocs+0x16>
 8003c06:	f8da 3000 	ldr.w	r3, [sl]
 8003c0a:	4543      	cmp	r3, r8
 8003c0c:	d0cd      	beq.n	8003baa <__call_exitprocs+0x4a>
 8003c0e:	e7b2      	b.n	8003b76 <__call_exitprocs+0x16>
 8003c10:	4798      	blx	r3
 8003c12:	e7f4      	b.n	8003bfe <__call_exitprocs+0x9e>
 8003c14:	f855 0c04 	ldr.w	r0, [r5, #-4]
 8003c18:	4798      	blx	r3
 8003c1a:	e7f0      	b.n	8003bfe <__call_exitprocs+0x9e>
 8003c1c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8003c20:	b96b      	cbnz	r3, 8003c3e <__call_exitprocs+0xde>
 8003c22:	f8d8 3000 	ldr.w	r3, [r8]
 8003c26:	b163      	cbz	r3, 8003c42 <__call_exitprocs+0xe2>
 8003c28:	4640      	mov	r0, r8
 8003c2a:	f8ca 3000 	str.w	r3, [sl]
 8003c2e:	f3af 8000 	nop.w
 8003c32:	f8da 8000 	ldr.w	r8, [sl]
 8003c36:	f1b8 0f00 	cmp.w	r8, #0
 8003c3a:	d1a7      	bne.n	8003b8c <__call_exitprocs+0x2c>
 8003c3c:	e7be      	b.n	8003bbc <__call_exitprocs+0x5c>
 8003c3e:	f8d8 3000 	ldr.w	r3, [r8]
 8003c42:	46c2      	mov	sl, r8
 8003c44:	4698      	mov	r8, r3
 8003c46:	e7f6      	b.n	8003c36 <__call_exitprocs+0xd6>
 8003c48:	0800916c 	.word	0x0800916c
 8003c4c:	00000000 	.word	0x00000000

08003c50 <atexit>:
 8003c50:	4601      	mov	r1, r0
 8003c52:	2000      	movs	r0, #0
 8003c54:	4602      	mov	r2, r0
 8003c56:	4603      	mov	r3, r0
 8003c58:	f003 bf54 	b.w	8007b04 <__register_exitproc>

08003c5c <quorem>:
 8003c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c60:	6903      	ldr	r3, [r0, #16]
 8003c62:	690d      	ldr	r5, [r1, #16]
 8003c64:	429d      	cmp	r5, r3
 8003c66:	b083      	sub	sp, #12
 8003c68:	4683      	mov	fp, r0
 8003c6a:	f300 808b 	bgt.w	8003d84 <quorem+0x128>
 8003c6e:	3d01      	subs	r5, #1
 8003c70:	f101 0414 	add.w	r4, r1, #20
 8003c74:	f100 0a14 	add.w	sl, r0, #20
 8003c78:	f854 2025 	ldr.w	r2, [r4, r5, lsl #2]
 8003c7c:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
 8003c80:	3201      	adds	r2, #1
 8003c82:	fbb3 f8f2 	udiv	r8, r3, r2
 8003c86:	00aa      	lsls	r2, r5, #2
 8003c88:	4691      	mov	r9, r2
 8003c8a:	9200      	str	r2, [sp, #0]
 8003c8c:	4452      	add	r2, sl
 8003c8e:	44a1      	add	r9, r4
 8003c90:	9201      	str	r2, [sp, #4]
 8003c92:	f1b8 0f00 	cmp.w	r8, #0
 8003c96:	d03d      	beq.n	8003d14 <quorem+0xb8>
 8003c98:	f04f 0e00 	mov.w	lr, #0
 8003c9c:	4670      	mov	r0, lr
 8003c9e:	4622      	mov	r2, r4
 8003ca0:	4653      	mov	r3, sl
 8003ca2:	468c      	mov	ip, r1
 8003ca4:	f852 6b04 	ldr.w	r6, [r2], #4
 8003ca8:	6819      	ldr	r1, [r3, #0]
 8003caa:	b2b7      	uxth	r7, r6
 8003cac:	0c36      	lsrs	r6, r6, #16
 8003cae:	fb07 ee08 	mla	lr, r7, r8, lr
 8003cb2:	fb06 f608 	mul.w	r6, r6, r8
 8003cb6:	eb06 461e 	add.w	r6, r6, lr, lsr #16
 8003cba:	fa1f f78e 	uxth.w	r7, lr
 8003cbe:	1bc7      	subs	r7, r0, r7
 8003cc0:	b2b0      	uxth	r0, r6
 8003cc2:	fa17 f781 	uxtah	r7, r7, r1
 8003cc6:	ebc0 4011 	rsb	r0, r0, r1, lsr #16
 8003cca:	eb00 4027 	add.w	r0, r0, r7, asr #16
 8003cce:	b2bf      	uxth	r7, r7
 8003cd0:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
 8003cd4:	4591      	cmp	r9, r2
 8003cd6:	f843 7b04 	str.w	r7, [r3], #4
 8003cda:	ea4f 4020 	mov.w	r0, r0, asr #16
 8003cde:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 8003ce2:	d2df      	bcs.n	8003ca4 <quorem+0x48>
 8003ce4:	9a00      	ldr	r2, [sp, #0]
 8003ce6:	f85a 3002 	ldr.w	r3, [sl, r2]
 8003cea:	4661      	mov	r1, ip
 8003cec:	b993      	cbnz	r3, 8003d14 <quorem+0xb8>
 8003cee:	9a01      	ldr	r2, [sp, #4]
 8003cf0:	1f13      	subs	r3, r2, #4
 8003cf2:	459a      	cmp	sl, r3
 8003cf4:	d20c      	bcs.n	8003d10 <quorem+0xb4>
 8003cf6:	f852 3c04 	ldr.w	r3, [r2, #-4]
 8003cfa:	b94b      	cbnz	r3, 8003d10 <quorem+0xb4>
 8003cfc:	f1a2 0308 	sub.w	r3, r2, #8
 8003d00:	e002      	b.n	8003d08 <quorem+0xac>
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	3b04      	subs	r3, #4
 8003d06:	b91a      	cbnz	r2, 8003d10 <quorem+0xb4>
 8003d08:	459a      	cmp	sl, r3
 8003d0a:	f105 35ff 	add.w	r5, r5, #4294967295
 8003d0e:	d3f8      	bcc.n	8003d02 <quorem+0xa6>
 8003d10:	f8cb 5010 	str.w	r5, [fp, #16]
 8003d14:	4658      	mov	r0, fp
 8003d16:	f002 faaf 	bl	8006278 <__mcmp>
 8003d1a:	2800      	cmp	r0, #0
 8003d1c:	db2e      	blt.n	8003d7c <quorem+0x120>
 8003d1e:	f108 0801 	add.w	r8, r8, #1
 8003d22:	4653      	mov	r3, sl
 8003d24:	2200      	movs	r2, #0
 8003d26:	f854 6b04 	ldr.w	r6, [r4], #4
 8003d2a:	6818      	ldr	r0, [r3, #0]
 8003d2c:	b2b1      	uxth	r1, r6
 8003d2e:	1a52      	subs	r2, r2, r1
 8003d30:	0c36      	lsrs	r6, r6, #16
 8003d32:	fa12 f180 	uxtah	r1, r2, r0
 8003d36:	ebc6 4210 	rsb	r2, r6, r0, lsr #16
 8003d3a:	eb02 4221 	add.w	r2, r2, r1, asr #16
 8003d3e:	b289      	uxth	r1, r1
 8003d40:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8003d44:	45a1      	cmp	r9, r4
 8003d46:	f843 1b04 	str.w	r1, [r3], #4
 8003d4a:	ea4f 4222 	mov.w	r2, r2, asr #16
 8003d4e:	d2ea      	bcs.n	8003d26 <quorem+0xca>
 8003d50:	f85a 2025 	ldr.w	r2, [sl, r5, lsl #2]
 8003d54:	eb0a 0385 	add.w	r3, sl, r5, lsl #2
 8003d58:	b982      	cbnz	r2, 8003d7c <quorem+0x120>
 8003d5a:	1f1a      	subs	r2, r3, #4
 8003d5c:	4592      	cmp	sl, r2
 8003d5e:	d20b      	bcs.n	8003d78 <quorem+0x11c>
 8003d60:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8003d64:	b942      	cbnz	r2, 8003d78 <quorem+0x11c>
 8003d66:	3b08      	subs	r3, #8
 8003d68:	e002      	b.n	8003d70 <quorem+0x114>
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	3b04      	subs	r3, #4
 8003d6e:	b91a      	cbnz	r2, 8003d78 <quorem+0x11c>
 8003d70:	459a      	cmp	sl, r3
 8003d72:	f105 35ff 	add.w	r5, r5, #4294967295
 8003d76:	d3f8      	bcc.n	8003d6a <quorem+0x10e>
 8003d78:	f8cb 5010 	str.w	r5, [fp, #16]
 8003d7c:	4640      	mov	r0, r8
 8003d7e:	b003      	add	sp, #12
 8003d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d84:	2000      	movs	r0, #0
 8003d86:	b003      	add	sp, #12
 8003d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d8c:	0000      	movs	r0, r0
	...

08003d90 <_dtoa_r>:
 8003d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d94:	b09d      	sub	sp, #116	; 0x74
 8003d96:	4604      	mov	r4, r0
 8003d98:	9104      	str	r1, [sp, #16]
 8003d9a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003d9c:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8003d9e:	9206      	str	r2, [sp, #24]
 8003da0:	9309      	str	r3, [sp, #36]	; 0x24
 8003da2:	ec5b ab10 	vmov	sl, fp, d0
 8003da6:	b149      	cbz	r1, 8003dbc <_dtoa_r+0x2c>
 8003da8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003daa:	604b      	str	r3, [r1, #4]
 8003dac:	2201      	movs	r2, #1
 8003dae:	fa02 f303 	lsl.w	r3, r2, r3
 8003db2:	608b      	str	r3, [r1, #8]
 8003db4:	f002 f81c 	bl	8005df0 <_Bfree>
 8003db8:	2300      	movs	r3, #0
 8003dba:	6423      	str	r3, [r4, #64]	; 0x40
 8003dbc:	f1bb 0f00 	cmp.w	fp, #0
 8003dc0:	46d9      	mov	r9, fp
 8003dc2:	db35      	blt.n	8003e30 <_dtoa_r+0xa0>
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	602b      	str	r3, [r5, #0]
 8003dc8:	4ba5      	ldr	r3, [pc, #660]	; (8004060 <_dtoa_r+0x2d0>)
 8003dca:	461a      	mov	r2, r3
 8003dcc:	ea09 0303 	and.w	r3, r9, r3
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d016      	beq.n	8003e02 <_dtoa_r+0x72>
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	4650      	mov	r0, sl
 8003dda:	4659      	mov	r1, fp
 8003ddc:	f004 fd7c 	bl	80088d8 <__aeabi_dcmpeq>
 8003de0:	4656      	mov	r6, sl
 8003de2:	465f      	mov	r7, fp
 8003de4:	4680      	mov	r8, r0
 8003de6:	b348      	cbz	r0, 8003e3c <_dtoa_r+0xac>
 8003de8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8003dea:	2301      	movs	r3, #1
 8003dec:	6033      	str	r3, [r6, #0]
 8003dee:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8003df0:	2e00      	cmp	r6, #0
 8003df2:	f000 80c9 	beq.w	8003f88 <_dtoa_r+0x1f8>
 8003df6:	489b      	ldr	r0, [pc, #620]	; (8004064 <_dtoa_r+0x2d4>)
 8003df8:	6030      	str	r0, [r6, #0]
 8003dfa:	3801      	subs	r0, #1
 8003dfc:	b01d      	add	sp, #116	; 0x74
 8003dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e02:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8003e04:	f242 730f 	movw	r3, #9999	; 0x270f
 8003e08:	6033      	str	r3, [r6, #0]
 8003e0a:	f1ba 0f00 	cmp.w	sl, #0
 8003e0e:	f000 80a4 	beq.w	8003f5a <_dtoa_r+0x1ca>
 8003e12:	4895      	ldr	r0, [pc, #596]	; (8004068 <_dtoa_r+0x2d8>)
 8003e14:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8003e16:	2e00      	cmp	r6, #0
 8003e18:	d0f0      	beq.n	8003dfc <_dtoa_r+0x6c>
 8003e1a:	78c3      	ldrb	r3, [r0, #3]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f000 80b5 	beq.w	8003f8c <_dtoa_r+0x1fc>
 8003e22:	f100 0308 	add.w	r3, r0, #8
 8003e26:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8003e28:	6033      	str	r3, [r6, #0]
 8003e2a:	b01d      	add	sp, #116	; 0x74
 8003e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e30:	2301      	movs	r3, #1
 8003e32:	f02b 4900 	bic.w	r9, fp, #2147483648	; 0x80000000
 8003e36:	602b      	str	r3, [r5, #0]
 8003e38:	46cb      	mov	fp, r9
 8003e3a:	e7c5      	b.n	8003dc8 <_dtoa_r+0x38>
 8003e3c:	4620      	mov	r0, r4
 8003e3e:	ec47 6b10 	vmov	d0, r6, r7
 8003e42:	a91b      	add	r1, sp, #108	; 0x6c
 8003e44:	aa1a      	add	r2, sp, #104	; 0x68
 8003e46:	f002 fb25 	bl	8006494 <__d2b>
 8003e4a:	ea5f 5519 	movs.w	r5, r9, lsr #20
 8003e4e:	900c      	str	r0, [sp, #48]	; 0x30
 8003e50:	f040 808c 	bne.w	8003f6c <_dtoa_r+0x1dc>
 8003e54:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8003e56:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8003e58:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 8003e5c:	443d      	add	r5, r7
 8003e5e:	429d      	cmp	r5, r3
 8003e60:	f2c0 8297 	blt.w	8004392 <_dtoa_r+0x602>
 8003e64:	331f      	adds	r3, #31
 8003e66:	f205 4212 	addw	r2, r5, #1042	; 0x412
 8003e6a:	1b5b      	subs	r3, r3, r5
 8003e6c:	fa09 f303 	lsl.w	r3, r9, r3
 8003e70:	fa2a f202 	lsr.w	r2, sl, r2
 8003e74:	ea43 0002 	orr.w	r0, r3, r2
 8003e78:	f004 fa50 	bl	800831c <__aeabi_ui2d>
 8003e7c:	2601      	movs	r6, #1
 8003e7e:	3d01      	subs	r5, #1
 8003e80:	46b8      	mov	r8, r7
 8003e82:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8003e86:	9618      	str	r6, [sp, #96]	; 0x60
 8003e88:	2200      	movs	r2, #0
 8003e8a:	4b78      	ldr	r3, [pc, #480]	; (800406c <_dtoa_r+0x2dc>)
 8003e8c:	f004 f908 	bl	80080a0 <__aeabi_dsub>
 8003e90:	a36d      	add	r3, pc, #436	; (adr r3, 8004048 <_dtoa_r+0x2b8>)
 8003e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e96:	f004 fab7 	bl	8008408 <__aeabi_dmul>
 8003e9a:	a36d      	add	r3, pc, #436	; (adr r3, 8004050 <_dtoa_r+0x2c0>)
 8003e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea0:	f004 f900 	bl	80080a4 <__adddf3>
 8003ea4:	4606      	mov	r6, r0
 8003ea6:	4628      	mov	r0, r5
 8003ea8:	460f      	mov	r7, r1
 8003eaa:	f004 fa47 	bl	800833c <__aeabi_i2d>
 8003eae:	a36a      	add	r3, pc, #424	; (adr r3, 8004058 <_dtoa_r+0x2c8>)
 8003eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb4:	f004 faa8 	bl	8008408 <__aeabi_dmul>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	460b      	mov	r3, r1
 8003ebc:	4630      	mov	r0, r6
 8003ebe:	4639      	mov	r1, r7
 8003ec0:	f004 f8f0 	bl	80080a4 <__adddf3>
 8003ec4:	4606      	mov	r6, r0
 8003ec6:	460f      	mov	r7, r1
 8003ec8:	f004 fd38 	bl	800893c <__aeabi_d2iz>
 8003ecc:	4639      	mov	r1, r7
 8003ece:	9008      	str	r0, [sp, #32]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	4630      	mov	r0, r6
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	f004 fd09 	bl	80088ec <__aeabi_dcmplt>
 8003eda:	2800      	cmp	r0, #0
 8003edc:	f040 822a 	bne.w	8004334 <_dtoa_r+0x5a4>
 8003ee0:	9e08      	ldr	r6, [sp, #32]
 8003ee2:	2e16      	cmp	r6, #22
 8003ee4:	f200 8223 	bhi.w	800432e <_dtoa_r+0x59e>
 8003ee8:	4b61      	ldr	r3, [pc, #388]	; (8004070 <_dtoa_r+0x2e0>)
 8003eea:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003eee:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ef2:	4652      	mov	r2, sl
 8003ef4:	465b      	mov	r3, fp
 8003ef6:	f004 fd17 	bl	8008928 <__aeabi_dcmpgt>
 8003efa:	2800      	cmp	r0, #0
 8003efc:	f000 824e 	beq.w	800439c <_dtoa_r+0x60c>
 8003f00:	3e01      	subs	r6, #1
 8003f02:	9608      	str	r6, [sp, #32]
 8003f04:	2600      	movs	r6, #0
 8003f06:	9610      	str	r6, [sp, #64]	; 0x40
 8003f08:	ebc5 0508 	rsb	r5, r5, r8
 8003f0c:	3d01      	subs	r5, #1
 8003f0e:	9507      	str	r5, [sp, #28]
 8003f10:	f100 822a 	bmi.w	8004368 <_dtoa_r+0x5d8>
 8003f14:	2600      	movs	r6, #0
 8003f16:	960a      	str	r6, [sp, #40]	; 0x28
 8003f18:	9e08      	ldr	r6, [sp, #32]
 8003f1a:	2e00      	cmp	r6, #0
 8003f1c:	f2c0 8218 	blt.w	8004350 <_dtoa_r+0x5c0>
 8003f20:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8003f24:	960f      	str	r6, [sp, #60]	; 0x3c
 8003f26:	44b6      	add	lr, r6
 8003f28:	2600      	movs	r6, #0
 8003f2a:	f8cd e01c 	str.w	lr, [sp, #28]
 8003f2e:	960e      	str	r6, [sp, #56]	; 0x38
 8003f30:	9e04      	ldr	r6, [sp, #16]
 8003f32:	2e09      	cmp	r6, #9
 8003f34:	d82c      	bhi.n	8003f90 <_dtoa_r+0x200>
 8003f36:	2e05      	cmp	r6, #5
 8003f38:	bfc4      	itt	gt
 8003f3a:	3e04      	subgt	r6, #4
 8003f3c:	9604      	strgt	r6, [sp, #16]
 8003f3e:	9904      	ldr	r1, [sp, #16]
 8003f40:	f1a1 0302 	sub.w	r3, r1, #2
 8003f44:	bfcc      	ite	gt
 8003f46:	2600      	movgt	r6, #0
 8003f48:	2601      	movle	r6, #1
 8003f4a:	2b03      	cmp	r3, #3
 8003f4c:	d822      	bhi.n	8003f94 <_dtoa_r+0x204>
 8003f4e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003f52:	03ae      	.short	0x03ae
 8003f54:	03b702a3 	.word	0x03b702a3
 8003f58:	04ab      	.short	0x04ab
 8003f5a:	4a46      	ldr	r2, [pc, #280]	; (8004074 <_dtoa_r+0x2e4>)
 8003f5c:	4b42      	ldr	r3, [pc, #264]	; (8004068 <_dtoa_r+0x2d8>)
 8003f5e:	f3c9 0013 	ubfx	r0, r9, #0, #20
 8003f62:	2800      	cmp	r0, #0
 8003f64:	bf0c      	ite	eq
 8003f66:	4610      	moveq	r0, r2
 8003f68:	4618      	movne	r0, r3
 8003f6a:	e753      	b.n	8003e14 <_dtoa_r+0x84>
 8003f6c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8003f70:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8003f74:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
 8003f78:	4650      	mov	r0, sl
 8003f7a:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003f7e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8003f82:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003f86:	e77f      	b.n	8003e88 <_dtoa_r+0xf8>
 8003f88:	483b      	ldr	r0, [pc, #236]	; (8004078 <_dtoa_r+0x2e8>)
 8003f8a:	e737      	b.n	8003dfc <_dtoa_r+0x6c>
 8003f8c:	1cc3      	adds	r3, r0, #3
 8003f8e:	e74a      	b.n	8003e26 <_dtoa_r+0x96>
 8003f90:	2600      	movs	r6, #0
 8003f92:	9604      	str	r6, [sp, #16]
 8003f94:	2500      	movs	r5, #0
 8003f96:	6465      	str	r5, [r4, #68]	; 0x44
 8003f98:	4629      	mov	r1, r5
 8003f9a:	4620      	mov	r0, r4
 8003f9c:	f001 ff02 	bl	8005da4 <_Balloc>
 8003fa0:	f04f 39ff 	mov.w	r9, #4294967295
 8003fa4:	2601      	movs	r6, #1
 8003fa6:	900b      	str	r0, [sp, #44]	; 0x2c
 8003fa8:	9506      	str	r5, [sp, #24]
 8003faa:	6420      	str	r0, [r4, #64]	; 0x40
 8003fac:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
 8003fb0:	960d      	str	r6, [sp, #52]	; 0x34
 8003fb2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f2c0 80d1 	blt.w	800415c <_dtoa_r+0x3cc>
 8003fba:	9e08      	ldr	r6, [sp, #32]
 8003fbc:	2e0e      	cmp	r6, #14
 8003fbe:	f300 80cd 	bgt.w	800415c <_dtoa_r+0x3cc>
 8003fc2:	4b2b      	ldr	r3, [pc, #172]	; (8004070 <_dtoa_r+0x2e0>)
 8003fc4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003fc8:	ed93 7b00 	vldr	d7, [r3]
 8003fcc:	9e06      	ldr	r6, [sp, #24]
 8003fce:	2e00      	cmp	r6, #0
 8003fd0:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003fd4:	f2c0 8377 	blt.w	80046c6 <_dtoa_r+0x936>
 8003fd8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003fdc:	4659      	mov	r1, fp
 8003fde:	4650      	mov	r0, sl
 8003fe0:	f004 fb3c 	bl	800865c <__aeabi_ddiv>
 8003fe4:	f004 fcaa 	bl	800893c <__aeabi_d2iz>
 8003fe8:	4605      	mov	r5, r0
 8003fea:	f004 f9a7 	bl	800833c <__aeabi_i2d>
 8003fee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003ff2:	f004 fa09 	bl	8008408 <__aeabi_dmul>
 8003ff6:	460b      	mov	r3, r1
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	4659      	mov	r1, fp
 8003ffc:	4650      	mov	r0, sl
 8003ffe:	f004 f84f 	bl	80080a0 <__aeabi_dsub>
 8004002:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
 8004006:	f105 0330 	add.w	r3, r5, #48	; 0x30
 800400a:	f1b9 0f01 	cmp.w	r9, #1
 800400e:	4606      	mov	r6, r0
 8004010:	460f      	mov	r7, r1
 8004012:	f88e 3000 	strb.w	r3, [lr]
 8004016:	f10e 0b01 	add.w	fp, lr, #1
 800401a:	d061      	beq.n	80040e0 <_dtoa_r+0x350>
 800401c:	2200      	movs	r2, #0
 800401e:	4b17      	ldr	r3, [pc, #92]	; (800407c <_dtoa_r+0x2ec>)
 8004020:	f004 f9f2 	bl	8008408 <__aeabi_dmul>
 8004024:	2200      	movs	r2, #0
 8004026:	2300      	movs	r3, #0
 8004028:	4606      	mov	r6, r0
 800402a:	460f      	mov	r7, r1
 800402c:	f004 fc54 	bl	80088d8 <__aeabi_dcmpeq>
 8004030:	2800      	cmp	r0, #0
 8004032:	d17e      	bne.n	8004132 <_dtoa_r+0x3a2>
 8004034:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8004038:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800403a:	9406      	str	r4, [sp, #24]
 800403c:	44c8      	add	r8, r9
 800403e:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8004042:	f103 0902 	add.w	r9, r3, #2
 8004046:	e026      	b.n	8004096 <_dtoa_r+0x306>
 8004048:	636f4361 	.word	0x636f4361
 800404c:	3fd287a7 	.word	0x3fd287a7
 8004050:	8b60c8b3 	.word	0x8b60c8b3
 8004054:	3fc68a28 	.word	0x3fc68a28
 8004058:	509f79fb 	.word	0x509f79fb
 800405c:	3fd34413 	.word	0x3fd34413
 8004060:	7ff00000 	.word	0x7ff00000
 8004064:	080091c1 	.word	0x080091c1
 8004068:	080091e0 	.word	0x080091e0
 800406c:	3ff80000 	.word	0x3ff80000
 8004070:	08009200 	.word	0x08009200
 8004074:	080091d4 	.word	0x080091d4
 8004078:	080091c0 	.word	0x080091c0
 800407c:	40240000 	.word	0x40240000
 8004080:	f004 f9c2 	bl	8008408 <__aeabi_dmul>
 8004084:	2200      	movs	r2, #0
 8004086:	2300      	movs	r3, #0
 8004088:	4606      	mov	r6, r0
 800408a:	460f      	mov	r7, r1
 800408c:	f004 fc24 	bl	80088d8 <__aeabi_dcmpeq>
 8004090:	2800      	cmp	r0, #0
 8004092:	f040 83d3 	bne.w	800483c <_dtoa_r+0xaac>
 8004096:	4652      	mov	r2, sl
 8004098:	465b      	mov	r3, fp
 800409a:	4630      	mov	r0, r6
 800409c:	4639      	mov	r1, r7
 800409e:	f004 fadd 	bl	800865c <__aeabi_ddiv>
 80040a2:	f004 fc4b 	bl	800893c <__aeabi_d2iz>
 80040a6:	4605      	mov	r5, r0
 80040a8:	f004 f948 	bl	800833c <__aeabi_i2d>
 80040ac:	4652      	mov	r2, sl
 80040ae:	465b      	mov	r3, fp
 80040b0:	f004 f9aa 	bl	8008408 <__aeabi_dmul>
 80040b4:	4602      	mov	r2, r0
 80040b6:	460b      	mov	r3, r1
 80040b8:	4630      	mov	r0, r6
 80040ba:	4639      	mov	r1, r7
 80040bc:	f003 fff0 	bl	80080a0 <__aeabi_dsub>
 80040c0:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 80040c4:	45c1      	cmp	r9, r8
 80040c6:	f809 ec01 	strb.w	lr, [r9, #-1]
 80040ca:	464c      	mov	r4, r9
 80040cc:	4606      	mov	r6, r0
 80040ce:	460f      	mov	r7, r1
 80040d0:	f04f 0200 	mov.w	r2, #0
 80040d4:	4ba9      	ldr	r3, [pc, #676]	; (800437c <_dtoa_r+0x5ec>)
 80040d6:	f109 0901 	add.w	r9, r9, #1
 80040da:	d1d1      	bne.n	8004080 <_dtoa_r+0x2f0>
 80040dc:	46a3      	mov	fp, r4
 80040de:	9c06      	ldr	r4, [sp, #24]
 80040e0:	4632      	mov	r2, r6
 80040e2:	463b      	mov	r3, r7
 80040e4:	4630      	mov	r0, r6
 80040e6:	4639      	mov	r1, r7
 80040e8:	f003 ffdc 	bl	80080a4 <__adddf3>
 80040ec:	4606      	mov	r6, r0
 80040ee:	460f      	mov	r7, r1
 80040f0:	4632      	mov	r2, r6
 80040f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80040f6:	463b      	mov	r3, r7
 80040f8:	f004 fbf8 	bl	80088ec <__aeabi_dcmplt>
 80040fc:	b940      	cbnz	r0, 8004110 <_dtoa_r+0x380>
 80040fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004102:	4632      	mov	r2, r6
 8004104:	463b      	mov	r3, r7
 8004106:	f004 fbe7 	bl	80088d8 <__aeabi_dcmpeq>
 800410a:	b190      	cbz	r0, 8004132 <_dtoa_r+0x3a2>
 800410c:	07eb      	lsls	r3, r5, #31
 800410e:	d510      	bpl.n	8004132 <_dtoa_r+0x3a2>
 8004110:	f81b 5c01 	ldrb.w	r5, [fp, #-1]
 8004114:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004116:	e005      	b.n	8004124 <_dtoa_r+0x394>
 8004118:	429a      	cmp	r2, r3
 800411a:	f000 8431 	beq.w	8004980 <_dtoa_r+0xbf0>
 800411e:	f813 5c01 	ldrb.w	r5, [r3, #-1]
 8004122:	469b      	mov	fp, r3
 8004124:	2d39      	cmp	r5, #57	; 0x39
 8004126:	f10b 33ff 	add.w	r3, fp, #4294967295
 800412a:	d0f5      	beq.n	8004118 <_dtoa_r+0x388>
 800412c:	1c6a      	adds	r2, r5, #1
 800412e:	b2d2      	uxtb	r2, r2
 8004130:	701a      	strb	r2, [r3, #0]
 8004132:	4620      	mov	r0, r4
 8004134:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004136:	f001 fe5b 	bl	8005df0 <_Bfree>
 800413a:	9e08      	ldr	r6, [sp, #32]
 800413c:	1c73      	adds	r3, r6, #1
 800413e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004140:	2200      	movs	r2, #0
 8004142:	f88b 2000 	strb.w	r2, [fp]
 8004146:	6033      	str	r3, [r6, #0]
 8004148:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 800414a:	2e00      	cmp	r6, #0
 800414c:	f000 831e 	beq.w	800478c <_dtoa_r+0x9fc>
 8004150:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004152:	f8c6 b000 	str.w	fp, [r6]
 8004156:	b01d      	add	sp, #116	; 0x74
 8004158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800415c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800415e:	2e00      	cmp	r6, #0
 8004160:	f000 8107 	beq.w	8004372 <_dtoa_r+0x5e2>
 8004164:	9e04      	ldr	r6, [sp, #16]
 8004166:	2e01      	cmp	r6, #1
 8004168:	f340 82d5 	ble.w	8004716 <_dtoa_r+0x986>
 800416c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800416e:	f109 37ff 	add.w	r7, r9, #4294967295
 8004172:	42be      	cmp	r6, r7
 8004174:	f2c0 839b 	blt.w	80048ae <_dtoa_r+0xb1e>
 8004178:	1bf7      	subs	r7, r6, r7
 800417a:	f1b9 0f00 	cmp.w	r9, #0
 800417e:	f2c0 8492 	blt.w	8004aa6 <_dtoa_r+0xd16>
 8004182:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8004184:	464b      	mov	r3, r9
 8004186:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8004188:	441e      	add	r6, r3
 800418a:	960a      	str	r6, [sp, #40]	; 0x28
 800418c:	9e07      	ldr	r6, [sp, #28]
 800418e:	4620      	mov	r0, r4
 8004190:	441e      	add	r6, r3
 8004192:	2101      	movs	r1, #1
 8004194:	9607      	str	r6, [sp, #28]
 8004196:	f001 ff1b 	bl	8005fd0 <__i2b>
 800419a:	4606      	mov	r6, r0
 800419c:	b165      	cbz	r5, 80041b8 <_dtoa_r+0x428>
 800419e:	9907      	ldr	r1, [sp, #28]
 80041a0:	2900      	cmp	r1, #0
 80041a2:	dd09      	ble.n	80041b8 <_dtoa_r+0x428>
 80041a4:	460b      	mov	r3, r1
 80041a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80041a8:	42ab      	cmp	r3, r5
 80041aa:	bfa8      	it	ge
 80041ac:	462b      	movge	r3, r5
 80041ae:	1ad2      	subs	r2, r2, r3
 80041b0:	1ac9      	subs	r1, r1, r3
 80041b2:	920a      	str	r2, [sp, #40]	; 0x28
 80041b4:	1aed      	subs	r5, r5, r3
 80041b6:	9107      	str	r1, [sp, #28]
 80041b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	dd1b      	ble.n	80041f6 <_dtoa_r+0x466>
 80041be:	990d      	ldr	r1, [sp, #52]	; 0x34
 80041c0:	2900      	cmp	r1, #0
 80041c2:	f000 836a 	beq.w	800489a <_dtoa_r+0xb0a>
 80041c6:	2f00      	cmp	r7, #0
 80041c8:	dd11      	ble.n	80041ee <_dtoa_r+0x45e>
 80041ca:	4631      	mov	r1, r6
 80041cc:	463a      	mov	r2, r7
 80041ce:	4620      	mov	r0, r4
 80041d0:	f001 ffa6 	bl	8006120 <__pow5mult>
 80041d4:	4606      	mov	r6, r0
 80041d6:	4631      	mov	r1, r6
 80041d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80041da:	4620      	mov	r0, r4
 80041dc:	f001 ff02 	bl	8005fe4 <__multiply>
 80041e0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80041e2:	4680      	mov	r8, r0
 80041e4:	4620      	mov	r0, r4
 80041e6:	f001 fe03 	bl	8005df0 <_Bfree>
 80041ea:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 80041ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80041f0:	1bda      	subs	r2, r3, r7
 80041f2:	f040 828a 	bne.w	800470a <_dtoa_r+0x97a>
 80041f6:	2101      	movs	r1, #1
 80041f8:	4620      	mov	r0, r4
 80041fa:	f001 fee9 	bl	8005fd0 <__i2b>
 80041fe:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004200:	2900      	cmp	r1, #0
 8004202:	4680      	mov	r8, r0
 8004204:	dd05      	ble.n	8004212 <_dtoa_r+0x482>
 8004206:	4601      	mov	r1, r0
 8004208:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800420a:	4620      	mov	r0, r4
 800420c:	f001 ff88 	bl	8006120 <__pow5mult>
 8004210:	4680      	mov	r8, r0
 8004212:	9a04      	ldr	r2, [sp, #16]
 8004214:	2a01      	cmp	r2, #1
 8004216:	f340 82cb 	ble.w	80047b0 <_dtoa_r+0xa20>
 800421a:	2700      	movs	r7, #0
 800421c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800421e:	2900      	cmp	r1, #0
 8004220:	f040 82aa 	bne.w	8004778 <_dtoa_r+0x9e8>
 8004224:	2001      	movs	r0, #1
 8004226:	9b07      	ldr	r3, [sp, #28]
 8004228:	4403      	add	r3, r0
 800422a:	f013 031f 	ands.w	r3, r3, #31
 800422e:	f000 80a7 	beq.w	8004380 <_dtoa_r+0x5f0>
 8004232:	f1c3 0220 	rsb	r2, r3, #32
 8004236:	2a04      	cmp	r2, #4
 8004238:	f340 84c9 	ble.w	8004bce <_dtoa_r+0xe3e>
 800423c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800423e:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8004242:	f1c3 031c 	rsb	r3, r3, #28
 8004246:	441a      	add	r2, r3
 8004248:	449e      	add	lr, r3
 800424a:	920a      	str	r2, [sp, #40]	; 0x28
 800424c:	441d      	add	r5, r3
 800424e:	f8cd e01c 	str.w	lr, [sp, #28]
 8004252:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004254:	2b00      	cmp	r3, #0
 8004256:	dd05      	ble.n	8004264 <_dtoa_r+0x4d4>
 8004258:	990c      	ldr	r1, [sp, #48]	; 0x30
 800425a:	461a      	mov	r2, r3
 800425c:	4620      	mov	r0, r4
 800425e:	f001 ffad 	bl	80061bc <__lshift>
 8004262:	900c      	str	r0, [sp, #48]	; 0x30
 8004264:	9907      	ldr	r1, [sp, #28]
 8004266:	2900      	cmp	r1, #0
 8004268:	dd05      	ble.n	8004276 <_dtoa_r+0x4e6>
 800426a:	4641      	mov	r1, r8
 800426c:	9a07      	ldr	r2, [sp, #28]
 800426e:	4620      	mov	r0, r4
 8004270:	f001 ffa4 	bl	80061bc <__lshift>
 8004274:	4680      	mov	r8, r0
 8004276:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004278:	2a00      	cmp	r2, #0
 800427a:	f040 8262 	bne.w	8004742 <_dtoa_r+0x9b2>
 800427e:	f1b9 0f00 	cmp.w	r9, #0
 8004282:	f340 82b0 	ble.w	80047e6 <_dtoa_r+0xa56>
 8004286:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004288:	2a00      	cmp	r2, #0
 800428a:	f040 8089 	bne.w	80043a0 <_dtoa_r+0x610>
 800428e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8004290:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8004292:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 8004296:	e006      	b.n	80042a6 <_dtoa_r+0x516>
 8004298:	4639      	mov	r1, r7
 800429a:	4620      	mov	r0, r4
 800429c:	220a      	movs	r2, #10
 800429e:	2300      	movs	r3, #0
 80042a0:	f001 fdb0 	bl	8005e04 <__multadd>
 80042a4:	4607      	mov	r7, r0
 80042a6:	4638      	mov	r0, r7
 80042a8:	4641      	mov	r1, r8
 80042aa:	f7ff fcd7 	bl	8003c5c <quorem>
 80042ae:	3030      	adds	r0, #48	; 0x30
 80042b0:	f80b 0005 	strb.w	r0, [fp, r5]
 80042b4:	3501      	adds	r5, #1
 80042b6:	45a9      	cmp	r9, r5
 80042b8:	dcee      	bgt.n	8004298 <_dtoa_r+0x508>
 80042ba:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 80042be:	970c      	str	r7, [sp, #48]	; 0x30
 80042c0:	4682      	mov	sl, r0
 80042c2:	f1b9 0f01 	cmp.w	r9, #1
 80042c6:	bfac      	ite	ge
 80042c8:	44cb      	addge	fp, r9
 80042ca:	f10b 0b01 	addlt.w	fp, fp, #1
 80042ce:	2500      	movs	r5, #0
 80042d0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80042d2:	2201      	movs	r2, #1
 80042d4:	4620      	mov	r0, r4
 80042d6:	f001 ff71 	bl	80061bc <__lshift>
 80042da:	4641      	mov	r1, r8
 80042dc:	900c      	str	r0, [sp, #48]	; 0x30
 80042de:	f001 ffcb 	bl	8006278 <__mcmp>
 80042e2:	2800      	cmp	r0, #0
 80042e4:	f340 8311 	ble.w	800490a <_dtoa_r+0xb7a>
 80042e8:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
 80042ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80042ee:	e005      	b.n	80042fc <_dtoa_r+0x56c>
 80042f0:	4299      	cmp	r1, r3
 80042f2:	f000 829a 	beq.w	800482a <_dtoa_r+0xa9a>
 80042f6:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 80042fa:	469b      	mov	fp, r3
 80042fc:	2a39      	cmp	r2, #57	; 0x39
 80042fe:	f10b 33ff 	add.w	r3, fp, #4294967295
 8004302:	d0f5      	beq.n	80042f0 <_dtoa_r+0x560>
 8004304:	3201      	adds	r2, #1
 8004306:	701a      	strb	r2, [r3, #0]
 8004308:	4641      	mov	r1, r8
 800430a:	4620      	mov	r0, r4
 800430c:	f001 fd70 	bl	8005df0 <_Bfree>
 8004310:	2e00      	cmp	r6, #0
 8004312:	f43f af0e 	beq.w	8004132 <_dtoa_r+0x3a2>
 8004316:	b12d      	cbz	r5, 8004324 <_dtoa_r+0x594>
 8004318:	42b5      	cmp	r5, r6
 800431a:	d003      	beq.n	8004324 <_dtoa_r+0x594>
 800431c:	4629      	mov	r1, r5
 800431e:	4620      	mov	r0, r4
 8004320:	f001 fd66 	bl	8005df0 <_Bfree>
 8004324:	4631      	mov	r1, r6
 8004326:	4620      	mov	r0, r4
 8004328:	f001 fd62 	bl	8005df0 <_Bfree>
 800432c:	e701      	b.n	8004132 <_dtoa_r+0x3a2>
 800432e:	2601      	movs	r6, #1
 8004330:	9610      	str	r6, [sp, #64]	; 0x40
 8004332:	e5e9      	b.n	8003f08 <_dtoa_r+0x178>
 8004334:	9808      	ldr	r0, [sp, #32]
 8004336:	f004 f801 	bl	800833c <__aeabi_i2d>
 800433a:	4632      	mov	r2, r6
 800433c:	463b      	mov	r3, r7
 800433e:	f004 facb 	bl	80088d8 <__aeabi_dcmpeq>
 8004342:	2800      	cmp	r0, #0
 8004344:	f47f adcc 	bne.w	8003ee0 <_dtoa_r+0x150>
 8004348:	9e08      	ldr	r6, [sp, #32]
 800434a:	3e01      	subs	r6, #1
 800434c:	9608      	str	r6, [sp, #32]
 800434e:	e5c7      	b.n	8003ee0 <_dtoa_r+0x150>
 8004350:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8004352:	f8dd e020 	ldr.w	lr, [sp, #32]
 8004356:	ebce 0606 	rsb	r6, lr, r6
 800435a:	960a      	str	r6, [sp, #40]	; 0x28
 800435c:	f1ce 0600 	rsb	r6, lr, #0
 8004360:	960e      	str	r6, [sp, #56]	; 0x38
 8004362:	2600      	movs	r6, #0
 8004364:	960f      	str	r6, [sp, #60]	; 0x3c
 8004366:	e5e3      	b.n	8003f30 <_dtoa_r+0x1a0>
 8004368:	426e      	negs	r6, r5
 800436a:	960a      	str	r6, [sp, #40]	; 0x28
 800436c:	2600      	movs	r6, #0
 800436e:	9607      	str	r6, [sp, #28]
 8004370:	e5d2      	b.n	8003f18 <_dtoa_r+0x188>
 8004372:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8004374:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8004376:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8004378:	e710      	b.n	800419c <_dtoa_r+0x40c>
 800437a:	bf00      	nop
 800437c:	40240000 	.word	0x40240000
 8004380:	231c      	movs	r3, #28
 8004382:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004384:	9a07      	ldr	r2, [sp, #28]
 8004386:	4419      	add	r1, r3
 8004388:	441a      	add	r2, r3
 800438a:	910a      	str	r1, [sp, #40]	; 0x28
 800438c:	441d      	add	r5, r3
 800438e:	9207      	str	r2, [sp, #28]
 8004390:	e75f      	b.n	8004252 <_dtoa_r+0x4c2>
 8004392:	4840      	ldr	r0, [pc, #256]	; (8004494 <_dtoa_r+0x704>)
 8004394:	1b40      	subs	r0, r0, r5
 8004396:	fa0a f000 	lsl.w	r0, sl, r0
 800439a:	e56d      	b.n	8003e78 <_dtoa_r+0xe8>
 800439c:	9010      	str	r0, [sp, #64]	; 0x40
 800439e:	e5b3      	b.n	8003f08 <_dtoa_r+0x178>
 80043a0:	2d00      	cmp	r5, #0
 80043a2:	dd05      	ble.n	80043b0 <_dtoa_r+0x620>
 80043a4:	4631      	mov	r1, r6
 80043a6:	462a      	mov	r2, r5
 80043a8:	4620      	mov	r0, r4
 80043aa:	f001 ff07 	bl	80061bc <__lshift>
 80043ae:	4606      	mov	r6, r0
 80043b0:	2f00      	cmp	r7, #0
 80043b2:	f040 82ef 	bne.w	8004994 <_dtoa_r+0xc04>
 80043b6:	4637      	mov	r7, r6
 80043b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80043ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80043bc:	444b      	add	r3, r9
 80043be:	f00a 0101 	and.w	r1, sl, #1
 80043c2:	930a      	str	r3, [sp, #40]	; 0x28
 80043c4:	910d      	str	r1, [sp, #52]	; 0x34
 80043c6:	1c55      	adds	r5, r2, #1
 80043c8:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 80043cc:	e00a      	b.n	80043e4 <_dtoa_r+0x654>
 80043ce:	f001 fd19 	bl	8005e04 <__multadd>
 80043d2:	4639      	mov	r1, r7
 80043d4:	4606      	mov	r6, r0
 80043d6:	220a      	movs	r2, #10
 80043d8:	4620      	mov	r0, r4
 80043da:	2300      	movs	r3, #0
 80043dc:	f001 fd12 	bl	8005e04 <__multadd>
 80043e0:	4607      	mov	r7, r0
 80043e2:	3501      	adds	r5, #1
 80043e4:	4641      	mov	r1, r8
 80043e6:	4648      	mov	r0, r9
 80043e8:	f7ff fc38 	bl	8003c5c <quorem>
 80043ec:	4631      	mov	r1, r6
 80043ee:	4683      	mov	fp, r0
 80043f0:	4648      	mov	r0, r9
 80043f2:	f001 ff41 	bl	8006278 <__mcmp>
 80043f6:	463a      	mov	r2, r7
 80043f8:	9006      	str	r0, [sp, #24]
 80043fa:	4641      	mov	r1, r8
 80043fc:	4620      	mov	r0, r4
 80043fe:	f001 ff5f 	bl	80062c0 <__mdiff>
 8004402:	68c2      	ldr	r2, [r0, #12]
 8004404:	f105 3eff 	add.w	lr, r5, #4294967295
 8004408:	4603      	mov	r3, r0
 800440a:	f10b 0a30 	add.w	sl, fp, #48	; 0x30
 800440e:	f8cd e01c 	str.w	lr, [sp, #28]
 8004412:	2a00      	cmp	r2, #0
 8004414:	f040 8188 	bne.w	8004728 <_dtoa_r+0x998>
 8004418:	4619      	mov	r1, r3
 800441a:	4648      	mov	r0, r9
 800441c:	9303      	str	r3, [sp, #12]
 800441e:	f001 ff2b 	bl	8006278 <__mcmp>
 8004422:	9b03      	ldr	r3, [sp, #12]
 8004424:	4602      	mov	r2, r0
 8004426:	4619      	mov	r1, r3
 8004428:	4620      	mov	r0, r4
 800442a:	9203      	str	r2, [sp, #12]
 800442c:	f001 fce0 	bl	8005df0 <_Bfree>
 8004430:	9a03      	ldr	r2, [sp, #12]
 8004432:	b92a      	cbnz	r2, 8004440 <_dtoa_r+0x6b0>
 8004434:	9904      	ldr	r1, [sp, #16]
 8004436:	b919      	cbnz	r1, 8004440 <_dtoa_r+0x6b0>
 8004438:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800443a:	2b00      	cmp	r3, #0
 800443c:	f000 83a7 	beq.w	8004b8e <_dtoa_r+0xdfe>
 8004440:	9b06      	ldr	r3, [sp, #24]
 8004442:	2b00      	cmp	r3, #0
 8004444:	f2c0 8242 	blt.w	80048cc <_dtoa_r+0xb3c>
 8004448:	d105      	bne.n	8004456 <_dtoa_r+0x6c6>
 800444a:	9904      	ldr	r1, [sp, #16]
 800444c:	b919      	cbnz	r1, 8004456 <_dtoa_r+0x6c6>
 800444e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004450:	2b00      	cmp	r3, #0
 8004452:	f000 823b 	beq.w	80048cc <_dtoa_r+0xb3c>
 8004456:	2a00      	cmp	r2, #0
 8004458:	f300 82b0 	bgt.w	80049bc <_dtoa_r+0xc2c>
 800445c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800445e:	f805 ac01 	strb.w	sl, [r5, #-1]
 8004462:	428d      	cmp	r5, r1
 8004464:	46ab      	mov	fp, r5
 8004466:	f000 82ba 	beq.w	80049de <_dtoa_r+0xc4e>
 800446a:	4649      	mov	r1, r9
 800446c:	220a      	movs	r2, #10
 800446e:	2300      	movs	r3, #0
 8004470:	4620      	mov	r0, r4
 8004472:	f001 fcc7 	bl	8005e04 <__multadd>
 8004476:	42be      	cmp	r6, r7
 8004478:	4681      	mov	r9, r0
 800447a:	4631      	mov	r1, r6
 800447c:	4620      	mov	r0, r4
 800447e:	f04f 020a 	mov.w	r2, #10
 8004482:	f04f 0300 	mov.w	r3, #0
 8004486:	d1a2      	bne.n	80043ce <_dtoa_r+0x63e>
 8004488:	f001 fcbc 	bl	8005e04 <__multadd>
 800448c:	4606      	mov	r6, r0
 800448e:	4607      	mov	r7, r0
 8004490:	e7a7      	b.n	80043e2 <_dtoa_r+0x652>
 8004492:	bf00      	nop
 8004494:	fffffbee 	.word	0xfffffbee
 8004498:	2100      	movs	r1, #0
 800449a:	910d      	str	r1, [sp, #52]	; 0x34
 800449c:	9a06      	ldr	r2, [sp, #24]
 800449e:	9b08      	ldr	r3, [sp, #32]
 80044a0:	441a      	add	r2, r3
 80044a2:	f102 0901 	add.w	r9, r2, #1
 80044a6:	f1b9 0f00 	cmp.w	r9, #0
 80044aa:	9211      	str	r2, [sp, #68]	; 0x44
 80044ac:	464d      	mov	r5, r9
 80044ae:	f340 8145 	ble.w	800473c <_dtoa_r+0x9ac>
 80044b2:	2100      	movs	r1, #0
 80044b4:	2d17      	cmp	r5, #23
 80044b6:	6461      	str	r1, [r4, #68]	; 0x44
 80044b8:	d90a      	bls.n	80044d0 <_dtoa_r+0x740>
 80044ba:	2201      	movs	r2, #1
 80044bc:	2304      	movs	r3, #4
 80044be:	005b      	lsls	r3, r3, #1
 80044c0:	f103 0014 	add.w	r0, r3, #20
 80044c4:	42a8      	cmp	r0, r5
 80044c6:	4611      	mov	r1, r2
 80044c8:	f102 0201 	add.w	r2, r2, #1
 80044cc:	d9f7      	bls.n	80044be <_dtoa_r+0x72e>
 80044ce:	6461      	str	r1, [r4, #68]	; 0x44
 80044d0:	4620      	mov	r0, r4
 80044d2:	f001 fc67 	bl	8005da4 <_Balloc>
 80044d6:	2d0e      	cmp	r5, #14
 80044d8:	900b      	str	r0, [sp, #44]	; 0x2c
 80044da:	6420      	str	r0, [r4, #64]	; 0x40
 80044dc:	f63f ad69 	bhi.w	8003fb2 <_dtoa_r+0x222>
 80044e0:	2e00      	cmp	r6, #0
 80044e2:	f43f ad66 	beq.w	8003fb2 <_dtoa_r+0x222>
 80044e6:	9e08      	ldr	r6, [sp, #32]
 80044e8:	2e00      	cmp	r6, #0
 80044ea:	e9cd ab14 	strd	sl, fp, [sp, #80]	; 0x50
 80044ee:	f340 8220 	ble.w	8004932 <_dtoa_r+0xba2>
 80044f2:	4ba8      	ldr	r3, [pc, #672]	; (8004794 <_dtoa_r+0xa04>)
 80044f4:	f006 020f 	and.w	r2, r6, #15
 80044f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80044fc:	1135      	asrs	r5, r6, #4
 80044fe:	e9d3 6700 	ldrd	r6, r7, [r3]
 8004502:	06eb      	lsls	r3, r5, #27
 8004504:	f140 81db 	bpl.w	80048be <_dtoa_r+0xb2e>
 8004508:	4ba3      	ldr	r3, [pc, #652]	; (8004798 <_dtoa_r+0xa08>)
 800450a:	4650      	mov	r0, sl
 800450c:	4659      	mov	r1, fp
 800450e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004512:	f004 f8a3 	bl	800865c <__aeabi_ddiv>
 8004516:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 800451a:	f005 050f 	and.w	r5, r5, #15
 800451e:	f04f 0803 	mov.w	r8, #3
 8004522:	b18d      	cbz	r5, 8004548 <_dtoa_r+0x7b8>
 8004524:	f8df a270 	ldr.w	sl, [pc, #624]	; 8004798 <_dtoa_r+0xa08>
 8004528:	4630      	mov	r0, r6
 800452a:	4639      	mov	r1, r7
 800452c:	07ee      	lsls	r6, r5, #31
 800452e:	d505      	bpl.n	800453c <_dtoa_r+0x7ac>
 8004530:	e9da 2300 	ldrd	r2, r3, [sl]
 8004534:	f003 ff68 	bl	8008408 <__aeabi_dmul>
 8004538:	f108 0801 	add.w	r8, r8, #1
 800453c:	106d      	asrs	r5, r5, #1
 800453e:	f10a 0a08 	add.w	sl, sl, #8
 8004542:	d1f3      	bne.n	800452c <_dtoa_r+0x79c>
 8004544:	4606      	mov	r6, r0
 8004546:	460f      	mov	r7, r1
 8004548:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800454c:	4632      	mov	r2, r6
 800454e:	463b      	mov	r3, r7
 8004550:	f004 f884 	bl	800865c <__aeabi_ddiv>
 8004554:	4682      	mov	sl, r0
 8004556:	468b      	mov	fp, r1
 8004558:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800455a:	b146      	cbz	r6, 800456e <_dtoa_r+0x7de>
 800455c:	4650      	mov	r0, sl
 800455e:	4659      	mov	r1, fp
 8004560:	2200      	movs	r2, #0
 8004562:	4b8e      	ldr	r3, [pc, #568]	; (800479c <_dtoa_r+0xa0c>)
 8004564:	f004 f9c2 	bl	80088ec <__aeabi_dcmplt>
 8004568:	2800      	cmp	r0, #0
 800456a:	f040 82bd 	bne.w	8004ae8 <_dtoa_r+0xd58>
 800456e:	4640      	mov	r0, r8
 8004570:	f003 fee4 	bl	800833c <__aeabi_i2d>
 8004574:	4652      	mov	r2, sl
 8004576:	465b      	mov	r3, fp
 8004578:	f003 ff46 	bl	8008408 <__aeabi_dmul>
 800457c:	2200      	movs	r2, #0
 800457e:	4b88      	ldr	r3, [pc, #544]	; (80047a0 <_dtoa_r+0xa10>)
 8004580:	f003 fd90 	bl	80080a4 <__adddf3>
 8004584:	4606      	mov	r6, r0
 8004586:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 800458a:	f1b9 0f00 	cmp.w	r9, #0
 800458e:	f000 8168 	beq.w	8004862 <_dtoa_r+0xad2>
 8004592:	9908      	ldr	r1, [sp, #32]
 8004594:	9119      	str	r1, [sp, #100]	; 0x64
 8004596:	46c8      	mov	r8, r9
 8004598:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800459a:	2a00      	cmp	r2, #0
 800459c:	f000 8228 	beq.w	80049f0 <_dtoa_r+0xc60>
 80045a0:	4b7c      	ldr	r3, [pc, #496]	; (8004794 <_dtoa_r+0xa04>)
 80045a2:	4980      	ldr	r1, [pc, #512]	; (80047a4 <_dtoa_r+0xa14>)
 80045a4:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80045a8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80045ac:	2000      	movs	r0, #0
 80045ae:	f004 f855 	bl	800865c <__aeabi_ddiv>
 80045b2:	4632      	mov	r2, r6
 80045b4:	463b      	mov	r3, r7
 80045b6:	f003 fd73 	bl	80080a0 <__aeabi_dsub>
 80045ba:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 80045be:	4659      	mov	r1, fp
 80045c0:	4650      	mov	r0, sl
 80045c2:	f004 f9bb 	bl	800893c <__aeabi_d2iz>
 80045c6:	4605      	mov	r5, r0
 80045c8:	f003 feb8 	bl	800833c <__aeabi_i2d>
 80045cc:	4602      	mov	r2, r0
 80045ce:	460b      	mov	r3, r1
 80045d0:	4650      	mov	r0, sl
 80045d2:	4659      	mov	r1, fp
 80045d4:	f003 fd64 	bl	80080a0 <__aeabi_dsub>
 80045d8:	3530      	adds	r5, #48	; 0x30
 80045da:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80045dc:	e9cd 0100 	strd	r0, r1, [sp]
 80045e0:	b2ed      	uxtb	r5, r5
 80045e2:	7035      	strb	r5, [r6, #0]
 80045e4:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 80045e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80045ec:	f106 0b01 	add.w	fp, r6, #1
 80045f0:	f004 f99a 	bl	8008928 <__aeabi_dcmpgt>
 80045f4:	2800      	cmp	r0, #0
 80045f6:	f040 82bf 	bne.w	8004b78 <_dtoa_r+0xde8>
 80045fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80045fe:	2000      	movs	r0, #0
 8004600:	4966      	ldr	r1, [pc, #408]	; (800479c <_dtoa_r+0xa0c>)
 8004602:	f003 fd4d 	bl	80080a0 <__aeabi_dsub>
 8004606:	4602      	mov	r2, r0
 8004608:	460b      	mov	r3, r1
 800460a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800460e:	f004 f98b 	bl	8008928 <__aeabi_dcmpgt>
 8004612:	2800      	cmp	r0, #0
 8004614:	f040 82b6 	bne.w	8004b84 <_dtoa_r+0xdf4>
 8004618:	f1b8 0f01 	cmp.w	r8, #1
 800461c:	f340 8185 	ble.w	800492a <_dtoa_r+0xb9a>
 8004620:	44b0      	add	r8, r6
 8004622:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
 8004626:	46a2      	mov	sl, r4
 8004628:	46c1      	mov	r9, r8
 800462a:	e9dd 6700 	ldrd	r6, r7, [sp]
 800462e:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
 8004632:	e00d      	b.n	8004650 <_dtoa_r+0x8c0>
 8004634:	2000      	movs	r0, #0
 8004636:	4959      	ldr	r1, [pc, #356]	; (800479c <_dtoa_r+0xa0c>)
 8004638:	f003 fd32 	bl	80080a0 <__aeabi_dsub>
 800463c:	4622      	mov	r2, r4
 800463e:	462b      	mov	r3, r5
 8004640:	f004 f954 	bl	80088ec <__aeabi_dcmplt>
 8004644:	2800      	cmp	r0, #0
 8004646:	f040 829b 	bne.w	8004b80 <_dtoa_r+0xdf0>
 800464a:	45cb      	cmp	fp, r9
 800464c:	f000 816a 	beq.w	8004924 <_dtoa_r+0xb94>
 8004650:	4620      	mov	r0, r4
 8004652:	4629      	mov	r1, r5
 8004654:	2200      	movs	r2, #0
 8004656:	4b54      	ldr	r3, [pc, #336]	; (80047a8 <_dtoa_r+0xa18>)
 8004658:	f003 fed6 	bl	8008408 <__aeabi_dmul>
 800465c:	2200      	movs	r2, #0
 800465e:	4b52      	ldr	r3, [pc, #328]	; (80047a8 <_dtoa_r+0xa18>)
 8004660:	4604      	mov	r4, r0
 8004662:	460d      	mov	r5, r1
 8004664:	4630      	mov	r0, r6
 8004666:	4639      	mov	r1, r7
 8004668:	f003 fece 	bl	8008408 <__aeabi_dmul>
 800466c:	460f      	mov	r7, r1
 800466e:	4606      	mov	r6, r0
 8004670:	f004 f964 	bl	800893c <__aeabi_d2iz>
 8004674:	4680      	mov	r8, r0
 8004676:	f003 fe61 	bl	800833c <__aeabi_i2d>
 800467a:	4602      	mov	r2, r0
 800467c:	460b      	mov	r3, r1
 800467e:	4630      	mov	r0, r6
 8004680:	4639      	mov	r1, r7
 8004682:	f003 fd0d 	bl	80080a0 <__aeabi_dsub>
 8004686:	f108 0830 	add.w	r8, r8, #48	; 0x30
 800468a:	fa5f f888 	uxtb.w	r8, r8
 800468e:	4622      	mov	r2, r4
 8004690:	462b      	mov	r3, r5
 8004692:	f80b 8b01 	strb.w	r8, [fp], #1
 8004696:	4606      	mov	r6, r0
 8004698:	460f      	mov	r7, r1
 800469a:	f004 f927 	bl	80088ec <__aeabi_dcmplt>
 800469e:	4632      	mov	r2, r6
 80046a0:	463b      	mov	r3, r7
 80046a2:	2800      	cmp	r0, #0
 80046a4:	d0c6      	beq.n	8004634 <_dtoa_r+0x8a4>
 80046a6:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80046a8:	9608      	str	r6, [sp, #32]
 80046aa:	4654      	mov	r4, sl
 80046ac:	e541      	b.n	8004132 <_dtoa_r+0x3a2>
 80046ae:	2200      	movs	r2, #0
 80046b0:	920d      	str	r2, [sp, #52]	; 0x34
 80046b2:	9b06      	ldr	r3, [sp, #24]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	dd3d      	ble.n	8004734 <_dtoa_r+0x9a4>
 80046b8:	461d      	mov	r5, r3
 80046ba:	9311      	str	r3, [sp, #68]	; 0x44
 80046bc:	4699      	mov	r9, r3
 80046be:	e6f8      	b.n	80044b2 <_dtoa_r+0x722>
 80046c0:	2301      	movs	r3, #1
 80046c2:	930d      	str	r3, [sp, #52]	; 0x34
 80046c4:	e7f5      	b.n	80046b2 <_dtoa_r+0x922>
 80046c6:	f1b9 0f00 	cmp.w	r9, #0
 80046ca:	f73f ac85 	bgt.w	8003fd8 <_dtoa_r+0x248>
 80046ce:	f040 80e0 	bne.w	8004892 <_dtoa_r+0xb02>
 80046d2:	2200      	movs	r2, #0
 80046d4:	4b35      	ldr	r3, [pc, #212]	; (80047ac <_dtoa_r+0xa1c>)
 80046d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80046da:	f003 fe95 	bl	8008408 <__aeabi_dmul>
 80046de:	4652      	mov	r2, sl
 80046e0:	465b      	mov	r3, fp
 80046e2:	f004 f917 	bl	8008914 <__aeabi_dcmpge>
 80046e6:	46c8      	mov	r8, r9
 80046e8:	464e      	mov	r6, r9
 80046ea:	2800      	cmp	r0, #0
 80046ec:	f000 8091 	beq.w	8004812 <_dtoa_r+0xa82>
 80046f0:	9b06      	ldr	r3, [sp, #24]
 80046f2:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 80046f6:	43db      	mvns	r3, r3
 80046f8:	9308      	str	r3, [sp, #32]
 80046fa:	4641      	mov	r1, r8
 80046fc:	4620      	mov	r0, r4
 80046fe:	f001 fb77 	bl	8005df0 <_Bfree>
 8004702:	2e00      	cmp	r6, #0
 8004704:	f47f ae0e 	bne.w	8004324 <_dtoa_r+0x594>
 8004708:	e513      	b.n	8004132 <_dtoa_r+0x3a2>
 800470a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800470c:	4620      	mov	r0, r4
 800470e:	f001 fd07 	bl	8006120 <__pow5mult>
 8004712:	900c      	str	r0, [sp, #48]	; 0x30
 8004714:	e56f      	b.n	80041f6 <_dtoa_r+0x466>
 8004716:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8004718:	2e00      	cmp	r6, #0
 800471a:	f000 81ca 	beq.w	8004ab2 <_dtoa_r+0xd22>
 800471e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004722:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8004724:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8004726:	e52e      	b.n	8004186 <_dtoa_r+0x3f6>
 8004728:	4601      	mov	r1, r0
 800472a:	4620      	mov	r0, r4
 800472c:	f001 fb60 	bl	8005df0 <_Bfree>
 8004730:	2201      	movs	r2, #1
 8004732:	e685      	b.n	8004440 <_dtoa_r+0x6b0>
 8004734:	2501      	movs	r5, #1
 8004736:	9511      	str	r5, [sp, #68]	; 0x44
 8004738:	46a9      	mov	r9, r5
 800473a:	9506      	str	r5, [sp, #24]
 800473c:	2100      	movs	r1, #0
 800473e:	6461      	str	r1, [r4, #68]	; 0x44
 8004740:	e6c6      	b.n	80044d0 <_dtoa_r+0x740>
 8004742:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004744:	4641      	mov	r1, r8
 8004746:	f001 fd97 	bl	8006278 <__mcmp>
 800474a:	2800      	cmp	r0, #0
 800474c:	f6bf ad97 	bge.w	800427e <_dtoa_r+0x4ee>
 8004750:	f8dd e020 	ldr.w	lr, [sp, #32]
 8004754:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004756:	f10e 3eff 	add.w	lr, lr, #4294967295
 800475a:	4620      	mov	r0, r4
 800475c:	220a      	movs	r2, #10
 800475e:	2300      	movs	r3, #0
 8004760:	f8cd e020 	str.w	lr, [sp, #32]
 8004764:	f001 fb4e 	bl	8005e04 <__multadd>
 8004768:	990d      	ldr	r1, [sp, #52]	; 0x34
 800476a:	900c      	str	r0, [sp, #48]	; 0x30
 800476c:	2900      	cmp	r1, #0
 800476e:	f040 8220 	bne.w	8004bb2 <_dtoa_r+0xe22>
 8004772:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
 8004776:	e582      	b.n	800427e <_dtoa_r+0x4ee>
 8004778:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800477c:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8004780:	6918      	ldr	r0, [r3, #16]
 8004782:	f001 fbd7 	bl	8005f34 <__hi0bits>
 8004786:	f1c0 0020 	rsb	r0, r0, #32
 800478a:	e54c      	b.n	8004226 <_dtoa_r+0x496>
 800478c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800478e:	f7ff bb35 	b.w	8003dfc <_dtoa_r+0x6c>
 8004792:	bf00      	nop
 8004794:	08009200 	.word	0x08009200
 8004798:	080092c8 	.word	0x080092c8
 800479c:	3ff00000 	.word	0x3ff00000
 80047a0:	401c0000 	.word	0x401c0000
 80047a4:	3fe00000 	.word	0x3fe00000
 80047a8:	40240000 	.word	0x40240000
 80047ac:	40140000 	.word	0x40140000
 80047b0:	f1ba 0f00 	cmp.w	sl, #0
 80047b4:	f47f ad31 	bne.w	800421a <_dtoa_r+0x48a>
 80047b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80047bc:	2b00      	cmp	r3, #0
 80047be:	f040 817f 	bne.w	8004ac0 <_dtoa_r+0xd30>
 80047c2:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 80047c6:	0d3f      	lsrs	r7, r7, #20
 80047c8:	053f      	lsls	r7, r7, #20
 80047ca:	2f00      	cmp	r7, #0
 80047cc:	f43f ad26 	beq.w	800421c <_dtoa_r+0x48c>
 80047d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047d2:	f8dd e01c 	ldr.w	lr, [sp, #28]
 80047d6:	3301      	adds	r3, #1
 80047d8:	f10e 0e01 	add.w	lr, lr, #1
 80047dc:	930a      	str	r3, [sp, #40]	; 0x28
 80047de:	f8cd e01c 	str.w	lr, [sp, #28]
 80047e2:	2701      	movs	r7, #1
 80047e4:	e51a      	b.n	800421c <_dtoa_r+0x48c>
 80047e6:	9a04      	ldr	r2, [sp, #16]
 80047e8:	2a02      	cmp	r2, #2
 80047ea:	f77f ad4c 	ble.w	8004286 <_dtoa_r+0x4f6>
 80047ee:	f1b9 0f00 	cmp.w	r9, #0
 80047f2:	f47f af7d 	bne.w	80046f0 <_dtoa_r+0x960>
 80047f6:	4641      	mov	r1, r8
 80047f8:	464b      	mov	r3, r9
 80047fa:	2205      	movs	r2, #5
 80047fc:	4620      	mov	r0, r4
 80047fe:	f001 fb01 	bl	8005e04 <__multadd>
 8004802:	4680      	mov	r8, r0
 8004804:	4641      	mov	r1, r8
 8004806:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004808:	f001 fd36 	bl	8006278 <__mcmp>
 800480c:	2800      	cmp	r0, #0
 800480e:	f77f af6f 	ble.w	80046f0 <_dtoa_r+0x960>
 8004812:	f8dd e020 	ldr.w	lr, [sp, #32]
 8004816:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004818:	2331      	movs	r3, #49	; 0x31
 800481a:	f10e 0e01 	add.w	lr, lr, #1
 800481e:	f8cd e020 	str.w	lr, [sp, #32]
 8004822:	700b      	strb	r3, [r1, #0]
 8004824:	f101 0b01 	add.w	fp, r1, #1
 8004828:	e767      	b.n	80046fa <_dtoa_r+0x96a>
 800482a:	9a08      	ldr	r2, [sp, #32]
 800482c:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
 8004830:	2331      	movs	r3, #49	; 0x31
 8004832:	3201      	adds	r2, #1
 8004834:	9208      	str	r2, [sp, #32]
 8004836:	f88e 3000 	strb.w	r3, [lr]
 800483a:	e565      	b.n	8004308 <_dtoa_r+0x578>
 800483c:	46a3      	mov	fp, r4
 800483e:	9c06      	ldr	r4, [sp, #24]
 8004840:	e477      	b.n	8004132 <_dtoa_r+0x3a2>
 8004842:	4640      	mov	r0, r8
 8004844:	f003 fd7a 	bl	800833c <__aeabi_i2d>
 8004848:	4602      	mov	r2, r0
 800484a:	460b      	mov	r3, r1
 800484c:	4650      	mov	r0, sl
 800484e:	4659      	mov	r1, fp
 8004850:	f003 fdda 	bl	8008408 <__aeabi_dmul>
 8004854:	2200      	movs	r2, #0
 8004856:	4b9e      	ldr	r3, [pc, #632]	; (8004ad0 <_dtoa_r+0xd40>)
 8004858:	f003 fc24 	bl	80080a4 <__adddf3>
 800485c:	4606      	mov	r6, r0
 800485e:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 8004862:	4650      	mov	r0, sl
 8004864:	4659      	mov	r1, fp
 8004866:	2200      	movs	r2, #0
 8004868:	4b9a      	ldr	r3, [pc, #616]	; (8004ad4 <_dtoa_r+0xd44>)
 800486a:	f003 fc19 	bl	80080a0 <__aeabi_dsub>
 800486e:	4632      	mov	r2, r6
 8004870:	463b      	mov	r3, r7
 8004872:	4682      	mov	sl, r0
 8004874:	468b      	mov	fp, r1
 8004876:	f004 f857 	bl	8008928 <__aeabi_dcmpgt>
 800487a:	2800      	cmp	r0, #0
 800487c:	f040 80b4 	bne.w	80049e8 <_dtoa_r+0xc58>
 8004880:	4632      	mov	r2, r6
 8004882:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8004886:	4650      	mov	r0, sl
 8004888:	4659      	mov	r1, fp
 800488a:	f004 f82f 	bl	80088ec <__aeabi_dcmplt>
 800488e:	2800      	cmp	r0, #0
 8004890:	d04b      	beq.n	800492a <_dtoa_r+0xb9a>
 8004892:	f04f 0800 	mov.w	r8, #0
 8004896:	4646      	mov	r6, r8
 8004898:	e72a      	b.n	80046f0 <_dtoa_r+0x960>
 800489a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800489c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800489e:	4620      	mov	r0, r4
 80048a0:	f001 fc3e 	bl	8006120 <__pow5mult>
 80048a4:	900c      	str	r0, [sp, #48]	; 0x30
 80048a6:	e4a6      	b.n	80041f6 <_dtoa_r+0x466>
 80048a8:	2101      	movs	r1, #1
 80048aa:	910d      	str	r1, [sp, #52]	; 0x34
 80048ac:	e5f6      	b.n	800449c <_dtoa_r+0x70c>
 80048ae:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80048b0:	970e      	str	r7, [sp, #56]	; 0x38
 80048b2:	1bbb      	subs	r3, r7, r6
 80048b4:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80048b6:	441e      	add	r6, r3
 80048b8:	960f      	str	r6, [sp, #60]	; 0x3c
 80048ba:	2700      	movs	r7, #0
 80048bc:	e45d      	b.n	800417a <_dtoa_r+0x3ea>
 80048be:	ed9d 7b14 	vldr	d7, [sp, #80]	; 0x50
 80048c2:	f04f 0802 	mov.w	r8, #2
 80048c6:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 80048ca:	e62a      	b.n	8004522 <_dtoa_r+0x792>
 80048cc:	2a00      	cmp	r2, #0
 80048ce:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80048d2:	46d9      	mov	r9, fp
 80048d4:	dd11      	ble.n	80048fa <_dtoa_r+0xb6a>
 80048d6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80048d8:	2201      	movs	r2, #1
 80048da:	4620      	mov	r0, r4
 80048dc:	f001 fc6e 	bl	80061bc <__lshift>
 80048e0:	4641      	mov	r1, r8
 80048e2:	900c      	str	r0, [sp, #48]	; 0x30
 80048e4:	f001 fcc8 	bl	8006278 <__mcmp>
 80048e8:	2800      	cmp	r0, #0
 80048ea:	f340 815b 	ble.w	8004ba4 <_dtoa_r+0xe14>
 80048ee:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80048f2:	f000 8123 	beq.w	8004b3c <_dtoa_r+0xdac>
 80048f6:	f109 0a31 	add.w	sl, r9, #49	; 0x31
 80048fa:	4635      	mov	r5, r6
 80048fc:	9e07      	ldr	r6, [sp, #28]
 80048fe:	f886 a000 	strb.w	sl, [r6]
 8004902:	f106 0b01 	add.w	fp, r6, #1
 8004906:	463e      	mov	r6, r7
 8004908:	e4fe      	b.n	8004308 <_dtoa_r+0x578>
 800490a:	d103      	bne.n	8004914 <_dtoa_r+0xb84>
 800490c:	f01a 0f01 	tst.w	sl, #1
 8004910:	f47f acea 	bne.w	80042e8 <_dtoa_r+0x558>
 8004914:	465b      	mov	r3, fp
 8004916:	469b      	mov	fp, r3
 8004918:	3b01      	subs	r3, #1
 800491a:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
 800491e:	2a30      	cmp	r2, #48	; 0x30
 8004920:	d0f9      	beq.n	8004916 <_dtoa_r+0xb86>
 8004922:	e4f1      	b.n	8004308 <_dtoa_r+0x578>
 8004924:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
 8004928:	4654      	mov	r4, sl
 800492a:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	; 0x50
 800492e:	f7ff bb40 	b.w	8003fb2 <_dtoa_r+0x222>
 8004932:	9e08      	ldr	r6, [sp, #32]
 8004934:	4275      	negs	r5, r6
 8004936:	2d00      	cmp	r5, #0
 8004938:	f000 80c5 	beq.w	8004ac6 <_dtoa_r+0xd36>
 800493c:	4b66      	ldr	r3, [pc, #408]	; (8004ad8 <_dtoa_r+0xd48>)
 800493e:	f005 020f 	and.w	r2, r5, #15
 8004942:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800494a:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 800494e:	f003 fd5b 	bl	8008408 <__aeabi_dmul>
 8004952:	112d      	asrs	r5, r5, #4
 8004954:	4682      	mov	sl, r0
 8004956:	468b      	mov	fp, r1
 8004958:	f000 8136 	beq.w	8004bc8 <_dtoa_r+0xe38>
 800495c:	4e5f      	ldr	r6, [pc, #380]	; (8004adc <_dtoa_r+0xd4c>)
 800495e:	f04f 0802 	mov.w	r8, #2
 8004962:	07ea      	lsls	r2, r5, #31
 8004964:	d505      	bpl.n	8004972 <_dtoa_r+0xbe2>
 8004966:	e9d6 2300 	ldrd	r2, r3, [r6]
 800496a:	f003 fd4d 	bl	8008408 <__aeabi_dmul>
 800496e:	f108 0801 	add.w	r8, r8, #1
 8004972:	106d      	asrs	r5, r5, #1
 8004974:	f106 0608 	add.w	r6, r6, #8
 8004978:	d1f3      	bne.n	8004962 <_dtoa_r+0xbd2>
 800497a:	4682      	mov	sl, r0
 800497c:	468b      	mov	fp, r1
 800497e:	e5eb      	b.n	8004558 <_dtoa_r+0x7c8>
 8004980:	9e08      	ldr	r6, [sp, #32]
 8004982:	3601      	adds	r6, #1
 8004984:	9608      	str	r6, [sp, #32]
 8004986:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8004988:	2230      	movs	r2, #48	; 0x30
 800498a:	7032      	strb	r2, [r6, #0]
 800498c:	2231      	movs	r2, #49	; 0x31
 800498e:	701a      	strb	r2, [r3, #0]
 8004990:	f7ff bbcf 	b.w	8004132 <_dtoa_r+0x3a2>
 8004994:	6871      	ldr	r1, [r6, #4]
 8004996:	4620      	mov	r0, r4
 8004998:	f001 fa04 	bl	8005da4 <_Balloc>
 800499c:	6933      	ldr	r3, [r6, #16]
 800499e:	1c9a      	adds	r2, r3, #2
 80049a0:	4605      	mov	r5, r0
 80049a2:	0092      	lsls	r2, r2, #2
 80049a4:	f106 010c 	add.w	r1, r6, #12
 80049a8:	300c      	adds	r0, #12
 80049aa:	f7fd fc15 	bl	80021d8 <memcpy>
 80049ae:	4620      	mov	r0, r4
 80049b0:	4629      	mov	r1, r5
 80049b2:	2201      	movs	r2, #1
 80049b4:	f001 fc02 	bl	80061bc <__lshift>
 80049b8:	4607      	mov	r7, r0
 80049ba:	e4fd      	b.n	80043b8 <_dtoa_r+0x628>
 80049bc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80049c0:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80049c4:	f000 80ba 	beq.w	8004b3c <_dtoa_r+0xdac>
 80049c8:	f8dd e01c 	ldr.w	lr, [sp, #28]
 80049cc:	f10a 0301 	add.w	r3, sl, #1
 80049d0:	4635      	mov	r5, r6
 80049d2:	f88e 3000 	strb.w	r3, [lr]
 80049d6:	f10e 0b01 	add.w	fp, lr, #1
 80049da:	463e      	mov	r6, r7
 80049dc:	e494      	b.n	8004308 <_dtoa_r+0x578>
 80049de:	4635      	mov	r5, r6
 80049e0:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80049e4:	463e      	mov	r6, r7
 80049e6:	e473      	b.n	80042d0 <_dtoa_r+0x540>
 80049e8:	f04f 0800 	mov.w	r8, #0
 80049ec:	4646      	mov	r6, r8
 80049ee:	e710      	b.n	8004812 <_dtoa_r+0xa82>
 80049f0:	4939      	ldr	r1, [pc, #228]	; (8004ad8 <_dtoa_r+0xd48>)
 80049f2:	f108 3eff 	add.w	lr, r8, #4294967295
 80049f6:	eb01 01ce 	add.w	r1, r1, lr, lsl #3
 80049fa:	4632      	mov	r2, r6
 80049fc:	463b      	mov	r3, r7
 80049fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a02:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
 8004a06:	f003 fcff 	bl	8008408 <__aeabi_dmul>
 8004a0a:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 8004a0e:	4659      	mov	r1, fp
 8004a10:	4650      	mov	r0, sl
 8004a12:	f003 ff93 	bl	800893c <__aeabi_d2iz>
 8004a16:	4605      	mov	r5, r0
 8004a18:	f003 fc90 	bl	800833c <__aeabi_i2d>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	460b      	mov	r3, r1
 8004a20:	4650      	mov	r0, sl
 8004a22:	4659      	mov	r1, fp
 8004a24:	f003 fb3c 	bl	80080a0 <__aeabi_dsub>
 8004a28:	460f      	mov	r7, r1
 8004a2a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a2c:	3530      	adds	r5, #48	; 0x30
 8004a2e:	f1b8 0f01 	cmp.w	r8, #1
 8004a32:	4606      	mov	r6, r0
 8004a34:	700d      	strb	r5, [r1, #0]
 8004a36:	f101 0b01 	add.w	fp, r1, #1
 8004a3a:	d021      	beq.n	8004a80 <_dtoa_r+0xcf0>
 8004a3c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a3e:	1e4b      	subs	r3, r1, #1
 8004a40:	460d      	mov	r5, r1
 8004a42:	eb03 0a08 	add.w	sl, r3, r8
 8004a46:	4630      	mov	r0, r6
 8004a48:	4639      	mov	r1, r7
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	4b24      	ldr	r3, [pc, #144]	; (8004ae0 <_dtoa_r+0xd50>)
 8004a4e:	f003 fcdb 	bl	8008408 <__aeabi_dmul>
 8004a52:	460f      	mov	r7, r1
 8004a54:	4606      	mov	r6, r0
 8004a56:	f003 ff71 	bl	800893c <__aeabi_d2iz>
 8004a5a:	4680      	mov	r8, r0
 8004a5c:	f003 fc6e 	bl	800833c <__aeabi_i2d>
 8004a60:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8004a64:	4602      	mov	r2, r0
 8004a66:	460b      	mov	r3, r1
 8004a68:	4630      	mov	r0, r6
 8004a6a:	4639      	mov	r1, r7
 8004a6c:	f003 fb18 	bl	80080a0 <__aeabi_dsub>
 8004a70:	f805 8f01 	strb.w	r8, [r5, #1]!
 8004a74:	4555      	cmp	r5, sl
 8004a76:	d1e8      	bne.n	8004a4a <_dtoa_r+0xcba>
 8004a78:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004a7a:	4606      	mov	r6, r0
 8004a7c:	460f      	mov	r7, r1
 8004a7e:	4493      	add	fp, r2
 8004a80:	2200      	movs	r2, #0
 8004a82:	4b18      	ldr	r3, [pc, #96]	; (8004ae4 <_dtoa_r+0xd54>)
 8004a84:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8004a88:	f003 fb0c 	bl	80080a4 <__adddf3>
 8004a8c:	4632      	mov	r2, r6
 8004a8e:	463b      	mov	r3, r7
 8004a90:	f003 ff2c 	bl	80088ec <__aeabi_dcmplt>
 8004a94:	2800      	cmp	r0, #0
 8004a96:	d05b      	beq.n	8004b50 <_dtoa_r+0xdc0>
 8004a98:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8004a9a:	9608      	str	r6, [sp, #32]
 8004a9c:	f81b 5c01 	ldrb.w	r5, [fp, #-1]
 8004aa0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004aa2:	f7ff bb3f 	b.w	8004124 <_dtoa_r+0x394>
 8004aa6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	ebc9 0506 	rsb	r5, r9, r6
 8004aae:	f7ff bb6a 	b.w	8004186 <_dtoa_r+0x3f6>
 8004ab2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8004ab4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8004ab6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8004ab8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004abc:	f7ff bb63 	b.w	8004186 <_dtoa_r+0x3f6>
 8004ac0:	4657      	mov	r7, sl
 8004ac2:	f7ff bbab 	b.w	800421c <_dtoa_r+0x48c>
 8004ac6:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	; 0x50
 8004aca:	f04f 0802 	mov.w	r8, #2
 8004ace:	e543      	b.n	8004558 <_dtoa_r+0x7c8>
 8004ad0:	401c0000 	.word	0x401c0000
 8004ad4:	40140000 	.word	0x40140000
 8004ad8:	08009200 	.word	0x08009200
 8004adc:	080092c8 	.word	0x080092c8
 8004ae0:	40240000 	.word	0x40240000
 8004ae4:	3fe00000 	.word	0x3fe00000
 8004ae8:	f1b9 0f00 	cmp.w	r9, #0
 8004aec:	f43f aea9 	beq.w	8004842 <_dtoa_r+0xab2>
 8004af0:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8004af2:	2e00      	cmp	r6, #0
 8004af4:	f77f af19 	ble.w	800492a <_dtoa_r+0xb9a>
 8004af8:	2200      	movs	r2, #0
 8004afa:	4b38      	ldr	r3, [pc, #224]	; (8004bdc <_dtoa_r+0xe4c>)
 8004afc:	4650      	mov	r0, sl
 8004afe:	4659      	mov	r1, fp
 8004b00:	f003 fc82 	bl	8008408 <__aeabi_dmul>
 8004b04:	4682      	mov	sl, r0
 8004b06:	f108 0001 	add.w	r0, r8, #1
 8004b0a:	468b      	mov	fp, r1
 8004b0c:	f003 fc16 	bl	800833c <__aeabi_i2d>
 8004b10:	4602      	mov	r2, r0
 8004b12:	460b      	mov	r3, r1
 8004b14:	4650      	mov	r0, sl
 8004b16:	4659      	mov	r1, fp
 8004b18:	f003 fc76 	bl	8008408 <__aeabi_dmul>
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	4b30      	ldr	r3, [pc, #192]	; (8004be0 <_dtoa_r+0xe50>)
 8004b20:	f003 fac0 	bl	80080a4 <__adddf3>
 8004b24:	f8dd e020 	ldr.w	lr, [sp, #32]
 8004b28:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
 8004b2c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8004b30:	4606      	mov	r6, r0
 8004b32:	f8cd e064 	str.w	lr, [sp, #100]	; 0x64
 8004b36:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 8004b3a:	e52d      	b.n	8004598 <_dtoa_r+0x808>
 8004b3c:	9b07      	ldr	r3, [sp, #28]
 8004b3e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b40:	2239      	movs	r2, #57	; 0x39
 8004b42:	4635      	mov	r5, r6
 8004b44:	701a      	strb	r2, [r3, #0]
 8004b46:	463e      	mov	r6, r7
 8004b48:	f103 0b01 	add.w	fp, r3, #1
 8004b4c:	f7ff bbd6 	b.w	80042fc <_dtoa_r+0x56c>
 8004b50:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8004b54:	2000      	movs	r0, #0
 8004b56:	4923      	ldr	r1, [pc, #140]	; (8004be4 <_dtoa_r+0xe54>)
 8004b58:	f003 faa2 	bl	80080a0 <__aeabi_dsub>
 8004b5c:	4632      	mov	r2, r6
 8004b5e:	463b      	mov	r3, r7
 8004b60:	f003 fee2 	bl	8008928 <__aeabi_dcmpgt>
 8004b64:	2800      	cmp	r0, #0
 8004b66:	f43f aee0 	beq.w	800492a <_dtoa_r+0xb9a>
 8004b6a:	465b      	mov	r3, fp
 8004b6c:	469b      	mov	fp, r3
 8004b6e:	3b01      	subs	r3, #1
 8004b70:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
 8004b74:	2a30      	cmp	r2, #48	; 0x30
 8004b76:	d0f9      	beq.n	8004b6c <_dtoa_r+0xddc>
 8004b78:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8004b7a:	9608      	str	r6, [sp, #32]
 8004b7c:	f7ff bad9 	b.w	8004132 <_dtoa_r+0x3a2>
 8004b80:	4645      	mov	r5, r8
 8004b82:	4654      	mov	r4, sl
 8004b84:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8004b86:	9608      	str	r6, [sp, #32]
 8004b88:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004b8a:	f7ff bacb 	b.w	8004124 <_dtoa_r+0x394>
 8004b8e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004b92:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8004b96:	46d9      	mov	r9, fp
 8004b98:	d0d0      	beq.n	8004b3c <_dtoa_r+0xdac>
 8004b9a:	9b06      	ldr	r3, [sp, #24]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	f73f aeaa 	bgt.w	80048f6 <_dtoa_r+0xb66>
 8004ba2:	e6aa      	b.n	80048fa <_dtoa_r+0xb6a>
 8004ba4:	f47f aea9 	bne.w	80048fa <_dtoa_r+0xb6a>
 8004ba8:	f01a 0f01 	tst.w	sl, #1
 8004bac:	f43f aea5 	beq.w	80048fa <_dtoa_r+0xb6a>
 8004bb0:	e69d      	b.n	80048ee <_dtoa_r+0xb5e>
 8004bb2:	4631      	mov	r1, r6
 8004bb4:	4620      	mov	r0, r4
 8004bb6:	220a      	movs	r2, #10
 8004bb8:	2300      	movs	r3, #0
 8004bba:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
 8004bbe:	f001 f921 	bl	8005e04 <__multadd>
 8004bc2:	4606      	mov	r6, r0
 8004bc4:	f7ff bb5b 	b.w	800427e <_dtoa_r+0x4ee>
 8004bc8:	f04f 0802 	mov.w	r8, #2
 8004bcc:	e4c4      	b.n	8004558 <_dtoa_r+0x7c8>
 8004bce:	f43f ab40 	beq.w	8004252 <_dtoa_r+0x4c2>
 8004bd2:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 8004bd6:	f7ff bbd4 	b.w	8004382 <_dtoa_r+0x5f2>
 8004bda:	bf00      	nop
 8004bdc:	40240000 	.word	0x40240000
 8004be0:	401c0000 	.word	0x401c0000
 8004be4:	3fe00000 	.word	0x3fe00000

08004be8 <__sflush_r>:
 8004be8:	898b      	ldrh	r3, [r1, #12]
 8004bea:	b29a      	uxth	r2, r3
 8004bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bf0:	460d      	mov	r5, r1
 8004bf2:	0711      	lsls	r1, r2, #28
 8004bf4:	4680      	mov	r8, r0
 8004bf6:	d43c      	bmi.n	8004c72 <__sflush_r+0x8a>
 8004bf8:	686a      	ldr	r2, [r5, #4]
 8004bfa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004bfe:	2a00      	cmp	r2, #0
 8004c00:	81ab      	strh	r3, [r5, #12]
 8004c02:	dd59      	ble.n	8004cb8 <__sflush_r+0xd0>
 8004c04:	6aac      	ldr	r4, [r5, #40]	; 0x28
 8004c06:	2c00      	cmp	r4, #0
 8004c08:	d04b      	beq.n	8004ca2 <__sflush_r+0xba>
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004c10:	2100      	movs	r1, #0
 8004c12:	b292      	uxth	r2, r2
 8004c14:	f8d8 6000 	ldr.w	r6, [r8]
 8004c18:	f8c8 1000 	str.w	r1, [r8]
 8004c1c:	2a00      	cmp	r2, #0
 8004c1e:	d04f      	beq.n	8004cc0 <__sflush_r+0xd8>
 8004c20:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8004c22:	075f      	lsls	r7, r3, #29
 8004c24:	d505      	bpl.n	8004c32 <__sflush_r+0x4a>
 8004c26:	6869      	ldr	r1, [r5, #4]
 8004c28:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004c2a:	1a52      	subs	r2, r2, r1
 8004c2c:	b10b      	cbz	r3, 8004c32 <__sflush_r+0x4a>
 8004c2e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8004c30:	1ad2      	subs	r2, r2, r3
 8004c32:	4640      	mov	r0, r8
 8004c34:	69e9      	ldr	r1, [r5, #28]
 8004c36:	2300      	movs	r3, #0
 8004c38:	47a0      	blx	r4
 8004c3a:	1c44      	adds	r4, r0, #1
 8004c3c:	d04a      	beq.n	8004cd4 <__sflush_r+0xec>
 8004c3e:	89aa      	ldrh	r2, [r5, #12]
 8004c40:	692b      	ldr	r3, [r5, #16]
 8004c42:	602b      	str	r3, [r5, #0]
 8004c44:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	606a      	str	r2, [r5, #4]
 8004c4e:	04da      	lsls	r2, r3, #19
 8004c50:	81ab      	strh	r3, [r5, #12]
 8004c52:	d44c      	bmi.n	8004cee <__sflush_r+0x106>
 8004c54:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8004c56:	f8c8 6000 	str.w	r6, [r8]
 8004c5a:	b311      	cbz	r1, 8004ca2 <__sflush_r+0xba>
 8004c5c:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8004c60:	4299      	cmp	r1, r3
 8004c62:	d002      	beq.n	8004c6a <__sflush_r+0x82>
 8004c64:	4640      	mov	r0, r8
 8004c66:	f000 f9ff 	bl	8005068 <_free_r>
 8004c6a:	2000      	movs	r0, #0
 8004c6c:	6328      	str	r0, [r5, #48]	; 0x30
 8004c6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c72:	692e      	ldr	r6, [r5, #16]
 8004c74:	b1ae      	cbz	r6, 8004ca2 <__sflush_r+0xba>
 8004c76:	682c      	ldr	r4, [r5, #0]
 8004c78:	602e      	str	r6, [r5, #0]
 8004c7a:	0791      	lsls	r1, r2, #30
 8004c7c:	bf0c      	ite	eq
 8004c7e:	696b      	ldreq	r3, [r5, #20]
 8004c80:	2300      	movne	r3, #0
 8004c82:	1ba4      	subs	r4, r4, r6
 8004c84:	60ab      	str	r3, [r5, #8]
 8004c86:	e00a      	b.n	8004c9e <__sflush_r+0xb6>
 8004c88:	4632      	mov	r2, r6
 8004c8a:	4623      	mov	r3, r4
 8004c8c:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8004c8e:	69e9      	ldr	r1, [r5, #28]
 8004c90:	4640      	mov	r0, r8
 8004c92:	47b8      	blx	r7
 8004c94:	2800      	cmp	r0, #0
 8004c96:	ebc0 0404 	rsb	r4, r0, r4
 8004c9a:	4406      	add	r6, r0
 8004c9c:	dd04      	ble.n	8004ca8 <__sflush_r+0xc0>
 8004c9e:	2c00      	cmp	r4, #0
 8004ca0:	dcf2      	bgt.n	8004c88 <__sflush_r+0xa0>
 8004ca2:	2000      	movs	r0, #0
 8004ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ca8:	89ab      	ldrh	r3, [r5, #12]
 8004caa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cae:	81ab      	strh	r3, [r5, #12]
 8004cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8004cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cb8:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8004cba:	2a00      	cmp	r2, #0
 8004cbc:	dca2      	bgt.n	8004c04 <__sflush_r+0x1c>
 8004cbe:	e7f0      	b.n	8004ca2 <__sflush_r+0xba>
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	4640      	mov	r0, r8
 8004cc4:	69e9      	ldr	r1, [r5, #28]
 8004cc6:	47a0      	blx	r4
 8004cc8:	1c43      	adds	r3, r0, #1
 8004cca:	4602      	mov	r2, r0
 8004ccc:	d01e      	beq.n	8004d0c <__sflush_r+0x124>
 8004cce:	89ab      	ldrh	r3, [r5, #12]
 8004cd0:	6aac      	ldr	r4, [r5, #40]	; 0x28
 8004cd2:	e7a6      	b.n	8004c22 <__sflush_r+0x3a>
 8004cd4:	f8d8 3000 	ldr.w	r3, [r8]
 8004cd8:	b95b      	cbnz	r3, 8004cf2 <__sflush_r+0x10a>
 8004cda:	89a9      	ldrh	r1, [r5, #12]
 8004cdc:	606b      	str	r3, [r5, #4]
 8004cde:	f421 6300 	bic.w	r3, r1, #2048	; 0x800
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	692a      	ldr	r2, [r5, #16]
 8004ce6:	81ab      	strh	r3, [r5, #12]
 8004ce8:	04db      	lsls	r3, r3, #19
 8004cea:	602a      	str	r2, [r5, #0]
 8004cec:	d5b2      	bpl.n	8004c54 <__sflush_r+0x6c>
 8004cee:	6528      	str	r0, [r5, #80]	; 0x50
 8004cf0:	e7b0      	b.n	8004c54 <__sflush_r+0x6c>
 8004cf2:	2b1d      	cmp	r3, #29
 8004cf4:	d001      	beq.n	8004cfa <__sflush_r+0x112>
 8004cf6:	2b16      	cmp	r3, #22
 8004cf8:	d119      	bne.n	8004d2e <__sflush_r+0x146>
 8004cfa:	89aa      	ldrh	r2, [r5, #12]
 8004cfc:	692b      	ldr	r3, [r5, #16]
 8004cfe:	602b      	str	r3, [r5, #0]
 8004d00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d04:	2300      	movs	r3, #0
 8004d06:	81aa      	strh	r2, [r5, #12]
 8004d08:	606b      	str	r3, [r5, #4]
 8004d0a:	e7a3      	b.n	8004c54 <__sflush_r+0x6c>
 8004d0c:	f8d8 3000 	ldr.w	r3, [r8]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d0dc      	beq.n	8004cce <__sflush_r+0xe6>
 8004d14:	2b1d      	cmp	r3, #29
 8004d16:	d007      	beq.n	8004d28 <__sflush_r+0x140>
 8004d18:	2b16      	cmp	r3, #22
 8004d1a:	d005      	beq.n	8004d28 <__sflush_r+0x140>
 8004d1c:	89ab      	ldrh	r3, [r5, #12]
 8004d1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d22:	81ab      	strh	r3, [r5, #12]
 8004d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d28:	f8c8 6000 	str.w	r6, [r8]
 8004d2c:	e7b9      	b.n	8004ca2 <__sflush_r+0xba>
 8004d2e:	89ab      	ldrh	r3, [r5, #12]
 8004d30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d34:	81ab      	strh	r3, [r5, #12]
 8004d36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d3a:	bf00      	nop

08004d3c <_fflush_r>:
 8004d3c:	b510      	push	{r4, lr}
 8004d3e:	4604      	mov	r4, r0
 8004d40:	b082      	sub	sp, #8
 8004d42:	b108      	cbz	r0, 8004d48 <_fflush_r+0xc>
 8004d44:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004d46:	b153      	cbz	r3, 8004d5e <_fflush_r+0x22>
 8004d48:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 8004d4c:	b908      	cbnz	r0, 8004d52 <_fflush_r+0x16>
 8004d4e:	b002      	add	sp, #8
 8004d50:	bd10      	pop	{r4, pc}
 8004d52:	4620      	mov	r0, r4
 8004d54:	b002      	add	sp, #8
 8004d56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d5a:	f7ff bf45 	b.w	8004be8 <__sflush_r>
 8004d5e:	9101      	str	r1, [sp, #4]
 8004d60:	f000 f840 	bl	8004de4 <__sinit>
 8004d64:	9901      	ldr	r1, [sp, #4]
 8004d66:	e7ef      	b.n	8004d48 <_fflush_r+0xc>

08004d68 <fflush>:
 8004d68:	b120      	cbz	r0, 8004d74 <fflush+0xc>
 8004d6a:	4b05      	ldr	r3, [pc, #20]	; (8004d80 <fflush+0x18>)
 8004d6c:	4601      	mov	r1, r0
 8004d6e:	6818      	ldr	r0, [r3, #0]
 8004d70:	f7ff bfe4 	b.w	8004d3c <_fflush_r>
 8004d74:	4b03      	ldr	r3, [pc, #12]	; (8004d84 <fflush+0x1c>)
 8004d76:	4904      	ldr	r1, [pc, #16]	; (8004d88 <fflush+0x20>)
 8004d78:	6818      	ldr	r0, [r3, #0]
 8004d7a:	f000 bbf3 	b.w	8005564 <_fwalk_reent>
 8004d7e:	bf00      	nop
 8004d80:	20000498 	.word	0x20000498
 8004d84:	0800916c 	.word	0x0800916c
 8004d88:	08004d3d 	.word	0x08004d3d

08004d8c <__fp_lock>:
 8004d8c:	2000      	movs	r0, #0
 8004d8e:	4770      	bx	lr

08004d90 <__fp_unlock>:
 8004d90:	2000      	movs	r0, #0
 8004d92:	4770      	bx	lr

08004d94 <_cleanup_r>:
 8004d94:	4901      	ldr	r1, [pc, #4]	; (8004d9c <_cleanup_r+0x8>)
 8004d96:	f000 bbbf 	b.w	8005518 <_fwalk>
 8004d9a:	bf00      	nop
 8004d9c:	08007cb1 	.word	0x08007cb1

08004da0 <__sfmoreglue>:
 8004da0:	b570      	push	{r4, r5, r6, lr}
 8004da2:	1e4b      	subs	r3, r1, #1
 8004da4:	2568      	movs	r5, #104	; 0x68
 8004da6:	fb05 f503 	mul.w	r5, r5, r3
 8004daa:	460e      	mov	r6, r1
 8004dac:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004db0:	f000 fcb0 	bl	8005714 <_malloc_r>
 8004db4:	4604      	mov	r4, r0
 8004db6:	b140      	cbz	r0, 8004dca <__sfmoreglue+0x2a>
 8004db8:	2100      	movs	r1, #0
 8004dba:	300c      	adds	r0, #12
 8004dbc:	6066      	str	r6, [r4, #4]
 8004dbe:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004dc2:	6021      	str	r1, [r4, #0]
 8004dc4:	60a0      	str	r0, [r4, #8]
 8004dc6:	f7fd faa1 	bl	800230c <memset>
 8004dca:	4620      	mov	r0, r4
 8004dcc:	bd70      	pop	{r4, r5, r6, pc}
 8004dce:	bf00      	nop

08004dd0 <_cleanup>:
 8004dd0:	4b02      	ldr	r3, [pc, #8]	; (8004ddc <_cleanup+0xc>)
 8004dd2:	4903      	ldr	r1, [pc, #12]	; (8004de0 <_cleanup+0x10>)
 8004dd4:	6818      	ldr	r0, [r3, #0]
 8004dd6:	f000 bb9f 	b.w	8005518 <_fwalk>
 8004dda:	bf00      	nop
 8004ddc:	0800916c 	.word	0x0800916c
 8004de0:	08007cb1 	.word	0x08007cb1

08004de4 <__sinit>:
 8004de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004de8:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8004dea:	b083      	sub	sp, #12
 8004dec:	4607      	mov	r7, r0
 8004dee:	2c00      	cmp	r4, #0
 8004df0:	d165      	bne.n	8004ebe <__sinit+0xda>
 8004df2:	6845      	ldr	r5, [r0, #4]
 8004df4:	4833      	ldr	r0, [pc, #204]	; (8004ec4 <__sinit+0xe0>)
 8004df6:	63f8      	str	r0, [r7, #60]	; 0x3c
 8004df8:	2304      	movs	r3, #4
 8004dfa:	2103      	movs	r1, #3
 8004dfc:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
 8004e00:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
 8004e04:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
 8004e08:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
 8004e0c:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8004e10:	81ab      	strh	r3, [r5, #12]
 8004e12:	602c      	str	r4, [r5, #0]
 8004e14:	606c      	str	r4, [r5, #4]
 8004e16:	60ac      	str	r4, [r5, #8]
 8004e18:	666c      	str	r4, [r5, #100]	; 0x64
 8004e1a:	81ec      	strh	r4, [r5, #14]
 8004e1c:	612c      	str	r4, [r5, #16]
 8004e1e:	616c      	str	r4, [r5, #20]
 8004e20:	61ac      	str	r4, [r5, #24]
 8004e22:	4621      	mov	r1, r4
 8004e24:	2208      	movs	r2, #8
 8004e26:	f7fd fa71 	bl	800230c <memset>
 8004e2a:	68be      	ldr	r6, [r7, #8]
 8004e2c:	f8df b098 	ldr.w	fp, [pc, #152]	; 8004ec8 <__sinit+0xe4>
 8004e30:	f8df a098 	ldr.w	sl, [pc, #152]	; 8004ecc <__sinit+0xe8>
 8004e34:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8004ed0 <__sinit+0xec>
 8004e38:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8004ed4 <__sinit+0xf0>
 8004e3c:	61ed      	str	r5, [r5, #28]
 8004e3e:	2301      	movs	r3, #1
 8004e40:	2209      	movs	r2, #9
 8004e42:	f8c5 b020 	str.w	fp, [r5, #32]
 8004e46:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 8004e4a:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8004e4e:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 8004e52:	4621      	mov	r1, r4
 8004e54:	81f3      	strh	r3, [r6, #14]
 8004e56:	81b2      	strh	r2, [r6, #12]
 8004e58:	6034      	str	r4, [r6, #0]
 8004e5a:	6074      	str	r4, [r6, #4]
 8004e5c:	60b4      	str	r4, [r6, #8]
 8004e5e:	6674      	str	r4, [r6, #100]	; 0x64
 8004e60:	6134      	str	r4, [r6, #16]
 8004e62:	6174      	str	r4, [r6, #20]
 8004e64:	61b4      	str	r4, [r6, #24]
 8004e66:	2208      	movs	r2, #8
 8004e68:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 8004e6c:	9301      	str	r3, [sp, #4]
 8004e6e:	f7fd fa4d 	bl	800230c <memset>
 8004e72:	68fd      	ldr	r5, [r7, #12]
 8004e74:	61f6      	str	r6, [r6, #28]
 8004e76:	2012      	movs	r0, #18
 8004e78:	2202      	movs	r2, #2
 8004e7a:	f8c6 b020 	str.w	fp, [r6, #32]
 8004e7e:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
 8004e82:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
 8004e86:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
 8004e8a:	4621      	mov	r1, r4
 8004e8c:	81a8      	strh	r0, [r5, #12]
 8004e8e:	81ea      	strh	r2, [r5, #14]
 8004e90:	602c      	str	r4, [r5, #0]
 8004e92:	606c      	str	r4, [r5, #4]
 8004e94:	60ac      	str	r4, [r5, #8]
 8004e96:	666c      	str	r4, [r5, #100]	; 0x64
 8004e98:	612c      	str	r4, [r5, #16]
 8004e9a:	616c      	str	r4, [r5, #20]
 8004e9c:	61ac      	str	r4, [r5, #24]
 8004e9e:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8004ea2:	2208      	movs	r2, #8
 8004ea4:	f7fd fa32 	bl	800230c <memset>
 8004ea8:	9b01      	ldr	r3, [sp, #4]
 8004eaa:	61ed      	str	r5, [r5, #28]
 8004eac:	f8c5 b020 	str.w	fp, [r5, #32]
 8004eb0:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 8004eb4:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8004eb8:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 8004ebc:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ebe:	b003      	add	sp, #12
 8004ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ec4:	08004d95 	.word	0x08004d95
 8004ec8:	08006ac1 	.word	0x08006ac1
 8004ecc:	08006ae9 	.word	0x08006ae9
 8004ed0:	08006b21 	.word	0x08006b21
 8004ed4:	08006b45 	.word	0x08006b45

08004ed8 <__sfp>:
 8004ed8:	4b21      	ldr	r3, [pc, #132]	; (8004f60 <__sfp+0x88>)
 8004eda:	b570      	push	{r4, r5, r6, lr}
 8004edc:	681d      	ldr	r5, [r3, #0]
 8004ede:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004ee0:	4606      	mov	r6, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d02c      	beq.n	8004f40 <__sfp+0x68>
 8004ee6:	f505 7538 	add.w	r5, r5, #736	; 0x2e0
 8004eea:	686b      	ldr	r3, [r5, #4]
 8004eec:	68ac      	ldr	r4, [r5, #8]
 8004eee:	3b01      	subs	r3, #1
 8004ef0:	d505      	bpl.n	8004efe <__sfp+0x26>
 8004ef2:	e021      	b.n	8004f38 <__sfp+0x60>
 8004ef4:	3b01      	subs	r3, #1
 8004ef6:	1c5a      	adds	r2, r3, #1
 8004ef8:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8004efc:	d01c      	beq.n	8004f38 <__sfp+0x60>
 8004efe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f02:	2a00      	cmp	r2, #0
 8004f04:	d1f6      	bne.n	8004ef4 <__sfp+0x1c>
 8004f06:	2500      	movs	r5, #0
 8004f08:	2301      	movs	r3, #1
 8004f0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f0e:	81e2      	strh	r2, [r4, #14]
 8004f10:	81a3      	strh	r3, [r4, #12]
 8004f12:	6665      	str	r5, [r4, #100]	; 0x64
 8004f14:	6025      	str	r5, [r4, #0]
 8004f16:	60a5      	str	r5, [r4, #8]
 8004f18:	6065      	str	r5, [r4, #4]
 8004f1a:	6125      	str	r5, [r4, #16]
 8004f1c:	6165      	str	r5, [r4, #20]
 8004f1e:	61a5      	str	r5, [r4, #24]
 8004f20:	4629      	mov	r1, r5
 8004f22:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004f26:	2208      	movs	r2, #8
 8004f28:	f7fd f9f0 	bl	800230c <memset>
 8004f2c:	6325      	str	r5, [r4, #48]	; 0x30
 8004f2e:	6365      	str	r5, [r4, #52]	; 0x34
 8004f30:	6465      	str	r5, [r4, #68]	; 0x44
 8004f32:	64a5      	str	r5, [r4, #72]	; 0x48
 8004f34:	4620      	mov	r0, r4
 8004f36:	bd70      	pop	{r4, r5, r6, pc}
 8004f38:	682b      	ldr	r3, [r5, #0]
 8004f3a:	b12b      	cbz	r3, 8004f48 <__sfp+0x70>
 8004f3c:	461d      	mov	r5, r3
 8004f3e:	e7d4      	b.n	8004eea <__sfp+0x12>
 8004f40:	4628      	mov	r0, r5
 8004f42:	f7ff ff4f 	bl	8004de4 <__sinit>
 8004f46:	e7ce      	b.n	8004ee6 <__sfp+0xe>
 8004f48:	4630      	mov	r0, r6
 8004f4a:	2104      	movs	r1, #4
 8004f4c:	f7ff ff28 	bl	8004da0 <__sfmoreglue>
 8004f50:	6028      	str	r0, [r5, #0]
 8004f52:	b108      	cbz	r0, 8004f58 <__sfp+0x80>
 8004f54:	4605      	mov	r5, r0
 8004f56:	e7c8      	b.n	8004eea <__sfp+0x12>
 8004f58:	230c      	movs	r3, #12
 8004f5a:	6033      	str	r3, [r6, #0]
 8004f5c:	bd70      	pop	{r4, r5, r6, pc}
 8004f5e:	bf00      	nop
 8004f60:	0800916c 	.word	0x0800916c

08004f64 <__sfp_lock_acquire>:
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop

08004f68 <__sfp_lock_release>:
 8004f68:	4770      	bx	lr
 8004f6a:	bf00      	nop

08004f6c <__sinit_lock_acquire>:
 8004f6c:	4770      	bx	lr
 8004f6e:	bf00      	nop

08004f70 <__sinit_lock_release>:
 8004f70:	4770      	bx	lr
 8004f72:	bf00      	nop

08004f74 <__fp_lock_all>:
 8004f74:	4b02      	ldr	r3, [pc, #8]	; (8004f80 <__fp_lock_all+0xc>)
 8004f76:	4903      	ldr	r1, [pc, #12]	; (8004f84 <__fp_lock_all+0x10>)
 8004f78:	6818      	ldr	r0, [r3, #0]
 8004f7a:	f000 bacd 	b.w	8005518 <_fwalk>
 8004f7e:	bf00      	nop
 8004f80:	20000498 	.word	0x20000498
 8004f84:	08004d8d 	.word	0x08004d8d

08004f88 <__fp_unlock_all>:
 8004f88:	4b02      	ldr	r3, [pc, #8]	; (8004f94 <__fp_unlock_all+0xc>)
 8004f8a:	4903      	ldr	r1, [pc, #12]	; (8004f98 <__fp_unlock_all+0x10>)
 8004f8c:	6818      	ldr	r0, [r3, #0]
 8004f8e:	f000 bac3 	b.w	8005518 <_fwalk>
 8004f92:	bf00      	nop
 8004f94:	20000498 	.word	0x20000498
 8004f98:	08004d91 	.word	0x08004d91

08004f9c <__libc_fini_array>:
 8004f9c:	b538      	push	{r3, r4, r5, lr}
 8004f9e:	4d09      	ldr	r5, [pc, #36]	; (8004fc4 <__libc_fini_array+0x28>)
 8004fa0:	4c09      	ldr	r4, [pc, #36]	; (8004fc8 <__libc_fini_array+0x2c>)
 8004fa2:	1b64      	subs	r4, r4, r5
 8004fa4:	10a4      	asrs	r4, r4, #2
 8004fa6:	bf18      	it	ne
 8004fa8:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
 8004fac:	d005      	beq.n	8004fba <__libc_fini_array+0x1e>
 8004fae:	3c01      	subs	r4, #1
 8004fb0:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8004fb4:	4798      	blx	r3
 8004fb6:	2c00      	cmp	r4, #0
 8004fb8:	d1f9      	bne.n	8004fae <__libc_fini_array+0x12>
 8004fba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004fbe:	f004 b9c5 	b.w	800934c <_fini>
 8004fc2:	bf00      	nop
 8004fc4:	08009358 	.word	0x08009358
 8004fc8:	0800935c 	.word	0x0800935c

08004fcc <_malloc_trim_r>:
 8004fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fce:	4d23      	ldr	r5, [pc, #140]	; (800505c <_malloc_trim_r+0x90>)
 8004fd0:	460f      	mov	r7, r1
 8004fd2:	4604      	mov	r4, r0
 8004fd4:	f000 fee2 	bl	8005d9c <__malloc_lock>
 8004fd8:	68ab      	ldr	r3, [r5, #8]
 8004fda:	685e      	ldr	r6, [r3, #4]
 8004fdc:	f026 0603 	bic.w	r6, r6, #3
 8004fe0:	1bf1      	subs	r1, r6, r7
 8004fe2:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
 8004fe6:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 8004fea:	f021 010f 	bic.w	r1, r1, #15
 8004fee:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
 8004ff2:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 8004ff6:	db07      	blt.n	8005008 <_malloc_trim_r+0x3c>
 8004ff8:	4620      	mov	r0, r4
 8004ffa:	2100      	movs	r1, #0
 8004ffc:	f001 fd4e 	bl	8006a9c <_sbrk_r>
 8005000:	68ab      	ldr	r3, [r5, #8]
 8005002:	4433      	add	r3, r6
 8005004:	4298      	cmp	r0, r3
 8005006:	d004      	beq.n	8005012 <_malloc_trim_r+0x46>
 8005008:	4620      	mov	r0, r4
 800500a:	f000 fec9 	bl	8005da0 <__malloc_unlock>
 800500e:	2000      	movs	r0, #0
 8005010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005012:	4620      	mov	r0, r4
 8005014:	4279      	negs	r1, r7
 8005016:	f001 fd41 	bl	8006a9c <_sbrk_r>
 800501a:	3001      	adds	r0, #1
 800501c:	d00d      	beq.n	800503a <_malloc_trim_r+0x6e>
 800501e:	4b10      	ldr	r3, [pc, #64]	; (8005060 <_malloc_trim_r+0x94>)
 8005020:	68aa      	ldr	r2, [r5, #8]
 8005022:	6819      	ldr	r1, [r3, #0]
 8005024:	1bf6      	subs	r6, r6, r7
 8005026:	f046 0601 	orr.w	r6, r6, #1
 800502a:	4620      	mov	r0, r4
 800502c:	1bc9      	subs	r1, r1, r7
 800502e:	6056      	str	r6, [r2, #4]
 8005030:	6019      	str	r1, [r3, #0]
 8005032:	f000 feb5 	bl	8005da0 <__malloc_unlock>
 8005036:	2001      	movs	r0, #1
 8005038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800503a:	4620      	mov	r0, r4
 800503c:	2100      	movs	r1, #0
 800503e:	f001 fd2d 	bl	8006a9c <_sbrk_r>
 8005042:	68ab      	ldr	r3, [r5, #8]
 8005044:	1ac2      	subs	r2, r0, r3
 8005046:	2a0f      	cmp	r2, #15
 8005048:	ddde      	ble.n	8005008 <_malloc_trim_r+0x3c>
 800504a:	4d06      	ldr	r5, [pc, #24]	; (8005064 <_malloc_trim_r+0x98>)
 800504c:	4904      	ldr	r1, [pc, #16]	; (8005060 <_malloc_trim_r+0x94>)
 800504e:	682d      	ldr	r5, [r5, #0]
 8005050:	f042 0201 	orr.w	r2, r2, #1
 8005054:	1b40      	subs	r0, r0, r5
 8005056:	605a      	str	r2, [r3, #4]
 8005058:	6008      	str	r0, [r1, #0]
 800505a:	e7d5      	b.n	8005008 <_malloc_trim_r+0x3c>
 800505c:	20000518 	.word	0x20000518
 8005060:	2000fba8 	.word	0x2000fba8
 8005064:	20000924 	.word	0x20000924

08005068 <_free_r>:
 8005068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800506c:	460d      	mov	r5, r1
 800506e:	4606      	mov	r6, r0
 8005070:	2900      	cmp	r1, #0
 8005072:	d055      	beq.n	8005120 <_free_r+0xb8>
 8005074:	f000 fe92 	bl	8005d9c <__malloc_lock>
 8005078:	f855 1c04 	ldr.w	r1, [r5, #-4]
 800507c:	f8df c174 	ldr.w	ip, [pc, #372]	; 80051f4 <_free_r+0x18c>
 8005080:	f021 0301 	bic.w	r3, r1, #1
 8005084:	f1a5 0408 	sub.w	r4, r5, #8
 8005088:	18e2      	adds	r2, r4, r3
 800508a:	f8dc 0008 	ldr.w	r0, [ip, #8]
 800508e:	6857      	ldr	r7, [r2, #4]
 8005090:	4290      	cmp	r0, r2
 8005092:	f027 0703 	bic.w	r7, r7, #3
 8005096:	d069      	beq.n	800516c <_free_r+0x104>
 8005098:	f011 0101 	ands.w	r1, r1, #1
 800509c:	6057      	str	r7, [r2, #4]
 800509e:	d032      	beq.n	8005106 <_free_r+0x9e>
 80050a0:	2100      	movs	r1, #0
 80050a2:	19d0      	adds	r0, r2, r7
 80050a4:	6840      	ldr	r0, [r0, #4]
 80050a6:	07c0      	lsls	r0, r0, #31
 80050a8:	d406      	bmi.n	80050b8 <_free_r+0x50>
 80050aa:	443b      	add	r3, r7
 80050ac:	6890      	ldr	r0, [r2, #8]
 80050ae:	2900      	cmp	r1, #0
 80050b0:	d04e      	beq.n	8005150 <_free_r+0xe8>
 80050b2:	68d2      	ldr	r2, [r2, #12]
 80050b4:	60c2      	str	r2, [r0, #12]
 80050b6:	6090      	str	r0, [r2, #8]
 80050b8:	f043 0201 	orr.w	r2, r3, #1
 80050bc:	6062      	str	r2, [r4, #4]
 80050be:	50e3      	str	r3, [r4, r3]
 80050c0:	b9e1      	cbnz	r1, 80050fc <_free_r+0x94>
 80050c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050c6:	d32d      	bcc.n	8005124 <_free_r+0xbc>
 80050c8:	0a5a      	lsrs	r2, r3, #9
 80050ca:	2a04      	cmp	r2, #4
 80050cc:	d86a      	bhi.n	80051a4 <_free_r+0x13c>
 80050ce:	0998      	lsrs	r0, r3, #6
 80050d0:	3038      	adds	r0, #56	; 0x38
 80050d2:	0041      	lsls	r1, r0, #1
 80050d4:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
 80050d8:	4946      	ldr	r1, [pc, #280]	; (80051f4 <_free_r+0x18c>)
 80050da:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80050de:	4562      	cmp	r2, ip
 80050e0:	d066      	beq.n	80051b0 <_free_r+0x148>
 80050e2:	6851      	ldr	r1, [r2, #4]
 80050e4:	f021 0103 	bic.w	r1, r1, #3
 80050e8:	428b      	cmp	r3, r1
 80050ea:	d202      	bcs.n	80050f2 <_free_r+0x8a>
 80050ec:	6892      	ldr	r2, [r2, #8]
 80050ee:	4594      	cmp	ip, r2
 80050f0:	d1f7      	bne.n	80050e2 <_free_r+0x7a>
 80050f2:	68d3      	ldr	r3, [r2, #12]
 80050f4:	60e3      	str	r3, [r4, #12]
 80050f6:	60a2      	str	r2, [r4, #8]
 80050f8:	609c      	str	r4, [r3, #8]
 80050fa:	60d4      	str	r4, [r2, #12]
 80050fc:	4630      	mov	r0, r6
 80050fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005102:	f000 be4d 	b.w	8005da0 <__malloc_unlock>
 8005106:	f855 5c08 	ldr.w	r5, [r5, #-8]
 800510a:	1b64      	subs	r4, r4, r5
 800510c:	f10c 0808 	add.w	r8, ip, #8
 8005110:	68a0      	ldr	r0, [r4, #8]
 8005112:	4540      	cmp	r0, r8
 8005114:	442b      	add	r3, r5
 8005116:	d043      	beq.n	80051a0 <_free_r+0x138>
 8005118:	68e5      	ldr	r5, [r4, #12]
 800511a:	60c5      	str	r5, [r0, #12]
 800511c:	60a8      	str	r0, [r5, #8]
 800511e:	e7c0      	b.n	80050a2 <_free_r+0x3a>
 8005120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005124:	08db      	lsrs	r3, r3, #3
 8005126:	eb0c 02c3 	add.w	r2, ip, r3, lsl #3
 800512a:	2501      	movs	r5, #1
 800512c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8005130:	6891      	ldr	r1, [r2, #8]
 8005132:	60a1      	str	r1, [r4, #8]
 8005134:	109b      	asrs	r3, r3, #2
 8005136:	fa05 f303 	lsl.w	r3, r5, r3
 800513a:	4318      	orrs	r0, r3
 800513c:	60e2      	str	r2, [r4, #12]
 800513e:	f8cc 0004 	str.w	r0, [ip, #4]
 8005142:	6094      	str	r4, [r2, #8]
 8005144:	4630      	mov	r0, r6
 8005146:	60cc      	str	r4, [r1, #12]
 8005148:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800514c:	f000 be28 	b.w	8005da0 <__malloc_unlock>
 8005150:	4d29      	ldr	r5, [pc, #164]	; (80051f8 <_free_r+0x190>)
 8005152:	42a8      	cmp	r0, r5
 8005154:	d1ad      	bne.n	80050b2 <_free_r+0x4a>
 8005156:	f043 0201 	orr.w	r2, r3, #1
 800515a:	f8cc 4014 	str.w	r4, [ip, #20]
 800515e:	f8cc 4010 	str.w	r4, [ip, #16]
 8005162:	60e0      	str	r0, [r4, #12]
 8005164:	60a0      	str	r0, [r4, #8]
 8005166:	6062      	str	r2, [r4, #4]
 8005168:	50e3      	str	r3, [r4, r3]
 800516a:	e7c7      	b.n	80050fc <_free_r+0x94>
 800516c:	441f      	add	r7, r3
 800516e:	07cb      	lsls	r3, r1, #31
 8005170:	d407      	bmi.n	8005182 <_free_r+0x11a>
 8005172:	f855 3c08 	ldr.w	r3, [r5, #-8]
 8005176:	1ae4      	subs	r4, r4, r3
 8005178:	441f      	add	r7, r3
 800517a:	68a2      	ldr	r2, [r4, #8]
 800517c:	68e3      	ldr	r3, [r4, #12]
 800517e:	60d3      	str	r3, [r2, #12]
 8005180:	609a      	str	r2, [r3, #8]
 8005182:	4b1e      	ldr	r3, [pc, #120]	; (80051fc <_free_r+0x194>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f047 0201 	orr.w	r2, r7, #1
 800518a:	429f      	cmp	r7, r3
 800518c:	6062      	str	r2, [r4, #4]
 800518e:	f8cc 4008 	str.w	r4, [ip, #8]
 8005192:	d3b3      	bcc.n	80050fc <_free_r+0x94>
 8005194:	4b1a      	ldr	r3, [pc, #104]	; (8005200 <_free_r+0x198>)
 8005196:	4630      	mov	r0, r6
 8005198:	6819      	ldr	r1, [r3, #0]
 800519a:	f7ff ff17 	bl	8004fcc <_malloc_trim_r>
 800519e:	e7ad      	b.n	80050fc <_free_r+0x94>
 80051a0:	2101      	movs	r1, #1
 80051a2:	e77e      	b.n	80050a2 <_free_r+0x3a>
 80051a4:	2a14      	cmp	r2, #20
 80051a6:	d80c      	bhi.n	80051c2 <_free_r+0x15a>
 80051a8:	f102 005b 	add.w	r0, r2, #91	; 0x5b
 80051ac:	0041      	lsls	r1, r0, #1
 80051ae:	e791      	b.n	80050d4 <_free_r+0x6c>
 80051b0:	684b      	ldr	r3, [r1, #4]
 80051b2:	1080      	asrs	r0, r0, #2
 80051b4:	2501      	movs	r5, #1
 80051b6:	fa05 f000 	lsl.w	r0, r5, r0
 80051ba:	4303      	orrs	r3, r0
 80051bc:	604b      	str	r3, [r1, #4]
 80051be:	4613      	mov	r3, r2
 80051c0:	e798      	b.n	80050f4 <_free_r+0x8c>
 80051c2:	2a54      	cmp	r2, #84	; 0x54
 80051c4:	d803      	bhi.n	80051ce <_free_r+0x166>
 80051c6:	0b18      	lsrs	r0, r3, #12
 80051c8:	306e      	adds	r0, #110	; 0x6e
 80051ca:	0041      	lsls	r1, r0, #1
 80051cc:	e782      	b.n	80050d4 <_free_r+0x6c>
 80051ce:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80051d2:	d803      	bhi.n	80051dc <_free_r+0x174>
 80051d4:	0bd8      	lsrs	r0, r3, #15
 80051d6:	3077      	adds	r0, #119	; 0x77
 80051d8:	0041      	lsls	r1, r0, #1
 80051da:	e77b      	b.n	80050d4 <_free_r+0x6c>
 80051dc:	f240 5154 	movw	r1, #1364	; 0x554
 80051e0:	428a      	cmp	r2, r1
 80051e2:	d803      	bhi.n	80051ec <_free_r+0x184>
 80051e4:	0c98      	lsrs	r0, r3, #18
 80051e6:	307c      	adds	r0, #124	; 0x7c
 80051e8:	0041      	lsls	r1, r0, #1
 80051ea:	e773      	b.n	80050d4 <_free_r+0x6c>
 80051ec:	21fc      	movs	r1, #252	; 0xfc
 80051ee:	207e      	movs	r0, #126	; 0x7e
 80051f0:	e770      	b.n	80050d4 <_free_r+0x6c>
 80051f2:	bf00      	nop
 80051f4:	20000518 	.word	0x20000518
 80051f8:	20000520 	.word	0x20000520
 80051fc:	20000920 	.word	0x20000920
 8005200:	2000fba4 	.word	0x2000fba4

08005204 <__sfvwrite_r>:
 8005204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005208:	6893      	ldr	r3, [r2, #8]
 800520a:	b083      	sub	sp, #12
 800520c:	4616      	mov	r6, r2
 800520e:	4681      	mov	r9, r0
 8005210:	460c      	mov	r4, r1
 8005212:	b32b      	cbz	r3, 8005260 <__sfvwrite_r+0x5c>
 8005214:	898b      	ldrh	r3, [r1, #12]
 8005216:	0719      	lsls	r1, r3, #28
 8005218:	d526      	bpl.n	8005268 <__sfvwrite_r+0x64>
 800521a:	6922      	ldr	r2, [r4, #16]
 800521c:	b322      	cbz	r2, 8005268 <__sfvwrite_r+0x64>
 800521e:	f003 0202 	and.w	r2, r3, #2
 8005222:	b292      	uxth	r2, r2
 8005224:	6835      	ldr	r5, [r6, #0]
 8005226:	2a00      	cmp	r2, #0
 8005228:	d02c      	beq.n	8005284 <__sfvwrite_r+0x80>
 800522a:	f04f 0a00 	mov.w	sl, #0
 800522e:	f8df b2e4 	ldr.w	fp, [pc, #740]	; 8005514 <__sfvwrite_r+0x310>
 8005232:	46d0      	mov	r8, sl
 8005234:	45d8      	cmp	r8, fp
 8005236:	bf34      	ite	cc
 8005238:	4643      	movcc	r3, r8
 800523a:	465b      	movcs	r3, fp
 800523c:	4652      	mov	r2, sl
 800523e:	4648      	mov	r0, r9
 8005240:	f1b8 0f00 	cmp.w	r8, #0
 8005244:	d04f      	beq.n	80052e6 <__sfvwrite_r+0xe2>
 8005246:	69e1      	ldr	r1, [r4, #28]
 8005248:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800524a:	47b8      	blx	r7
 800524c:	2800      	cmp	r0, #0
 800524e:	dd56      	ble.n	80052fe <__sfvwrite_r+0xfa>
 8005250:	68b3      	ldr	r3, [r6, #8]
 8005252:	1a1b      	subs	r3, r3, r0
 8005254:	4482      	add	sl, r0
 8005256:	ebc0 0808 	rsb	r8, r0, r8
 800525a:	60b3      	str	r3, [r6, #8]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d1e9      	bne.n	8005234 <__sfvwrite_r+0x30>
 8005260:	2000      	movs	r0, #0
 8005262:	b003      	add	sp, #12
 8005264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005268:	4648      	mov	r0, r9
 800526a:	4621      	mov	r1, r4
 800526c:	f7fe fc0c 	bl	8003a88 <__swsetup_r>
 8005270:	2800      	cmp	r0, #0
 8005272:	f040 8146 	bne.w	8005502 <__sfvwrite_r+0x2fe>
 8005276:	89a3      	ldrh	r3, [r4, #12]
 8005278:	6835      	ldr	r5, [r6, #0]
 800527a:	f003 0202 	and.w	r2, r3, #2
 800527e:	b292      	uxth	r2, r2
 8005280:	2a00      	cmp	r2, #0
 8005282:	d1d2      	bne.n	800522a <__sfvwrite_r+0x26>
 8005284:	f013 0a01 	ands.w	sl, r3, #1
 8005288:	d142      	bne.n	8005310 <__sfvwrite_r+0x10c>
 800528a:	46d0      	mov	r8, sl
 800528c:	f1b8 0f00 	cmp.w	r8, #0
 8005290:	d023      	beq.n	80052da <__sfvwrite_r+0xd6>
 8005292:	059a      	lsls	r2, r3, #22
 8005294:	68a7      	ldr	r7, [r4, #8]
 8005296:	d576      	bpl.n	8005386 <__sfvwrite_r+0x182>
 8005298:	45b8      	cmp	r8, r7
 800529a:	f0c0 80a4 	bcc.w	80053e6 <__sfvwrite_r+0x1e2>
 800529e:	f413 6f90 	tst.w	r3, #1152	; 0x480
 80052a2:	f040 80b2 	bne.w	800540a <__sfvwrite_r+0x206>
 80052a6:	6820      	ldr	r0, [r4, #0]
 80052a8:	46bb      	mov	fp, r7
 80052aa:	4651      	mov	r1, sl
 80052ac:	465a      	mov	r2, fp
 80052ae:	f000 fd15 	bl	8005cdc <memmove>
 80052b2:	68a2      	ldr	r2, [r4, #8]
 80052b4:	6821      	ldr	r1, [r4, #0]
 80052b6:	1bd2      	subs	r2, r2, r7
 80052b8:	eb01 030b 	add.w	r3, r1, fp
 80052bc:	60a2      	str	r2, [r4, #8]
 80052be:	6023      	str	r3, [r4, #0]
 80052c0:	4642      	mov	r2, r8
 80052c2:	68b3      	ldr	r3, [r6, #8]
 80052c4:	1a9b      	subs	r3, r3, r2
 80052c6:	4492      	add	sl, r2
 80052c8:	ebc2 0808 	rsb	r8, r2, r8
 80052cc:	60b3      	str	r3, [r6, #8]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d0c6      	beq.n	8005260 <__sfvwrite_r+0x5c>
 80052d2:	89a3      	ldrh	r3, [r4, #12]
 80052d4:	f1b8 0f00 	cmp.w	r8, #0
 80052d8:	d1db      	bne.n	8005292 <__sfvwrite_r+0x8e>
 80052da:	f8d5 a000 	ldr.w	sl, [r5]
 80052de:	f8d5 8004 	ldr.w	r8, [r5, #4]
 80052e2:	3508      	adds	r5, #8
 80052e4:	e7d2      	b.n	800528c <__sfvwrite_r+0x88>
 80052e6:	f8d5 a000 	ldr.w	sl, [r5]
 80052ea:	f8d5 8004 	ldr.w	r8, [r5, #4]
 80052ee:	3508      	adds	r5, #8
 80052f0:	e7a0      	b.n	8005234 <__sfvwrite_r+0x30>
 80052f2:	4648      	mov	r0, r9
 80052f4:	4621      	mov	r1, r4
 80052f6:	f7ff fd21 	bl	8004d3c <_fflush_r>
 80052fa:	2800      	cmp	r0, #0
 80052fc:	d059      	beq.n	80053b2 <__sfvwrite_r+0x1ae>
 80052fe:	89a3      	ldrh	r3, [r4, #12]
 8005300:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005304:	f04f 30ff 	mov.w	r0, #4294967295
 8005308:	81a3      	strh	r3, [r4, #12]
 800530a:	b003      	add	sp, #12
 800530c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005310:	4692      	mov	sl, r2
 8005312:	9201      	str	r2, [sp, #4]
 8005314:	4693      	mov	fp, r2
 8005316:	4690      	mov	r8, r2
 8005318:	f1b8 0f00 	cmp.w	r8, #0
 800531c:	d02b      	beq.n	8005376 <__sfvwrite_r+0x172>
 800531e:	9f01      	ldr	r7, [sp, #4]
 8005320:	2f00      	cmp	r7, #0
 8005322:	d064      	beq.n	80053ee <__sfvwrite_r+0x1ea>
 8005324:	6820      	ldr	r0, [r4, #0]
 8005326:	6921      	ldr	r1, [r4, #16]
 8005328:	f8d4 c008 	ldr.w	ip, [r4, #8]
 800532c:	6962      	ldr	r2, [r4, #20]
 800532e:	45c2      	cmp	sl, r8
 8005330:	bf34      	ite	cc
 8005332:	4653      	movcc	r3, sl
 8005334:	4643      	movcs	r3, r8
 8005336:	4288      	cmp	r0, r1
 8005338:	461f      	mov	r7, r3
 800533a:	d903      	bls.n	8005344 <__sfvwrite_r+0x140>
 800533c:	4494      	add	ip, r2
 800533e:	4563      	cmp	r3, ip
 8005340:	f300 80ae 	bgt.w	80054a0 <__sfvwrite_r+0x29c>
 8005344:	4293      	cmp	r3, r2
 8005346:	db36      	blt.n	80053b6 <__sfvwrite_r+0x1b2>
 8005348:	4613      	mov	r3, r2
 800534a:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800534c:	69e1      	ldr	r1, [r4, #28]
 800534e:	4648      	mov	r0, r9
 8005350:	465a      	mov	r2, fp
 8005352:	47b8      	blx	r7
 8005354:	1e07      	subs	r7, r0, #0
 8005356:	ddd2      	ble.n	80052fe <__sfvwrite_r+0xfa>
 8005358:	ebba 0a07 	subs.w	sl, sl, r7
 800535c:	d03a      	beq.n	80053d4 <__sfvwrite_r+0x1d0>
 800535e:	68b3      	ldr	r3, [r6, #8]
 8005360:	1bdb      	subs	r3, r3, r7
 8005362:	44bb      	add	fp, r7
 8005364:	ebc7 0808 	rsb	r8, r7, r8
 8005368:	60b3      	str	r3, [r6, #8]
 800536a:	2b00      	cmp	r3, #0
 800536c:	f43f af78 	beq.w	8005260 <__sfvwrite_r+0x5c>
 8005370:	f1b8 0f00 	cmp.w	r8, #0
 8005374:	d1d3      	bne.n	800531e <__sfvwrite_r+0x11a>
 8005376:	2700      	movs	r7, #0
 8005378:	f8d5 b000 	ldr.w	fp, [r5]
 800537c:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8005380:	9701      	str	r7, [sp, #4]
 8005382:	3508      	adds	r5, #8
 8005384:	e7c8      	b.n	8005318 <__sfvwrite_r+0x114>
 8005386:	6820      	ldr	r0, [r4, #0]
 8005388:	6923      	ldr	r3, [r4, #16]
 800538a:	4298      	cmp	r0, r3
 800538c:	d802      	bhi.n	8005394 <__sfvwrite_r+0x190>
 800538e:	6963      	ldr	r3, [r4, #20]
 8005390:	4598      	cmp	r8, r3
 8005392:	d272      	bcs.n	800547a <__sfvwrite_r+0x276>
 8005394:	45b8      	cmp	r8, r7
 8005396:	bf38      	it	cc
 8005398:	4647      	movcc	r7, r8
 800539a:	463a      	mov	r2, r7
 800539c:	4651      	mov	r1, sl
 800539e:	f000 fc9d 	bl	8005cdc <memmove>
 80053a2:	68a3      	ldr	r3, [r4, #8]
 80053a4:	6822      	ldr	r2, [r4, #0]
 80053a6:	1bdb      	subs	r3, r3, r7
 80053a8:	443a      	add	r2, r7
 80053aa:	60a3      	str	r3, [r4, #8]
 80053ac:	6022      	str	r2, [r4, #0]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d09f      	beq.n	80052f2 <__sfvwrite_r+0xee>
 80053b2:	463a      	mov	r2, r7
 80053b4:	e785      	b.n	80052c2 <__sfvwrite_r+0xbe>
 80053b6:	461a      	mov	r2, r3
 80053b8:	4659      	mov	r1, fp
 80053ba:	9300      	str	r3, [sp, #0]
 80053bc:	f000 fc8e 	bl	8005cdc <memmove>
 80053c0:	9b00      	ldr	r3, [sp, #0]
 80053c2:	68a1      	ldr	r1, [r4, #8]
 80053c4:	6822      	ldr	r2, [r4, #0]
 80053c6:	1ac9      	subs	r1, r1, r3
 80053c8:	ebba 0a07 	subs.w	sl, sl, r7
 80053cc:	4413      	add	r3, r2
 80053ce:	60a1      	str	r1, [r4, #8]
 80053d0:	6023      	str	r3, [r4, #0]
 80053d2:	d1c4      	bne.n	800535e <__sfvwrite_r+0x15a>
 80053d4:	4648      	mov	r0, r9
 80053d6:	4621      	mov	r1, r4
 80053d8:	f7ff fcb0 	bl	8004d3c <_fflush_r>
 80053dc:	2800      	cmp	r0, #0
 80053de:	d18e      	bne.n	80052fe <__sfvwrite_r+0xfa>
 80053e0:	f8cd a004 	str.w	sl, [sp, #4]
 80053e4:	e7bb      	b.n	800535e <__sfvwrite_r+0x15a>
 80053e6:	6820      	ldr	r0, [r4, #0]
 80053e8:	4647      	mov	r7, r8
 80053ea:	46c3      	mov	fp, r8
 80053ec:	e75d      	b.n	80052aa <__sfvwrite_r+0xa6>
 80053ee:	4658      	mov	r0, fp
 80053f0:	210a      	movs	r1, #10
 80053f2:	4642      	mov	r2, r8
 80053f4:	f000 fc2a 	bl	8005c4c <memchr>
 80053f8:	2800      	cmp	r0, #0
 80053fa:	d07d      	beq.n	80054f8 <__sfvwrite_r+0x2f4>
 80053fc:	f100 0a01 	add.w	sl, r0, #1
 8005400:	2701      	movs	r7, #1
 8005402:	ebcb 0a0a 	rsb	sl, fp, sl
 8005406:	9701      	str	r7, [sp, #4]
 8005408:	e78c      	b.n	8005324 <__sfvwrite_r+0x120>
 800540a:	6822      	ldr	r2, [r4, #0]
 800540c:	6921      	ldr	r1, [r4, #16]
 800540e:	6967      	ldr	r7, [r4, #20]
 8005410:	ebc1 0c02 	rsb	ip, r1, r2
 8005414:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8005418:	f10c 0201 	add.w	r2, ip, #1
 800541c:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 8005420:	4442      	add	r2, r8
 8005422:	107f      	asrs	r7, r7, #1
 8005424:	4297      	cmp	r7, r2
 8005426:	bf34      	ite	cc
 8005428:	4617      	movcc	r7, r2
 800542a:	463a      	movcs	r2, r7
 800542c:	055b      	lsls	r3, r3, #21
 800542e:	d54d      	bpl.n	80054cc <__sfvwrite_r+0x2c8>
 8005430:	4611      	mov	r1, r2
 8005432:	4648      	mov	r0, r9
 8005434:	f8cd c000 	str.w	ip, [sp]
 8005438:	f000 f96c 	bl	8005714 <_malloc_r>
 800543c:	f8dd c000 	ldr.w	ip, [sp]
 8005440:	4683      	mov	fp, r0
 8005442:	2800      	cmp	r0, #0
 8005444:	d060      	beq.n	8005508 <__sfvwrite_r+0x304>
 8005446:	4662      	mov	r2, ip
 8005448:	6921      	ldr	r1, [r4, #16]
 800544a:	f8cd c000 	str.w	ip, [sp]
 800544e:	f7fc fec3 	bl	80021d8 <memcpy>
 8005452:	89a2      	ldrh	r2, [r4, #12]
 8005454:	f8dd c000 	ldr.w	ip, [sp]
 8005458:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800545c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005460:	81a2      	strh	r2, [r4, #12]
 8005462:	eb0b 000c 	add.w	r0, fp, ip
 8005466:	ebcc 0207 	rsb	r2, ip, r7
 800546a:	f8c4 b010 	str.w	fp, [r4, #16]
 800546e:	6167      	str	r7, [r4, #20]
 8005470:	6020      	str	r0, [r4, #0]
 8005472:	60a2      	str	r2, [r4, #8]
 8005474:	4647      	mov	r7, r8
 8005476:	46c3      	mov	fp, r8
 8005478:	e717      	b.n	80052aa <__sfvwrite_r+0xa6>
 800547a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800547e:	4590      	cmp	r8, r2
 8005480:	bf38      	it	cc
 8005482:	4642      	movcc	r2, r8
 8005484:	fb92 f2f3 	sdiv	r2, r2, r3
 8005488:	fb02 f303 	mul.w	r3, r2, r3
 800548c:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800548e:	69e1      	ldr	r1, [r4, #28]
 8005490:	4648      	mov	r0, r9
 8005492:	4652      	mov	r2, sl
 8005494:	47b8      	blx	r7
 8005496:	2800      	cmp	r0, #0
 8005498:	f77f af31 	ble.w	80052fe <__sfvwrite_r+0xfa>
 800549c:	4602      	mov	r2, r0
 800549e:	e710      	b.n	80052c2 <__sfvwrite_r+0xbe>
 80054a0:	4662      	mov	r2, ip
 80054a2:	4659      	mov	r1, fp
 80054a4:	f8cd c000 	str.w	ip, [sp]
 80054a8:	f000 fc18 	bl	8005cdc <memmove>
 80054ac:	f8dd c000 	ldr.w	ip, [sp]
 80054b0:	6823      	ldr	r3, [r4, #0]
 80054b2:	4463      	add	r3, ip
 80054b4:	6023      	str	r3, [r4, #0]
 80054b6:	4648      	mov	r0, r9
 80054b8:	4621      	mov	r1, r4
 80054ba:	f7ff fc3f 	bl	8004d3c <_fflush_r>
 80054be:	f8dd c000 	ldr.w	ip, [sp]
 80054c2:	2800      	cmp	r0, #0
 80054c4:	f47f af1b 	bne.w	80052fe <__sfvwrite_r+0xfa>
 80054c8:	4667      	mov	r7, ip
 80054ca:	e745      	b.n	8005358 <__sfvwrite_r+0x154>
 80054cc:	4648      	mov	r0, r9
 80054ce:	f8cd c000 	str.w	ip, [sp]
 80054d2:	f001 f8d3 	bl	800667c <_realloc_r>
 80054d6:	f8dd c000 	ldr.w	ip, [sp]
 80054da:	4683      	mov	fp, r0
 80054dc:	2800      	cmp	r0, #0
 80054de:	d1c0      	bne.n	8005462 <__sfvwrite_r+0x25e>
 80054e0:	4648      	mov	r0, r9
 80054e2:	6921      	ldr	r1, [r4, #16]
 80054e4:	f7ff fdc0 	bl	8005068 <_free_r>
 80054e8:	89a3      	ldrh	r3, [r4, #12]
 80054ea:	220c      	movs	r2, #12
 80054ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	f8c9 2000 	str.w	r2, [r9]
 80054f6:	e703      	b.n	8005300 <__sfvwrite_r+0xfc>
 80054f8:	2701      	movs	r7, #1
 80054fa:	f108 0a01 	add.w	sl, r8, #1
 80054fe:	9701      	str	r7, [sp, #4]
 8005500:	e710      	b.n	8005324 <__sfvwrite_r+0x120>
 8005502:	f04f 30ff 	mov.w	r0, #4294967295
 8005506:	e6ac      	b.n	8005262 <__sfvwrite_r+0x5e>
 8005508:	230c      	movs	r3, #12
 800550a:	f8c9 3000 	str.w	r3, [r9]
 800550e:	89a3      	ldrh	r3, [r4, #12]
 8005510:	e6f6      	b.n	8005300 <__sfvwrite_r+0xfc>
 8005512:	bf00      	nop
 8005514:	7ffffc00 	.word	0x7ffffc00

08005518 <_fwalk>:
 8005518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800551c:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 8005520:	4688      	mov	r8, r1
 8005522:	d01a      	beq.n	800555a <_fwalk+0x42>
 8005524:	2600      	movs	r6, #0
 8005526:	687d      	ldr	r5, [r7, #4]
 8005528:	68bc      	ldr	r4, [r7, #8]
 800552a:	3d01      	subs	r5, #1
 800552c:	d40f      	bmi.n	800554e <_fwalk+0x36>
 800552e:	89a3      	ldrh	r3, [r4, #12]
 8005530:	2b01      	cmp	r3, #1
 8005532:	f105 35ff 	add.w	r5, r5, #4294967295
 8005536:	d906      	bls.n	8005546 <_fwalk+0x2e>
 8005538:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800553c:	3301      	adds	r3, #1
 800553e:	4620      	mov	r0, r4
 8005540:	d001      	beq.n	8005546 <_fwalk+0x2e>
 8005542:	47c0      	blx	r8
 8005544:	4306      	orrs	r6, r0
 8005546:	1c6b      	adds	r3, r5, #1
 8005548:	f104 0468 	add.w	r4, r4, #104	; 0x68
 800554c:	d1ef      	bne.n	800552e <_fwalk+0x16>
 800554e:	683f      	ldr	r7, [r7, #0]
 8005550:	2f00      	cmp	r7, #0
 8005552:	d1e8      	bne.n	8005526 <_fwalk+0xe>
 8005554:	4630      	mov	r0, r6
 8005556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800555a:	463e      	mov	r6, r7
 800555c:	4630      	mov	r0, r6
 800555e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005562:	bf00      	nop

08005564 <_fwalk_reent>:
 8005564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005568:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
 800556c:	4680      	mov	r8, r0
 800556e:	4689      	mov	r9, r1
 8005570:	d01b      	beq.n	80055aa <_fwalk_reent+0x46>
 8005572:	2700      	movs	r7, #0
 8005574:	6875      	ldr	r5, [r6, #4]
 8005576:	68b4      	ldr	r4, [r6, #8]
 8005578:	3d01      	subs	r5, #1
 800557a:	d410      	bmi.n	800559e <_fwalk_reent+0x3a>
 800557c:	89a3      	ldrh	r3, [r4, #12]
 800557e:	2b01      	cmp	r3, #1
 8005580:	f105 35ff 	add.w	r5, r5, #4294967295
 8005584:	d907      	bls.n	8005596 <_fwalk_reent+0x32>
 8005586:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800558a:	3301      	adds	r3, #1
 800558c:	4621      	mov	r1, r4
 800558e:	4640      	mov	r0, r8
 8005590:	d001      	beq.n	8005596 <_fwalk_reent+0x32>
 8005592:	47c8      	blx	r9
 8005594:	4307      	orrs	r7, r0
 8005596:	1c6b      	adds	r3, r5, #1
 8005598:	f104 0468 	add.w	r4, r4, #104	; 0x68
 800559c:	d1ee      	bne.n	800557c <_fwalk_reent+0x18>
 800559e:	6836      	ldr	r6, [r6, #0]
 80055a0:	2e00      	cmp	r6, #0
 80055a2:	d1e7      	bne.n	8005574 <_fwalk_reent+0x10>
 80055a4:	4638      	mov	r0, r7
 80055a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055aa:	4637      	mov	r7, r6
 80055ac:	4638      	mov	r0, r7
 80055ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055b2:	bf00      	nop

080055b4 <_setlocale_r>:
 80055b4:	b510      	push	{r4, lr}
 80055b6:	4614      	mov	r4, r2
 80055b8:	b122      	cbz	r2, 80055c4 <_setlocale_r+0x10>
 80055ba:	4610      	mov	r0, r2
 80055bc:	490a      	ldr	r1, [pc, #40]	; (80055e8 <_setlocale_r+0x34>)
 80055be:	f001 fac5 	bl	8006b4c <strcmp>
 80055c2:	b908      	cbnz	r0, 80055c8 <_setlocale_r+0x14>
 80055c4:	4809      	ldr	r0, [pc, #36]	; (80055ec <_setlocale_r+0x38>)
 80055c6:	bd10      	pop	{r4, pc}
 80055c8:	4620      	mov	r0, r4
 80055ca:	4908      	ldr	r1, [pc, #32]	; (80055ec <_setlocale_r+0x38>)
 80055cc:	f001 fabe 	bl	8006b4c <strcmp>
 80055d0:	2800      	cmp	r0, #0
 80055d2:	d0f7      	beq.n	80055c4 <_setlocale_r+0x10>
 80055d4:	4620      	mov	r0, r4
 80055d6:	4906      	ldr	r1, [pc, #24]	; (80055f0 <_setlocale_r+0x3c>)
 80055d8:	f001 fab8 	bl	8006b4c <strcmp>
 80055dc:	4b03      	ldr	r3, [pc, #12]	; (80055ec <_setlocale_r+0x38>)
 80055de:	2800      	cmp	r0, #0
 80055e0:	bf0c      	ite	eq
 80055e2:	4618      	moveq	r0, r3
 80055e4:	2000      	movne	r0, #0
 80055e6:	bd10      	pop	{r4, pc}
 80055e8:	080091e4 	.word	0x080091e4
 80055ec:	08009168 	.word	0x08009168
 80055f0:	08009050 	.word	0x08009050

080055f4 <__locale_charset>:
 80055f4:	4800      	ldr	r0, [pc, #0]	; (80055f8 <__locale_charset+0x4>)
 80055f6:	4770      	bx	lr
 80055f8:	200004f4 	.word	0x200004f4

080055fc <__locale_mb_cur_max>:
 80055fc:	4b01      	ldr	r3, [pc, #4]	; (8005604 <__locale_mb_cur_max+0x8>)
 80055fe:	6818      	ldr	r0, [r3, #0]
 8005600:	4770      	bx	lr
 8005602:	bf00      	nop
 8005604:	20000514 	.word	0x20000514

08005608 <__locale_msgcharset>:
 8005608:	4800      	ldr	r0, [pc, #0]	; (800560c <__locale_msgcharset+0x4>)
 800560a:	4770      	bx	lr
 800560c:	2000049c 	.word	0x2000049c

08005610 <__locale_cjk_lang>:
 8005610:	2000      	movs	r0, #0
 8005612:	4770      	bx	lr

08005614 <_localeconv_r>:
 8005614:	4800      	ldr	r0, [pc, #0]	; (8005618 <_localeconv_r+0x4>)
 8005616:	4770      	bx	lr
 8005618:	200004bc 	.word	0x200004bc

0800561c <setlocale>:
 800561c:	4b02      	ldr	r3, [pc, #8]	; (8005628 <setlocale+0xc>)
 800561e:	460a      	mov	r2, r1
 8005620:	4601      	mov	r1, r0
 8005622:	6818      	ldr	r0, [r3, #0]
 8005624:	f7ff bfc6 	b.w	80055b4 <_setlocale_r>
 8005628:	20000498 	.word	0x20000498

0800562c <localeconv>:
 800562c:	4800      	ldr	r0, [pc, #0]	; (8005630 <localeconv+0x4>)
 800562e:	4770      	bx	lr
 8005630:	200004bc 	.word	0x200004bc

08005634 <__smakebuf_r>:
 8005634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005636:	898b      	ldrh	r3, [r1, #12]
 8005638:	b29a      	uxth	r2, r3
 800563a:	0796      	lsls	r6, r2, #30
 800563c:	b091      	sub	sp, #68	; 0x44
 800563e:	460c      	mov	r4, r1
 8005640:	4605      	mov	r5, r0
 8005642:	d437      	bmi.n	80056b4 <__smakebuf_r+0x80>
 8005644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005648:	2900      	cmp	r1, #0
 800564a:	db17      	blt.n	800567c <__smakebuf_r+0x48>
 800564c:	aa01      	add	r2, sp, #4
 800564e:	f002 fba9 	bl	8007da4 <_fstat_r>
 8005652:	2800      	cmp	r0, #0
 8005654:	db10      	blt.n	8005678 <__smakebuf_r+0x44>
 8005656:	9b02      	ldr	r3, [sp, #8]
 8005658:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800565c:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
 8005660:	424f      	negs	r7, r1
 8005662:	414f      	adcs	r7, r1
 8005664:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005668:	d02c      	beq.n	80056c4 <__smakebuf_r+0x90>
 800566a:	89a3      	ldrh	r3, [r4, #12]
 800566c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005670:	81a3      	strh	r3, [r4, #12]
 8005672:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8005676:	e00b      	b.n	8005690 <__smakebuf_r+0x5c>
 8005678:	89a3      	ldrh	r3, [r4, #12]
 800567a:	b29a      	uxth	r2, r3
 800567c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005680:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005684:	81a3      	strh	r3, [r4, #12]
 8005686:	bf14      	ite	ne
 8005688:	2640      	movne	r6, #64	; 0x40
 800568a:	f44f 6680 	moveq.w	r6, #1024	; 0x400
 800568e:	2700      	movs	r7, #0
 8005690:	4628      	mov	r0, r5
 8005692:	4631      	mov	r1, r6
 8005694:	f000 f83e 	bl	8005714 <_malloc_r>
 8005698:	89a3      	ldrh	r3, [r4, #12]
 800569a:	2800      	cmp	r0, #0
 800569c:	d029      	beq.n	80056f2 <__smakebuf_r+0xbe>
 800569e:	4a1b      	ldr	r2, [pc, #108]	; (800570c <__smakebuf_r+0xd8>)
 80056a0:	63ea      	str	r2, [r5, #60]	; 0x3c
 80056a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056a6:	81a3      	strh	r3, [r4, #12]
 80056a8:	6020      	str	r0, [r4, #0]
 80056aa:	6120      	str	r0, [r4, #16]
 80056ac:	6166      	str	r6, [r4, #20]
 80056ae:	b9a7      	cbnz	r7, 80056da <__smakebuf_r+0xa6>
 80056b0:	b011      	add	sp, #68	; 0x44
 80056b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056b4:	f101 0343 	add.w	r3, r1, #67	; 0x43
 80056b8:	2201      	movs	r2, #1
 80056ba:	600b      	str	r3, [r1, #0]
 80056bc:	610b      	str	r3, [r1, #16]
 80056be:	614a      	str	r2, [r1, #20]
 80056c0:	b011      	add	sp, #68	; 0x44
 80056c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056c4:	4a12      	ldr	r2, [pc, #72]	; (8005710 <__smakebuf_r+0xdc>)
 80056c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d1ce      	bne.n	800566a <__smakebuf_r+0x36>
 80056cc:	89a3      	ldrh	r3, [r4, #12]
 80056ce:	f44f 6680 	mov.w	r6, #1024	; 0x400
 80056d2:	4333      	orrs	r3, r6
 80056d4:	81a3      	strh	r3, [r4, #12]
 80056d6:	64e6      	str	r6, [r4, #76]	; 0x4c
 80056d8:	e7da      	b.n	8005690 <__smakebuf_r+0x5c>
 80056da:	4628      	mov	r0, r5
 80056dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056e0:	f002 fb74 	bl	8007dcc <_isatty_r>
 80056e4:	2800      	cmp	r0, #0
 80056e6:	d0e3      	beq.n	80056b0 <__smakebuf_r+0x7c>
 80056e8:	89a3      	ldrh	r3, [r4, #12]
 80056ea:	f043 0301 	orr.w	r3, r3, #1
 80056ee:	81a3      	strh	r3, [r4, #12]
 80056f0:	e7de      	b.n	80056b0 <__smakebuf_r+0x7c>
 80056f2:	059a      	lsls	r2, r3, #22
 80056f4:	d4dc      	bmi.n	80056b0 <__smakebuf_r+0x7c>
 80056f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80056fa:	f043 0302 	orr.w	r3, r3, #2
 80056fe:	2101      	movs	r1, #1
 8005700:	81a3      	strh	r3, [r4, #12]
 8005702:	6022      	str	r2, [r4, #0]
 8005704:	6122      	str	r2, [r4, #16]
 8005706:	6161      	str	r1, [r4, #20]
 8005708:	e7d2      	b.n	80056b0 <__smakebuf_r+0x7c>
 800570a:	bf00      	nop
 800570c:	08004d95 	.word	0x08004d95
 8005710:	08006b21 	.word	0x08006b21

08005714 <_malloc_r>:
 8005714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005718:	f101 050b 	add.w	r5, r1, #11
 800571c:	2d16      	cmp	r5, #22
 800571e:	b083      	sub	sp, #12
 8005720:	4606      	mov	r6, r0
 8005722:	d927      	bls.n	8005774 <_malloc_r+0x60>
 8005724:	f035 0507 	bics.w	r5, r5, #7
 8005728:	d427      	bmi.n	800577a <_malloc_r+0x66>
 800572a:	42a9      	cmp	r1, r5
 800572c:	d825      	bhi.n	800577a <_malloc_r+0x66>
 800572e:	4630      	mov	r0, r6
 8005730:	f000 fb34 	bl	8005d9c <__malloc_lock>
 8005734:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 8005738:	d226      	bcs.n	8005788 <_malloc_r+0x74>
 800573a:	4fc1      	ldr	r7, [pc, #772]	; (8005a40 <_malloc_r+0x32c>)
 800573c:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
 8005740:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
 8005744:	68dc      	ldr	r4, [r3, #12]
 8005746:	429c      	cmp	r4, r3
 8005748:	f000 81d2 	beq.w	8005af0 <_malloc_r+0x3dc>
 800574c:	6863      	ldr	r3, [r4, #4]
 800574e:	68e2      	ldr	r2, [r4, #12]
 8005750:	68a1      	ldr	r1, [r4, #8]
 8005752:	f023 0303 	bic.w	r3, r3, #3
 8005756:	4423      	add	r3, r4
 8005758:	4630      	mov	r0, r6
 800575a:	685d      	ldr	r5, [r3, #4]
 800575c:	60ca      	str	r2, [r1, #12]
 800575e:	f045 0501 	orr.w	r5, r5, #1
 8005762:	6091      	str	r1, [r2, #8]
 8005764:	605d      	str	r5, [r3, #4]
 8005766:	f000 fb1b 	bl	8005da0 <__malloc_unlock>
 800576a:	3408      	adds	r4, #8
 800576c:	4620      	mov	r0, r4
 800576e:	b003      	add	sp, #12
 8005770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005774:	2510      	movs	r5, #16
 8005776:	42a9      	cmp	r1, r5
 8005778:	d9d9      	bls.n	800572e <_malloc_r+0x1a>
 800577a:	2400      	movs	r4, #0
 800577c:	230c      	movs	r3, #12
 800577e:	4620      	mov	r0, r4
 8005780:	6033      	str	r3, [r6, #0]
 8005782:	b003      	add	sp, #12
 8005784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005788:	ea5f 2c55 	movs.w	ip, r5, lsr #9
 800578c:	f000 808a 	beq.w	80058a4 <_malloc_r+0x190>
 8005790:	f1bc 0f04 	cmp.w	ip, #4
 8005794:	f200 8160 	bhi.w	8005a58 <_malloc_r+0x344>
 8005798:	ea4f 1c95 	mov.w	ip, r5, lsr #6
 800579c:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
 80057a0:	ea4f 014c 	mov.w	r1, ip, lsl #1
 80057a4:	4fa6      	ldr	r7, [pc, #664]	; (8005a40 <_malloc_r+0x32c>)
 80057a6:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 80057aa:	68cc      	ldr	r4, [r1, #12]
 80057ac:	42a1      	cmp	r1, r4
 80057ae:	d105      	bne.n	80057bc <_malloc_r+0xa8>
 80057b0:	e00c      	b.n	80057cc <_malloc_r+0xb8>
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	da7a      	bge.n	80058ac <_malloc_r+0x198>
 80057b6:	68e4      	ldr	r4, [r4, #12]
 80057b8:	42a1      	cmp	r1, r4
 80057ba:	d007      	beq.n	80057cc <_malloc_r+0xb8>
 80057bc:	6862      	ldr	r2, [r4, #4]
 80057be:	f022 0203 	bic.w	r2, r2, #3
 80057c2:	1b53      	subs	r3, r2, r5
 80057c4:	2b0f      	cmp	r3, #15
 80057c6:	ddf4      	ble.n	80057b2 <_malloc_r+0x9e>
 80057c8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80057cc:	f10c 0c01 	add.w	ip, ip, #1
 80057d0:	4b9b      	ldr	r3, [pc, #620]	; (8005a40 <_malloc_r+0x32c>)
 80057d2:	693c      	ldr	r4, [r7, #16]
 80057d4:	f103 0e08 	add.w	lr, r3, #8
 80057d8:	4574      	cmp	r4, lr
 80057da:	f000 817e 	beq.w	8005ada <_malloc_r+0x3c6>
 80057de:	6861      	ldr	r1, [r4, #4]
 80057e0:	f021 0103 	bic.w	r1, r1, #3
 80057e4:	1b4a      	subs	r2, r1, r5
 80057e6:	2a0f      	cmp	r2, #15
 80057e8:	f300 8164 	bgt.w	8005ab4 <_malloc_r+0x3a0>
 80057ec:	2a00      	cmp	r2, #0
 80057ee:	f8c3 e014 	str.w	lr, [r3, #20]
 80057f2:	f8c3 e010 	str.w	lr, [r3, #16]
 80057f6:	da6a      	bge.n	80058ce <_malloc_r+0x1ba>
 80057f8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80057fc:	f080 813a 	bcs.w	8005a74 <_malloc_r+0x360>
 8005800:	08c9      	lsrs	r1, r1, #3
 8005802:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
 8005806:	ea4f 08a1 	mov.w	r8, r1, asr #2
 800580a:	685a      	ldr	r2, [r3, #4]
 800580c:	6881      	ldr	r1, [r0, #8]
 800580e:	60a1      	str	r1, [r4, #8]
 8005810:	f04f 0901 	mov.w	r9, #1
 8005814:	fa09 f808 	lsl.w	r8, r9, r8
 8005818:	ea48 0202 	orr.w	r2, r8, r2
 800581c:	60e0      	str	r0, [r4, #12]
 800581e:	605a      	str	r2, [r3, #4]
 8005820:	6084      	str	r4, [r0, #8]
 8005822:	60cc      	str	r4, [r1, #12]
 8005824:	ea4f 03ac 	mov.w	r3, ip, asr #2
 8005828:	2001      	movs	r0, #1
 800582a:	4098      	lsls	r0, r3
 800582c:	4290      	cmp	r0, r2
 800582e:	d85b      	bhi.n	80058e8 <_malloc_r+0x1d4>
 8005830:	4202      	tst	r2, r0
 8005832:	d106      	bne.n	8005842 <_malloc_r+0x12e>
 8005834:	f02c 0c03 	bic.w	ip, ip, #3
 8005838:	0040      	lsls	r0, r0, #1
 800583a:	4202      	tst	r2, r0
 800583c:	f10c 0c04 	add.w	ip, ip, #4
 8005840:	d0fa      	beq.n	8005838 <_malloc_r+0x124>
 8005842:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
 8005846:	4644      	mov	r4, r8
 8005848:	46e1      	mov	r9, ip
 800584a:	68e3      	ldr	r3, [r4, #12]
 800584c:	429c      	cmp	r4, r3
 800584e:	d107      	bne.n	8005860 <_malloc_r+0x14c>
 8005850:	e145      	b.n	8005ade <_malloc_r+0x3ca>
 8005852:	2a00      	cmp	r2, #0
 8005854:	f280 8156 	bge.w	8005b04 <_malloc_r+0x3f0>
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	429c      	cmp	r4, r3
 800585c:	f000 813f 	beq.w	8005ade <_malloc_r+0x3ca>
 8005860:	6859      	ldr	r1, [r3, #4]
 8005862:	f021 0103 	bic.w	r1, r1, #3
 8005866:	1b4a      	subs	r2, r1, r5
 8005868:	2a0f      	cmp	r2, #15
 800586a:	ddf2      	ble.n	8005852 <_malloc_r+0x13e>
 800586c:	461c      	mov	r4, r3
 800586e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8005872:	f854 8f08 	ldr.w	r8, [r4, #8]!
 8005876:	1959      	adds	r1, r3, r5
 8005878:	f045 0901 	orr.w	r9, r5, #1
 800587c:	f042 0501 	orr.w	r5, r2, #1
 8005880:	f8c3 9004 	str.w	r9, [r3, #4]
 8005884:	4630      	mov	r0, r6
 8005886:	f8c8 c00c 	str.w	ip, [r8, #12]
 800588a:	f8cc 8008 	str.w	r8, [ip, #8]
 800588e:	6179      	str	r1, [r7, #20]
 8005890:	6139      	str	r1, [r7, #16]
 8005892:	f8c1 e00c 	str.w	lr, [r1, #12]
 8005896:	f8c1 e008 	str.w	lr, [r1, #8]
 800589a:	604d      	str	r5, [r1, #4]
 800589c:	508a      	str	r2, [r1, r2]
 800589e:	f000 fa7f 	bl	8005da0 <__malloc_unlock>
 80058a2:	e763      	b.n	800576c <_malloc_r+0x58>
 80058a4:	217e      	movs	r1, #126	; 0x7e
 80058a6:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
 80058aa:	e77b      	b.n	80057a4 <_malloc_r+0x90>
 80058ac:	4422      	add	r2, r4
 80058ae:	68e3      	ldr	r3, [r4, #12]
 80058b0:	6850      	ldr	r0, [r2, #4]
 80058b2:	68a1      	ldr	r1, [r4, #8]
 80058b4:	f040 0501 	orr.w	r5, r0, #1
 80058b8:	60cb      	str	r3, [r1, #12]
 80058ba:	4630      	mov	r0, r6
 80058bc:	6099      	str	r1, [r3, #8]
 80058be:	6055      	str	r5, [r2, #4]
 80058c0:	f000 fa6e 	bl	8005da0 <__malloc_unlock>
 80058c4:	3408      	adds	r4, #8
 80058c6:	4620      	mov	r0, r4
 80058c8:	b003      	add	sp, #12
 80058ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058ce:	4421      	add	r1, r4
 80058d0:	4630      	mov	r0, r6
 80058d2:	684b      	ldr	r3, [r1, #4]
 80058d4:	f043 0301 	orr.w	r3, r3, #1
 80058d8:	604b      	str	r3, [r1, #4]
 80058da:	f000 fa61 	bl	8005da0 <__malloc_unlock>
 80058de:	3408      	adds	r4, #8
 80058e0:	4620      	mov	r0, r4
 80058e2:	b003      	add	sp, #12
 80058e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058e8:	68bc      	ldr	r4, [r7, #8]
 80058ea:	6863      	ldr	r3, [r4, #4]
 80058ec:	f023 0903 	bic.w	r9, r3, #3
 80058f0:	45a9      	cmp	r9, r5
 80058f2:	d304      	bcc.n	80058fe <_malloc_r+0x1ea>
 80058f4:	ebc5 0309 	rsb	r3, r5, r9
 80058f8:	2b0f      	cmp	r3, #15
 80058fa:	f300 8091 	bgt.w	8005a20 <_malloc_r+0x30c>
 80058fe:	4b51      	ldr	r3, [pc, #324]	; (8005a44 <_malloc_r+0x330>)
 8005900:	4a51      	ldr	r2, [pc, #324]	; (8005a48 <_malloc_r+0x334>)
 8005902:	6819      	ldr	r1, [r3, #0]
 8005904:	6813      	ldr	r3, [r2, #0]
 8005906:	3301      	adds	r3, #1
 8005908:	eb05 0a01 	add.w	sl, r5, r1
 800590c:	eb04 0b09 	add.w	fp, r4, r9
 8005910:	f000 8161 	beq.w	8005bd6 <_malloc_r+0x4c2>
 8005914:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
 8005918:	f10a 0a0f 	add.w	sl, sl, #15
 800591c:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
 8005920:	f02a 0a0f 	bic.w	sl, sl, #15
 8005924:	4630      	mov	r0, r6
 8005926:	4651      	mov	r1, sl
 8005928:	9201      	str	r2, [sp, #4]
 800592a:	f001 f8b7 	bl	8006a9c <_sbrk_r>
 800592e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005932:	4680      	mov	r8, r0
 8005934:	9a01      	ldr	r2, [sp, #4]
 8005936:	f000 8100 	beq.w	8005b3a <_malloc_r+0x426>
 800593a:	4583      	cmp	fp, r0
 800593c:	f200 80fa 	bhi.w	8005b34 <_malloc_r+0x420>
 8005940:	f8df c110 	ldr.w	ip, [pc, #272]	; 8005a54 <_malloc_r+0x340>
 8005944:	f8dc 3000 	ldr.w	r3, [ip]
 8005948:	45c3      	cmp	fp, r8
 800594a:	4453      	add	r3, sl
 800594c:	f8cc 3000 	str.w	r3, [ip]
 8005950:	f000 814a 	beq.w	8005be8 <_malloc_r+0x4d4>
 8005954:	6812      	ldr	r2, [r2, #0]
 8005956:	493c      	ldr	r1, [pc, #240]	; (8005a48 <_malloc_r+0x334>)
 8005958:	3201      	adds	r2, #1
 800595a:	bf1b      	ittet	ne
 800595c:	ebcb 0b08 	rsbne	fp, fp, r8
 8005960:	445b      	addne	r3, fp
 8005962:	f8c1 8000 	streq.w	r8, [r1]
 8005966:	f8cc 3000 	strne.w	r3, [ip]
 800596a:	f018 0307 	ands.w	r3, r8, #7
 800596e:	f000 8113 	beq.w	8005b98 <_malloc_r+0x484>
 8005972:	f1c3 0208 	rsb	r2, r3, #8
 8005976:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 800597a:	4490      	add	r8, r2
 800597c:	3308      	adds	r3, #8
 800597e:	44c2      	add	sl, r8
 8005980:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
 8005984:	ebca 0a03 	rsb	sl, sl, r3
 8005988:	4651      	mov	r1, sl
 800598a:	4630      	mov	r0, r6
 800598c:	f8cd c004 	str.w	ip, [sp, #4]
 8005990:	f001 f884 	bl	8006a9c <_sbrk_r>
 8005994:	1c43      	adds	r3, r0, #1
 8005996:	f8dd c004 	ldr.w	ip, [sp, #4]
 800599a:	f000 8135 	beq.w	8005c08 <_malloc_r+0x4f4>
 800599e:	ebc8 0200 	rsb	r2, r8, r0
 80059a2:	4452      	add	r2, sl
 80059a4:	f042 0201 	orr.w	r2, r2, #1
 80059a8:	f8dc 3000 	ldr.w	r3, [ip]
 80059ac:	f8c7 8008 	str.w	r8, [r7, #8]
 80059b0:	4453      	add	r3, sl
 80059b2:	42bc      	cmp	r4, r7
 80059b4:	f8c8 2004 	str.w	r2, [r8, #4]
 80059b8:	f8cc 3000 	str.w	r3, [ip]
 80059bc:	f8df a094 	ldr.w	sl, [pc, #148]	; 8005a54 <_malloc_r+0x340>
 80059c0:	d015      	beq.n	80059ee <_malloc_r+0x2da>
 80059c2:	f1b9 0f0f 	cmp.w	r9, #15
 80059c6:	f240 80ea 	bls.w	8005b9e <_malloc_r+0x48a>
 80059ca:	6861      	ldr	r1, [r4, #4]
 80059cc:	f1a9 020c 	sub.w	r2, r9, #12
 80059d0:	f022 0207 	bic.w	r2, r2, #7
 80059d4:	f001 0e01 	and.w	lr, r1, #1
 80059d8:	18a1      	adds	r1, r4, r2
 80059da:	2005      	movs	r0, #5
 80059dc:	ea42 0e0e 	orr.w	lr, r2, lr
 80059e0:	2a0f      	cmp	r2, #15
 80059e2:	f8c4 e004 	str.w	lr, [r4, #4]
 80059e6:	6048      	str	r0, [r1, #4]
 80059e8:	6088      	str	r0, [r1, #8]
 80059ea:	f200 8111 	bhi.w	8005c10 <_malloc_r+0x4fc>
 80059ee:	4a17      	ldr	r2, [pc, #92]	; (8005a4c <_malloc_r+0x338>)
 80059f0:	68bc      	ldr	r4, [r7, #8]
 80059f2:	6811      	ldr	r1, [r2, #0]
 80059f4:	428b      	cmp	r3, r1
 80059f6:	bf88      	it	hi
 80059f8:	6013      	strhi	r3, [r2, #0]
 80059fa:	4a15      	ldr	r2, [pc, #84]	; (8005a50 <_malloc_r+0x33c>)
 80059fc:	6811      	ldr	r1, [r2, #0]
 80059fe:	428b      	cmp	r3, r1
 8005a00:	bf88      	it	hi
 8005a02:	6013      	strhi	r3, [r2, #0]
 8005a04:	6862      	ldr	r2, [r4, #4]
 8005a06:	f022 0203 	bic.w	r2, r2, #3
 8005a0a:	4295      	cmp	r5, r2
 8005a0c:	ebc5 0302 	rsb	r3, r5, r2
 8005a10:	d801      	bhi.n	8005a16 <_malloc_r+0x302>
 8005a12:	2b0f      	cmp	r3, #15
 8005a14:	dc04      	bgt.n	8005a20 <_malloc_r+0x30c>
 8005a16:	4630      	mov	r0, r6
 8005a18:	f000 f9c2 	bl	8005da0 <__malloc_unlock>
 8005a1c:	2400      	movs	r4, #0
 8005a1e:	e6a5      	b.n	800576c <_malloc_r+0x58>
 8005a20:	1962      	adds	r2, r4, r5
 8005a22:	f043 0301 	orr.w	r3, r3, #1
 8005a26:	f045 0501 	orr.w	r5, r5, #1
 8005a2a:	6065      	str	r5, [r4, #4]
 8005a2c:	4630      	mov	r0, r6
 8005a2e:	60ba      	str	r2, [r7, #8]
 8005a30:	6053      	str	r3, [r2, #4]
 8005a32:	f000 f9b5 	bl	8005da0 <__malloc_unlock>
 8005a36:	3408      	adds	r4, #8
 8005a38:	4620      	mov	r0, r4
 8005a3a:	b003      	add	sp, #12
 8005a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a40:	20000518 	.word	0x20000518
 8005a44:	2000fba4 	.word	0x2000fba4
 8005a48:	20000924 	.word	0x20000924
 8005a4c:	2000fba0 	.word	0x2000fba0
 8005a50:	2000fb9c 	.word	0x2000fb9c
 8005a54:	2000fba8 	.word	0x2000fba8
 8005a58:	f1bc 0f14 	cmp.w	ip, #20
 8005a5c:	d961      	bls.n	8005b22 <_malloc_r+0x40e>
 8005a5e:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
 8005a62:	f200 808f 	bhi.w	8005b84 <_malloc_r+0x470>
 8005a66:	ea4f 3c15 	mov.w	ip, r5, lsr #12
 8005a6a:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
 8005a6e:	ea4f 014c 	mov.w	r1, ip, lsl #1
 8005a72:	e697      	b.n	80057a4 <_malloc_r+0x90>
 8005a74:	0a4b      	lsrs	r3, r1, #9
 8005a76:	2b04      	cmp	r3, #4
 8005a78:	d958      	bls.n	8005b2c <_malloc_r+0x418>
 8005a7a:	2b14      	cmp	r3, #20
 8005a7c:	f200 80ae 	bhi.w	8005bdc <_malloc_r+0x4c8>
 8005a80:	f103 025b 	add.w	r2, r3, #91	; 0x5b
 8005a84:	0050      	lsls	r0, r2, #1
 8005a86:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8005a8a:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005c48 <_malloc_r+0x534>
 8005a8e:	6883      	ldr	r3, [r0, #8]
 8005a90:	4283      	cmp	r3, r0
 8005a92:	f000 808a 	beq.w	8005baa <_malloc_r+0x496>
 8005a96:	685a      	ldr	r2, [r3, #4]
 8005a98:	f022 0203 	bic.w	r2, r2, #3
 8005a9c:	4291      	cmp	r1, r2
 8005a9e:	d202      	bcs.n	8005aa6 <_malloc_r+0x392>
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	4298      	cmp	r0, r3
 8005aa4:	d1f7      	bne.n	8005a96 <_malloc_r+0x382>
 8005aa6:	68d9      	ldr	r1, [r3, #12]
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	60e1      	str	r1, [r4, #12]
 8005aac:	60a3      	str	r3, [r4, #8]
 8005aae:	608c      	str	r4, [r1, #8]
 8005ab0:	60dc      	str	r4, [r3, #12]
 8005ab2:	e6b7      	b.n	8005824 <_malloc_r+0x110>
 8005ab4:	1961      	adds	r1, r4, r5
 8005ab6:	f042 0701 	orr.w	r7, r2, #1
 8005aba:	f045 0501 	orr.w	r5, r5, #1
 8005abe:	6065      	str	r5, [r4, #4]
 8005ac0:	4630      	mov	r0, r6
 8005ac2:	6159      	str	r1, [r3, #20]
 8005ac4:	6119      	str	r1, [r3, #16]
 8005ac6:	f8c1 e00c 	str.w	lr, [r1, #12]
 8005aca:	f8c1 e008 	str.w	lr, [r1, #8]
 8005ace:	604f      	str	r7, [r1, #4]
 8005ad0:	508a      	str	r2, [r1, r2]
 8005ad2:	3408      	adds	r4, #8
 8005ad4:	f000 f964 	bl	8005da0 <__malloc_unlock>
 8005ad8:	e648      	b.n	800576c <_malloc_r+0x58>
 8005ada:	685a      	ldr	r2, [r3, #4]
 8005adc:	e6a2      	b.n	8005824 <_malloc_r+0x110>
 8005ade:	f109 0901 	add.w	r9, r9, #1
 8005ae2:	f019 0f03 	tst.w	r9, #3
 8005ae6:	f104 0408 	add.w	r4, r4, #8
 8005aea:	f47f aeae 	bne.w	800584a <_malloc_r+0x136>
 8005aee:	e02d      	b.n	8005b4c <_malloc_r+0x438>
 8005af0:	f104 0308 	add.w	r3, r4, #8
 8005af4:	6964      	ldr	r4, [r4, #20]
 8005af6:	42a3      	cmp	r3, r4
 8005af8:	bf08      	it	eq
 8005afa:	f10c 0c02 	addeq.w	ip, ip, #2
 8005afe:	f43f ae67 	beq.w	80057d0 <_malloc_r+0xbc>
 8005b02:	e623      	b.n	800574c <_malloc_r+0x38>
 8005b04:	4419      	add	r1, r3
 8005b06:	461c      	mov	r4, r3
 8005b08:	6848      	ldr	r0, [r1, #4]
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	f854 2f08 	ldr.w	r2, [r4, #8]!
 8005b10:	f040 0501 	orr.w	r5, r0, #1
 8005b14:	604d      	str	r5, [r1, #4]
 8005b16:	4630      	mov	r0, r6
 8005b18:	60d3      	str	r3, [r2, #12]
 8005b1a:	609a      	str	r2, [r3, #8]
 8005b1c:	f000 f940 	bl	8005da0 <__malloc_unlock>
 8005b20:	e624      	b.n	800576c <_malloc_r+0x58>
 8005b22:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
 8005b26:	ea4f 014c 	mov.w	r1, ip, lsl #1
 8005b2a:	e63b      	b.n	80057a4 <_malloc_r+0x90>
 8005b2c:	098a      	lsrs	r2, r1, #6
 8005b2e:	3238      	adds	r2, #56	; 0x38
 8005b30:	0050      	lsls	r0, r2, #1
 8005b32:	e7a8      	b.n	8005a86 <_malloc_r+0x372>
 8005b34:	42bc      	cmp	r4, r7
 8005b36:	f43f af03 	beq.w	8005940 <_malloc_r+0x22c>
 8005b3a:	68bc      	ldr	r4, [r7, #8]
 8005b3c:	6862      	ldr	r2, [r4, #4]
 8005b3e:	f022 0203 	bic.w	r2, r2, #3
 8005b42:	e762      	b.n	8005a0a <_malloc_r+0x2f6>
 8005b44:	f8d8 8000 	ldr.w	r8, [r8]
 8005b48:	4598      	cmp	r8, r3
 8005b4a:	d17b      	bne.n	8005c44 <_malloc_r+0x530>
 8005b4c:	f01c 0f03 	tst.w	ip, #3
 8005b50:	f1a8 0308 	sub.w	r3, r8, #8
 8005b54:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005b58:	d1f4      	bne.n	8005b44 <_malloc_r+0x430>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	ea23 0300 	bic.w	r3, r3, r0
 8005b60:	607b      	str	r3, [r7, #4]
 8005b62:	0040      	lsls	r0, r0, #1
 8005b64:	4298      	cmp	r0, r3
 8005b66:	f63f aebf 	bhi.w	80058e8 <_malloc_r+0x1d4>
 8005b6a:	2800      	cmp	r0, #0
 8005b6c:	f43f aebc 	beq.w	80058e8 <_malloc_r+0x1d4>
 8005b70:	4203      	tst	r3, r0
 8005b72:	46cc      	mov	ip, r9
 8005b74:	f47f ae65 	bne.w	8005842 <_malloc_r+0x12e>
 8005b78:	0040      	lsls	r0, r0, #1
 8005b7a:	4203      	tst	r3, r0
 8005b7c:	f10c 0c04 	add.w	ip, ip, #4
 8005b80:	d0fa      	beq.n	8005b78 <_malloc_r+0x464>
 8005b82:	e65e      	b.n	8005842 <_malloc_r+0x12e>
 8005b84:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
 8005b88:	d81a      	bhi.n	8005bc0 <_malloc_r+0x4ac>
 8005b8a:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
 8005b8e:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
 8005b92:	ea4f 014c 	mov.w	r1, ip, lsl #1
 8005b96:	e605      	b.n	80057a4 <_malloc_r+0x90>
 8005b98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b9c:	e6ef      	b.n	800597e <_malloc_r+0x26a>
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	f8c8 3004 	str.w	r3, [r8, #4]
 8005ba4:	4644      	mov	r4, r8
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	e72f      	b.n	8005a0a <_malloc_r+0x2f6>
 8005baa:	1091      	asrs	r1, r2, #2
 8005bac:	2001      	movs	r0, #1
 8005bae:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8005bb2:	fa00 f101 	lsl.w	r1, r0, r1
 8005bb6:	430a      	orrs	r2, r1
 8005bb8:	f8c8 2004 	str.w	r2, [r8, #4]
 8005bbc:	4619      	mov	r1, r3
 8005bbe:	e774      	b.n	8005aaa <_malloc_r+0x396>
 8005bc0:	f240 5354 	movw	r3, #1364	; 0x554
 8005bc4:	459c      	cmp	ip, r3
 8005bc6:	d81b      	bhi.n	8005c00 <_malloc_r+0x4ec>
 8005bc8:	ea4f 4c95 	mov.w	ip, r5, lsr #18
 8005bcc:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
 8005bd0:	ea4f 014c 	mov.w	r1, ip, lsl #1
 8005bd4:	e5e6      	b.n	80057a4 <_malloc_r+0x90>
 8005bd6:	f10a 0a10 	add.w	sl, sl, #16
 8005bda:	e6a3      	b.n	8005924 <_malloc_r+0x210>
 8005bdc:	2b54      	cmp	r3, #84	; 0x54
 8005bde:	d81f      	bhi.n	8005c20 <_malloc_r+0x50c>
 8005be0:	0b0a      	lsrs	r2, r1, #12
 8005be2:	326e      	adds	r2, #110	; 0x6e
 8005be4:	0050      	lsls	r0, r2, #1
 8005be6:	e74e      	b.n	8005a86 <_malloc_r+0x372>
 8005be8:	f3cb 010b 	ubfx	r1, fp, #0, #12
 8005bec:	2900      	cmp	r1, #0
 8005bee:	f47f aeb1 	bne.w	8005954 <_malloc_r+0x240>
 8005bf2:	eb0a 0109 	add.w	r1, sl, r9
 8005bf6:	68ba      	ldr	r2, [r7, #8]
 8005bf8:	f041 0101 	orr.w	r1, r1, #1
 8005bfc:	6051      	str	r1, [r2, #4]
 8005bfe:	e6f6      	b.n	80059ee <_malloc_r+0x2da>
 8005c00:	21fc      	movs	r1, #252	; 0xfc
 8005c02:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
 8005c06:	e5cd      	b.n	80057a4 <_malloc_r+0x90>
 8005c08:	2201      	movs	r2, #1
 8005c0a:	f04f 0a00 	mov.w	sl, #0
 8005c0e:	e6cb      	b.n	80059a8 <_malloc_r+0x294>
 8005c10:	f104 0108 	add.w	r1, r4, #8
 8005c14:	4630      	mov	r0, r6
 8005c16:	f7ff fa27 	bl	8005068 <_free_r>
 8005c1a:	f8da 3000 	ldr.w	r3, [sl]
 8005c1e:	e6e6      	b.n	80059ee <_malloc_r+0x2da>
 8005c20:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8005c24:	d803      	bhi.n	8005c2e <_malloc_r+0x51a>
 8005c26:	0bca      	lsrs	r2, r1, #15
 8005c28:	3277      	adds	r2, #119	; 0x77
 8005c2a:	0050      	lsls	r0, r2, #1
 8005c2c:	e72b      	b.n	8005a86 <_malloc_r+0x372>
 8005c2e:	f240 5254 	movw	r2, #1364	; 0x554
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d803      	bhi.n	8005c3e <_malloc_r+0x52a>
 8005c36:	0c8a      	lsrs	r2, r1, #18
 8005c38:	327c      	adds	r2, #124	; 0x7c
 8005c3a:	0050      	lsls	r0, r2, #1
 8005c3c:	e723      	b.n	8005a86 <_malloc_r+0x372>
 8005c3e:	20fc      	movs	r0, #252	; 0xfc
 8005c40:	227e      	movs	r2, #126	; 0x7e
 8005c42:	e720      	b.n	8005a86 <_malloc_r+0x372>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	e78c      	b.n	8005b62 <_malloc_r+0x44e>
 8005c48:	20000518 	.word	0x20000518

08005c4c <memchr>:
 8005c4c:	0783      	lsls	r3, r0, #30
 8005c4e:	b470      	push	{r4, r5, r6}
 8005c50:	b2c9      	uxtb	r1, r1
 8005c52:	d03f      	beq.n	8005cd4 <memchr+0x88>
 8005c54:	1e54      	subs	r4, r2, #1
 8005c56:	b32a      	cbz	r2, 8005ca4 <memchr+0x58>
 8005c58:	7803      	ldrb	r3, [r0, #0]
 8005c5a:	428b      	cmp	r3, r1
 8005c5c:	d023      	beq.n	8005ca6 <memchr+0x5a>
 8005c5e:	1c43      	adds	r3, r0, #1
 8005c60:	e004      	b.n	8005c6c <memchr+0x20>
 8005c62:	b1fc      	cbz	r4, 8005ca4 <memchr+0x58>
 8005c64:	7804      	ldrb	r4, [r0, #0]
 8005c66:	428c      	cmp	r4, r1
 8005c68:	d01d      	beq.n	8005ca6 <memchr+0x5a>
 8005c6a:	4614      	mov	r4, r2
 8005c6c:	f013 0f03 	tst.w	r3, #3
 8005c70:	4618      	mov	r0, r3
 8005c72:	f104 32ff 	add.w	r2, r4, #4294967295
 8005c76:	f103 0301 	add.w	r3, r3, #1
 8005c7a:	d1f2      	bne.n	8005c62 <memchr+0x16>
 8005c7c:	2c03      	cmp	r4, #3
 8005c7e:	d814      	bhi.n	8005caa <memchr+0x5e>
 8005c80:	1e65      	subs	r5, r4, #1
 8005c82:	b34c      	cbz	r4, 8005cd8 <memchr+0x8c>
 8005c84:	7803      	ldrb	r3, [r0, #0]
 8005c86:	428b      	cmp	r3, r1
 8005c88:	d00d      	beq.n	8005ca6 <memchr+0x5a>
 8005c8a:	1c42      	adds	r2, r0, #1
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	e002      	b.n	8005c96 <memchr+0x4a>
 8005c90:	7804      	ldrb	r4, [r0, #0]
 8005c92:	428c      	cmp	r4, r1
 8005c94:	d007      	beq.n	8005ca6 <memchr+0x5a>
 8005c96:	42ab      	cmp	r3, r5
 8005c98:	4610      	mov	r0, r2
 8005c9a:	f103 0301 	add.w	r3, r3, #1
 8005c9e:	f102 0201 	add.w	r2, r2, #1
 8005ca2:	d1f5      	bne.n	8005c90 <memchr+0x44>
 8005ca4:	2000      	movs	r0, #0
 8005ca6:	bc70      	pop	{r4, r5, r6}
 8005ca8:	4770      	bx	lr
 8005caa:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
 8005cae:	4603      	mov	r3, r0
 8005cb0:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3304      	adds	r3, #4
 8005cb8:	6802      	ldr	r2, [r0, #0]
 8005cba:	4072      	eors	r2, r6
 8005cbc:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
 8005cc0:	ea25 0202 	bic.w	r2, r5, r2
 8005cc4:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8005cc8:	d1da      	bne.n	8005c80 <memchr+0x34>
 8005cca:	3c04      	subs	r4, #4
 8005ccc:	2c03      	cmp	r4, #3
 8005cce:	4618      	mov	r0, r3
 8005cd0:	d8f0      	bhi.n	8005cb4 <memchr+0x68>
 8005cd2:	e7d5      	b.n	8005c80 <memchr+0x34>
 8005cd4:	4614      	mov	r4, r2
 8005cd6:	e7d1      	b.n	8005c7c <memchr+0x30>
 8005cd8:	4620      	mov	r0, r4
 8005cda:	e7e4      	b.n	8005ca6 <memchr+0x5a>

08005cdc <memmove>:
 8005cdc:	4288      	cmp	r0, r1
 8005cde:	b4f0      	push	{r4, r5, r6, r7}
 8005ce0:	d910      	bls.n	8005d04 <memmove+0x28>
 8005ce2:	188c      	adds	r4, r1, r2
 8005ce4:	42a0      	cmp	r0, r4
 8005ce6:	d20d      	bcs.n	8005d04 <memmove+0x28>
 8005ce8:	1885      	adds	r5, r0, r2
 8005cea:	1e53      	subs	r3, r2, #1
 8005cec:	b142      	cbz	r2, 8005d00 <memmove+0x24>
 8005cee:	4621      	mov	r1, r4
 8005cf0:	462a      	mov	r2, r5
 8005cf2:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
 8005cf6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005cfa:	3b01      	subs	r3, #1
 8005cfc:	1c5c      	adds	r4, r3, #1
 8005cfe:	d1f8      	bne.n	8005cf2 <memmove+0x16>
 8005d00:	bcf0      	pop	{r4, r5, r6, r7}
 8005d02:	4770      	bx	lr
 8005d04:	2a0f      	cmp	r2, #15
 8005d06:	d93f      	bls.n	8005d88 <memmove+0xac>
 8005d08:	ea40 0301 	orr.w	r3, r0, r1
 8005d0c:	079b      	lsls	r3, r3, #30
 8005d0e:	d13f      	bne.n	8005d90 <memmove+0xb4>
 8005d10:	f1a2 0710 	sub.w	r7, r2, #16
 8005d14:	093f      	lsrs	r7, r7, #4
 8005d16:	eb00 1607 	add.w	r6, r0, r7, lsl #4
 8005d1a:	3610      	adds	r6, #16
 8005d1c:	460c      	mov	r4, r1
 8005d1e:	4603      	mov	r3, r0
 8005d20:	6825      	ldr	r5, [r4, #0]
 8005d22:	601d      	str	r5, [r3, #0]
 8005d24:	6865      	ldr	r5, [r4, #4]
 8005d26:	605d      	str	r5, [r3, #4]
 8005d28:	68a5      	ldr	r5, [r4, #8]
 8005d2a:	609d      	str	r5, [r3, #8]
 8005d2c:	68e5      	ldr	r5, [r4, #12]
 8005d2e:	60dd      	str	r5, [r3, #12]
 8005d30:	3310      	adds	r3, #16
 8005d32:	42b3      	cmp	r3, r6
 8005d34:	f104 0410 	add.w	r4, r4, #16
 8005d38:	d1f2      	bne.n	8005d20 <memmove+0x44>
 8005d3a:	1c7b      	adds	r3, r7, #1
 8005d3c:	f002 0c0f 	and.w	ip, r2, #15
 8005d40:	011b      	lsls	r3, r3, #4
 8005d42:	f1bc 0f03 	cmp.w	ip, #3
 8005d46:	4419      	add	r1, r3
 8005d48:	4403      	add	r3, r0
 8005d4a:	d923      	bls.n	8005d94 <memmove+0xb8>
 8005d4c:	460e      	mov	r6, r1
 8005d4e:	461d      	mov	r5, r3
 8005d50:	4664      	mov	r4, ip
 8005d52:	3c04      	subs	r4, #4
 8005d54:	f856 7b04 	ldr.w	r7, [r6], #4
 8005d58:	f845 7b04 	str.w	r7, [r5], #4
 8005d5c:	2c03      	cmp	r4, #3
 8005d5e:	d8f8      	bhi.n	8005d52 <memmove+0x76>
 8005d60:	f1ac 0404 	sub.w	r4, ip, #4
 8005d64:	f024 0403 	bic.w	r4, r4, #3
 8005d68:	3404      	adds	r4, #4
 8005d6a:	f002 0203 	and.w	r2, r2, #3
 8005d6e:	4423      	add	r3, r4
 8005d70:	4421      	add	r1, r4
 8005d72:	2a00      	cmp	r2, #0
 8005d74:	d0c4      	beq.n	8005d00 <memmove+0x24>
 8005d76:	441a      	add	r2, r3
 8005d78:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d7c:	f803 4b01 	strb.w	r4, [r3], #1
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d1f9      	bne.n	8005d78 <memmove+0x9c>
 8005d84:	bcf0      	pop	{r4, r5, r6, r7}
 8005d86:	4770      	bx	lr
 8005d88:	4603      	mov	r3, r0
 8005d8a:	2a00      	cmp	r2, #0
 8005d8c:	d1f3      	bne.n	8005d76 <memmove+0x9a>
 8005d8e:	e7b7      	b.n	8005d00 <memmove+0x24>
 8005d90:	4603      	mov	r3, r0
 8005d92:	e7f0      	b.n	8005d76 <memmove+0x9a>
 8005d94:	4662      	mov	r2, ip
 8005d96:	2a00      	cmp	r2, #0
 8005d98:	d1ed      	bne.n	8005d76 <memmove+0x9a>
 8005d9a:	e7b1      	b.n	8005d00 <memmove+0x24>

08005d9c <__malloc_lock>:
 8005d9c:	4770      	bx	lr
 8005d9e:	bf00      	nop

08005da0 <__malloc_unlock>:
 8005da0:	4770      	bx	lr
 8005da2:	bf00      	nop

08005da4 <_Balloc>:
 8005da4:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8005da6:	b570      	push	{r4, r5, r6, lr}
 8005da8:	4605      	mov	r5, r0
 8005daa:	460c      	mov	r4, r1
 8005dac:	b14a      	cbz	r2, 8005dc2 <_Balloc+0x1e>
 8005dae:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8005db2:	b180      	cbz	r0, 8005dd6 <_Balloc+0x32>
 8005db4:	6801      	ldr	r1, [r0, #0]
 8005db6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	6102      	str	r2, [r0, #16]
 8005dbe:	60c2      	str	r2, [r0, #12]
 8005dc0:	bd70      	pop	{r4, r5, r6, pc}
 8005dc2:	2221      	movs	r2, #33	; 0x21
 8005dc4:	2104      	movs	r1, #4
 8005dc6:	f001 fef1 	bl	8007bac <_calloc_r>
 8005dca:	64e8      	str	r0, [r5, #76]	; 0x4c
 8005dcc:	4602      	mov	r2, r0
 8005dce:	2800      	cmp	r0, #0
 8005dd0:	d1ed      	bne.n	8005dae <_Balloc+0xa>
 8005dd2:	2000      	movs	r0, #0
 8005dd4:	bd70      	pop	{r4, r5, r6, pc}
 8005dd6:	2101      	movs	r1, #1
 8005dd8:	fa01 f604 	lsl.w	r6, r1, r4
 8005ddc:	1d72      	adds	r2, r6, #5
 8005dde:	4628      	mov	r0, r5
 8005de0:	0092      	lsls	r2, r2, #2
 8005de2:	f001 fee3 	bl	8007bac <_calloc_r>
 8005de6:	2800      	cmp	r0, #0
 8005de8:	d0f3      	beq.n	8005dd2 <_Balloc+0x2e>
 8005dea:	6044      	str	r4, [r0, #4]
 8005dec:	6086      	str	r6, [r0, #8]
 8005dee:	e7e4      	b.n	8005dba <_Balloc+0x16>

08005df0 <_Bfree>:
 8005df0:	b131      	cbz	r1, 8005e00 <_Bfree+0x10>
 8005df2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8005df4:	684a      	ldr	r2, [r1, #4]
 8005df6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005dfa:	6008      	str	r0, [r1, #0]
 8005dfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005e00:	4770      	bx	lr
 8005e02:	bf00      	nop

08005e04 <__multadd>:
 8005e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e08:	f8d1 8010 	ldr.w	r8, [r1, #16]
 8005e0c:	b082      	sub	sp, #8
 8005e0e:	4689      	mov	r9, r1
 8005e10:	4682      	mov	sl, r0
 8005e12:	f101 0514 	add.w	r5, r1, #20
 8005e16:	2400      	movs	r4, #0
 8005e18:	682f      	ldr	r7, [r5, #0]
 8005e1a:	b2be      	uxth	r6, r7
 8005e1c:	0c3f      	lsrs	r7, r7, #16
 8005e1e:	fb02 3606 	mla	r6, r2, r6, r3
 8005e22:	fb02 f307 	mul.w	r3, r2, r7
 8005e26:	eb03 4316 	add.w	r3, r3, r6, lsr #16
 8005e2a:	3401      	adds	r4, #1
 8005e2c:	b2b6      	uxth	r6, r6
 8005e2e:	eb06 4603 	add.w	r6, r6, r3, lsl #16
 8005e32:	45a0      	cmp	r8, r4
 8005e34:	f845 6b04 	str.w	r6, [r5], #4
 8005e38:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8005e3c:	dcec      	bgt.n	8005e18 <__multadd+0x14>
 8005e3e:	b153      	cbz	r3, 8005e56 <__multadd+0x52>
 8005e40:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8005e44:	4590      	cmp	r8, r2
 8005e46:	da0a      	bge.n	8005e5e <__multadd+0x5a>
 8005e48:	eb09 0188 	add.w	r1, r9, r8, lsl #2
 8005e4c:	f108 0201 	add.w	r2, r8, #1
 8005e50:	614b      	str	r3, [r1, #20]
 8005e52:	f8c9 2010 	str.w	r2, [r9, #16]
 8005e56:	4648      	mov	r0, r9
 8005e58:	b002      	add	sp, #8
 8005e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e5e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005e62:	9301      	str	r3, [sp, #4]
 8005e64:	3101      	adds	r1, #1
 8005e66:	4650      	mov	r0, sl
 8005e68:	f7ff ff9c 	bl	8005da4 <_Balloc>
 8005e6c:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8005e70:	3202      	adds	r2, #2
 8005e72:	f109 010c 	add.w	r1, r9, #12
 8005e76:	4604      	mov	r4, r0
 8005e78:	0092      	lsls	r2, r2, #2
 8005e7a:	300c      	adds	r0, #12
 8005e7c:	f7fc f9ac 	bl	80021d8 <memcpy>
 8005e80:	f8da 204c 	ldr.w	r2, [sl, #76]	; 0x4c
 8005e84:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005e88:	9b01      	ldr	r3, [sp, #4]
 8005e8a:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8005e8e:	f8c9 0000 	str.w	r0, [r9]
 8005e92:	f842 9021 	str.w	r9, [r2, r1, lsl #2]
 8005e96:	46a1      	mov	r9, r4
 8005e98:	e7d6      	b.n	8005e48 <__multadd+0x44>
 8005e9a:	bf00      	nop

08005e9c <__s2b>:
 8005e9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ea0:	4699      	mov	r9, r3
 8005ea2:	4b23      	ldr	r3, [pc, #140]	; (8005f30 <__s2b+0x94>)
 8005ea4:	9e08      	ldr	r6, [sp, #32]
 8005ea6:	f109 0408 	add.w	r4, r9, #8
 8005eaa:	fb83 5304 	smull	r5, r3, r3, r4
 8005eae:	17e4      	asrs	r4, r4, #31
 8005eb0:	ebc4 0363 	rsb	r3, r4, r3, asr #1
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	4607      	mov	r7, r0
 8005eb8:	460c      	mov	r4, r1
 8005eba:	4690      	mov	r8, r2
 8005ebc:	dd35      	ble.n	8005f2a <__s2b+0x8e>
 8005ebe:	2501      	movs	r5, #1
 8005ec0:	2100      	movs	r1, #0
 8005ec2:	006d      	lsls	r5, r5, #1
 8005ec4:	42ab      	cmp	r3, r5
 8005ec6:	f101 0101 	add.w	r1, r1, #1
 8005eca:	dcfa      	bgt.n	8005ec2 <__s2b+0x26>
 8005ecc:	4638      	mov	r0, r7
 8005ece:	f7ff ff69 	bl	8005da4 <_Balloc>
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	f1b8 0f09 	cmp.w	r8, #9
 8005ed8:	6146      	str	r6, [r0, #20]
 8005eda:	6103      	str	r3, [r0, #16]
 8005edc:	dd21      	ble.n	8005f22 <__s2b+0x86>
 8005ede:	f104 0609 	add.w	r6, r4, #9
 8005ee2:	4635      	mov	r5, r6
 8005ee4:	4444      	add	r4, r8
 8005ee6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005eea:	4601      	mov	r1, r0
 8005eec:	3b30      	subs	r3, #48	; 0x30
 8005eee:	4638      	mov	r0, r7
 8005ef0:	220a      	movs	r2, #10
 8005ef2:	f7ff ff87 	bl	8005e04 <__multadd>
 8005ef6:	42a5      	cmp	r5, r4
 8005ef8:	d1f5      	bne.n	8005ee6 <__s2b+0x4a>
 8005efa:	eb06 0408 	add.w	r4, r6, r8
 8005efe:	3c08      	subs	r4, #8
 8005f00:	45c1      	cmp	r9, r8
 8005f02:	dd0c      	ble.n	8005f1e <__s2b+0x82>
 8005f04:	ebc8 0809 	rsb	r8, r8, r9
 8005f08:	44a0      	add	r8, r4
 8005f0a:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005f0e:	4601      	mov	r1, r0
 8005f10:	3b30      	subs	r3, #48	; 0x30
 8005f12:	4638      	mov	r0, r7
 8005f14:	220a      	movs	r2, #10
 8005f16:	f7ff ff75 	bl	8005e04 <__multadd>
 8005f1a:	4544      	cmp	r4, r8
 8005f1c:	d1f5      	bne.n	8005f0a <__s2b+0x6e>
 8005f1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f22:	340a      	adds	r4, #10
 8005f24:	f04f 0809 	mov.w	r8, #9
 8005f28:	e7ea      	b.n	8005f00 <__s2b+0x64>
 8005f2a:	2100      	movs	r1, #0
 8005f2c:	e7ce      	b.n	8005ecc <__s2b+0x30>
 8005f2e:	bf00      	nop
 8005f30:	38e38e39 	.word	0x38e38e39

08005f34 <__hi0bits>:
 8005f34:	0c03      	lsrs	r3, r0, #16
 8005f36:	041b      	lsls	r3, r3, #16
 8005f38:	b9b3      	cbnz	r3, 8005f68 <__hi0bits+0x34>
 8005f3a:	0400      	lsls	r0, r0, #16
 8005f3c:	2310      	movs	r3, #16
 8005f3e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005f42:	bf04      	itt	eq
 8005f44:	0200      	lsleq	r0, r0, #8
 8005f46:	3308      	addeq	r3, #8
 8005f48:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005f4c:	bf04      	itt	eq
 8005f4e:	0100      	lsleq	r0, r0, #4
 8005f50:	3304      	addeq	r3, #4
 8005f52:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005f56:	bf04      	itt	eq
 8005f58:	0080      	lsleq	r0, r0, #2
 8005f5a:	3302      	addeq	r3, #2
 8005f5c:	2800      	cmp	r0, #0
 8005f5e:	db07      	blt.n	8005f70 <__hi0bits+0x3c>
 8005f60:	0042      	lsls	r2, r0, #1
 8005f62:	d403      	bmi.n	8005f6c <__hi0bits+0x38>
 8005f64:	2020      	movs	r0, #32
 8005f66:	4770      	bx	lr
 8005f68:	2300      	movs	r3, #0
 8005f6a:	e7e8      	b.n	8005f3e <__hi0bits+0xa>
 8005f6c:	1c58      	adds	r0, r3, #1
 8005f6e:	4770      	bx	lr
 8005f70:	4618      	mov	r0, r3
 8005f72:	4770      	bx	lr

08005f74 <__lo0bits>:
 8005f74:	6803      	ldr	r3, [r0, #0]
 8005f76:	f013 0207 	ands.w	r2, r3, #7
 8005f7a:	d007      	beq.n	8005f8c <__lo0bits+0x18>
 8005f7c:	07d9      	lsls	r1, r3, #31
 8005f7e:	d420      	bmi.n	8005fc2 <__lo0bits+0x4e>
 8005f80:	079a      	lsls	r2, r3, #30
 8005f82:	d420      	bmi.n	8005fc6 <__lo0bits+0x52>
 8005f84:	089b      	lsrs	r3, r3, #2
 8005f86:	6003      	str	r3, [r0, #0]
 8005f88:	2002      	movs	r0, #2
 8005f8a:	4770      	bx	lr
 8005f8c:	b299      	uxth	r1, r3
 8005f8e:	b909      	cbnz	r1, 8005f94 <__lo0bits+0x20>
 8005f90:	0c1b      	lsrs	r3, r3, #16
 8005f92:	2210      	movs	r2, #16
 8005f94:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005f98:	bf04      	itt	eq
 8005f9a:	0a1b      	lsreq	r3, r3, #8
 8005f9c:	3208      	addeq	r2, #8
 8005f9e:	0719      	lsls	r1, r3, #28
 8005fa0:	bf04      	itt	eq
 8005fa2:	091b      	lsreq	r3, r3, #4
 8005fa4:	3204      	addeq	r2, #4
 8005fa6:	0799      	lsls	r1, r3, #30
 8005fa8:	bf04      	itt	eq
 8005faa:	089b      	lsreq	r3, r3, #2
 8005fac:	3202      	addeq	r2, #2
 8005fae:	07d9      	lsls	r1, r3, #31
 8005fb0:	d404      	bmi.n	8005fbc <__lo0bits+0x48>
 8005fb2:	085b      	lsrs	r3, r3, #1
 8005fb4:	d101      	bne.n	8005fba <__lo0bits+0x46>
 8005fb6:	2020      	movs	r0, #32
 8005fb8:	4770      	bx	lr
 8005fba:	3201      	adds	r2, #1
 8005fbc:	6003      	str	r3, [r0, #0]
 8005fbe:	4610      	mov	r0, r2
 8005fc0:	4770      	bx	lr
 8005fc2:	2000      	movs	r0, #0
 8005fc4:	4770      	bx	lr
 8005fc6:	085b      	lsrs	r3, r3, #1
 8005fc8:	6003      	str	r3, [r0, #0]
 8005fca:	2001      	movs	r0, #1
 8005fcc:	4770      	bx	lr
 8005fce:	bf00      	nop

08005fd0 <__i2b>:
 8005fd0:	b510      	push	{r4, lr}
 8005fd2:	460c      	mov	r4, r1
 8005fd4:	2101      	movs	r1, #1
 8005fd6:	f7ff fee5 	bl	8005da4 <_Balloc>
 8005fda:	2201      	movs	r2, #1
 8005fdc:	6144      	str	r4, [r0, #20]
 8005fde:	6102      	str	r2, [r0, #16]
 8005fe0:	bd10      	pop	{r4, pc}
 8005fe2:	bf00      	nop

08005fe4 <__multiply>:
 8005fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fe8:	690d      	ldr	r5, [r1, #16]
 8005fea:	f8d2 9010 	ldr.w	r9, [r2, #16]
 8005fee:	454d      	cmp	r5, r9
 8005ff0:	b085      	sub	sp, #20
 8005ff2:	460c      	mov	r4, r1
 8005ff4:	4692      	mov	sl, r2
 8005ff6:	da04      	bge.n	8006002 <__multiply+0x1e>
 8005ff8:	462a      	mov	r2, r5
 8005ffa:	4654      	mov	r4, sl
 8005ffc:	464d      	mov	r5, r9
 8005ffe:	468a      	mov	sl, r1
 8006000:	4691      	mov	r9, r2
 8006002:	68a3      	ldr	r3, [r4, #8]
 8006004:	6861      	ldr	r1, [r4, #4]
 8006006:	eb05 0709 	add.w	r7, r5, r9
 800600a:	429f      	cmp	r7, r3
 800600c:	bfc8      	it	gt
 800600e:	3101      	addgt	r1, #1
 8006010:	f7ff fec8 	bl	8005da4 <_Balloc>
 8006014:	f100 0614 	add.w	r6, r0, #20
 8006018:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800601c:	4546      	cmp	r6, r8
 800601e:	9001      	str	r0, [sp, #4]
 8006020:	d205      	bcs.n	800602e <__multiply+0x4a>
 8006022:	4633      	mov	r3, r6
 8006024:	2000      	movs	r0, #0
 8006026:	f843 0b04 	str.w	r0, [r3], #4
 800602a:	4598      	cmp	r8, r3
 800602c:	d8fb      	bhi.n	8006026 <__multiply+0x42>
 800602e:	f10a 0c14 	add.w	ip, sl, #20
 8006032:	eb0c 0989 	add.w	r9, ip, r9, lsl #2
 8006036:	3414      	adds	r4, #20
 8006038:	45cc      	cmp	ip, r9
 800603a:	9400      	str	r4, [sp, #0]
 800603c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006040:	d25b      	bcs.n	80060fa <__multiply+0x116>
 8006042:	f8cd 8008 	str.w	r8, [sp, #8]
 8006046:	9703      	str	r7, [sp, #12]
 8006048:	46c8      	mov	r8, r9
 800604a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800604e:	b29c      	uxth	r4, r3
 8006050:	b324      	cbz	r4, 800609c <__multiply+0xb8>
 8006052:	9a00      	ldr	r2, [sp, #0]
 8006054:	4633      	mov	r3, r6
 8006056:	f04f 0900 	mov.w	r9, #0
 800605a:	e000      	b.n	800605e <__multiply+0x7a>
 800605c:	460b      	mov	r3, r1
 800605e:	f852 7b04 	ldr.w	r7, [r2], #4
 8006062:	6819      	ldr	r1, [r3, #0]
 8006064:	fa1f fb87 	uxth.w	fp, r7
 8006068:	fa1f fa81 	uxth.w	sl, r1
 800606c:	0c38      	lsrs	r0, r7, #16
 800606e:	0c09      	lsrs	r1, r1, #16
 8006070:	fb04 a70b 	mla	r7, r4, fp, sl
 8006074:	44b9      	add	r9, r7
 8006076:	fb04 1000 	mla	r0, r4, r0, r1
 800607a:	eb00 4019 	add.w	r0, r0, r9, lsr #16
 800607e:	4619      	mov	r1, r3
 8006080:	fa1f f989 	uxth.w	r9, r9
 8006084:	ea49 4700 	orr.w	r7, r9, r0, lsl #16
 8006088:	4295      	cmp	r5, r2
 800608a:	ea4f 4910 	mov.w	r9, r0, lsr #16
 800608e:	f841 7b04 	str.w	r7, [r1], #4
 8006092:	d8e3      	bhi.n	800605c <__multiply+0x78>
 8006094:	f8c3 9004 	str.w	r9, [r3, #4]
 8006098:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 800609c:	ea5f 4913 	movs.w	r9, r3, lsr #16
 80060a0:	d024      	beq.n	80060ec <__multiply+0x108>
 80060a2:	f8d6 a000 	ldr.w	sl, [r6]
 80060a6:	9b00      	ldr	r3, [sp, #0]
 80060a8:	4650      	mov	r0, sl
 80060aa:	4631      	mov	r1, r6
 80060ac:	f04f 0b00 	mov.w	fp, #0
 80060b0:	e000      	b.n	80060b4 <__multiply+0xd0>
 80060b2:	4611      	mov	r1, r2
 80060b4:	881a      	ldrh	r2, [r3, #0]
 80060b6:	0c00      	lsrs	r0, r0, #16
 80060b8:	fb09 0002 	mla	r0, r9, r2, r0
 80060bc:	4483      	add	fp, r0
 80060be:	fa1f fa8a 	uxth.w	sl, sl
 80060c2:	460a      	mov	r2, r1
 80060c4:	ea4a 400b 	orr.w	r0, sl, fp, lsl #16
 80060c8:	f842 0b04 	str.w	r0, [r2], #4
 80060cc:	f853 7b04 	ldr.w	r7, [r3], #4
 80060d0:	6848      	ldr	r0, [r1, #4]
 80060d2:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80060d6:	b284      	uxth	r4, r0
 80060d8:	fb09 4a0a 	mla	sl, r9, sl, r4
 80060dc:	eb0a 4a1b 	add.w	sl, sl, fp, lsr #16
 80060e0:	429d      	cmp	r5, r3
 80060e2:	ea4f 4b1a 	mov.w	fp, sl, lsr #16
 80060e6:	d8e4      	bhi.n	80060b2 <__multiply+0xce>
 80060e8:	f8c1 a004 	str.w	sl, [r1, #4]
 80060ec:	45e0      	cmp	r8, ip
 80060ee:	f106 0604 	add.w	r6, r6, #4
 80060f2:	d8aa      	bhi.n	800604a <__multiply+0x66>
 80060f4:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80060f8:	9f03      	ldr	r7, [sp, #12]
 80060fa:	2f00      	cmp	r7, #0
 80060fc:	dd0a      	ble.n	8006114 <__multiply+0x130>
 80060fe:	f858 3c04 	ldr.w	r3, [r8, #-4]
 8006102:	f1a8 0804 	sub.w	r8, r8, #4
 8006106:	b11b      	cbz	r3, 8006110 <__multiply+0x12c>
 8006108:	e004      	b.n	8006114 <__multiply+0x130>
 800610a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800610e:	b90b      	cbnz	r3, 8006114 <__multiply+0x130>
 8006110:	3f01      	subs	r7, #1
 8006112:	d1fa      	bne.n	800610a <__multiply+0x126>
 8006114:	9b01      	ldr	r3, [sp, #4]
 8006116:	4618      	mov	r0, r3
 8006118:	611f      	str	r7, [r3, #16]
 800611a:	b005      	add	sp, #20
 800611c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006120 <__pow5mult>:
 8006120:	f012 0303 	ands.w	r3, r2, #3
 8006124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006128:	4614      	mov	r4, r2
 800612a:	4607      	mov	r7, r0
 800612c:	460e      	mov	r6, r1
 800612e:	d12c      	bne.n	800618a <__pow5mult+0x6a>
 8006130:	10a4      	asrs	r4, r4, #2
 8006132:	d01c      	beq.n	800616e <__pow5mult+0x4e>
 8006134:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 8006136:	2d00      	cmp	r5, #0
 8006138:	d030      	beq.n	800619c <__pow5mult+0x7c>
 800613a:	f04f 0800 	mov.w	r8, #0
 800613e:	e004      	b.n	800614a <__pow5mult+0x2a>
 8006140:	1064      	asrs	r4, r4, #1
 8006142:	d014      	beq.n	800616e <__pow5mult+0x4e>
 8006144:	6828      	ldr	r0, [r5, #0]
 8006146:	b1a8      	cbz	r0, 8006174 <__pow5mult+0x54>
 8006148:	4605      	mov	r5, r0
 800614a:	07e3      	lsls	r3, r4, #31
 800614c:	d5f8      	bpl.n	8006140 <__pow5mult+0x20>
 800614e:	4638      	mov	r0, r7
 8006150:	4631      	mov	r1, r6
 8006152:	462a      	mov	r2, r5
 8006154:	f7ff ff46 	bl	8005fe4 <__multiply>
 8006158:	b1ae      	cbz	r6, 8006186 <__pow5mult+0x66>
 800615a:	6872      	ldr	r2, [r6, #4]
 800615c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800615e:	1064      	asrs	r4, r4, #1
 8006160:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006164:	6031      	str	r1, [r6, #0]
 8006166:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 800616a:	4606      	mov	r6, r0
 800616c:	d1ea      	bne.n	8006144 <__pow5mult+0x24>
 800616e:	4630      	mov	r0, r6
 8006170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006174:	4638      	mov	r0, r7
 8006176:	4629      	mov	r1, r5
 8006178:	462a      	mov	r2, r5
 800617a:	f7ff ff33 	bl	8005fe4 <__multiply>
 800617e:	6028      	str	r0, [r5, #0]
 8006180:	f8c0 8000 	str.w	r8, [r0]
 8006184:	e7e0      	b.n	8006148 <__pow5mult+0x28>
 8006186:	4606      	mov	r6, r0
 8006188:	e7da      	b.n	8006140 <__pow5mult+0x20>
 800618a:	1e5d      	subs	r5, r3, #1
 800618c:	4a0a      	ldr	r2, [pc, #40]	; (80061b8 <__pow5mult+0x98>)
 800618e:	2300      	movs	r3, #0
 8006190:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8006194:	f7ff fe36 	bl	8005e04 <__multadd>
 8006198:	4606      	mov	r6, r0
 800619a:	e7c9      	b.n	8006130 <__pow5mult+0x10>
 800619c:	2101      	movs	r1, #1
 800619e:	4638      	mov	r0, r7
 80061a0:	f7ff fe00 	bl	8005da4 <_Balloc>
 80061a4:	f240 2171 	movw	r1, #625	; 0x271
 80061a8:	2201      	movs	r2, #1
 80061aa:	2300      	movs	r3, #0
 80061ac:	6141      	str	r1, [r0, #20]
 80061ae:	6102      	str	r2, [r0, #16]
 80061b0:	4605      	mov	r5, r0
 80061b2:	64b8      	str	r0, [r7, #72]	; 0x48
 80061b4:	6003      	str	r3, [r0, #0]
 80061b6:	e7c0      	b.n	800613a <__pow5mult+0x1a>
 80061b8:	080091f0 	.word	0x080091f0

080061bc <__lshift>:
 80061bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061c0:	4693      	mov	fp, r2
 80061c2:	690a      	ldr	r2, [r1, #16]
 80061c4:	688b      	ldr	r3, [r1, #8]
 80061c6:	ea4f 1a6b 	mov.w	sl, fp, asr #5
 80061ca:	eb0a 0902 	add.w	r9, sl, r2
 80061ce:	f109 0601 	add.w	r6, r9, #1
 80061d2:	429e      	cmp	r6, r3
 80061d4:	460f      	mov	r7, r1
 80061d6:	4680      	mov	r8, r0
 80061d8:	6849      	ldr	r1, [r1, #4]
 80061da:	dd04      	ble.n	80061e6 <__lshift+0x2a>
 80061dc:	005b      	lsls	r3, r3, #1
 80061de:	429e      	cmp	r6, r3
 80061e0:	f101 0101 	add.w	r1, r1, #1
 80061e4:	dcfa      	bgt.n	80061dc <__lshift+0x20>
 80061e6:	4640      	mov	r0, r8
 80061e8:	f7ff fddc 	bl	8005da4 <_Balloc>
 80061ec:	f1ba 0f00 	cmp.w	sl, #0
 80061f0:	f100 0414 	add.w	r4, r0, #20
 80061f4:	dd09      	ble.n	800620a <__lshift+0x4e>
 80061f6:	2300      	movs	r3, #0
 80061f8:	461a      	mov	r2, r3
 80061fa:	4625      	mov	r5, r4
 80061fc:	3301      	adds	r3, #1
 80061fe:	4553      	cmp	r3, sl
 8006200:	f845 2b04 	str.w	r2, [r5], #4
 8006204:	d1fa      	bne.n	80061fc <__lshift+0x40>
 8006206:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800620a:	693a      	ldr	r2, [r7, #16]
 800620c:	f107 0314 	add.w	r3, r7, #20
 8006210:	f01b 0b1f 	ands.w	fp, fp, #31
 8006214:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
 8006218:	d021      	beq.n	800625e <__lshift+0xa2>
 800621a:	f1cb 0a20 	rsb	sl, fp, #32
 800621e:	2200      	movs	r2, #0
 8006220:	e000      	b.n	8006224 <__lshift+0x68>
 8006222:	462c      	mov	r4, r5
 8006224:	6819      	ldr	r1, [r3, #0]
 8006226:	4625      	mov	r5, r4
 8006228:	fa01 f10b 	lsl.w	r1, r1, fp
 800622c:	430a      	orrs	r2, r1
 800622e:	f845 2b04 	str.w	r2, [r5], #4
 8006232:	f853 2b04 	ldr.w	r2, [r3], #4
 8006236:	4563      	cmp	r3, ip
 8006238:	fa22 f20a 	lsr.w	r2, r2, sl
 800623c:	d3f1      	bcc.n	8006222 <__lshift+0x66>
 800623e:	6062      	str	r2, [r4, #4]
 8006240:	b10a      	cbz	r2, 8006246 <__lshift+0x8a>
 8006242:	f109 0602 	add.w	r6, r9, #2
 8006246:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	3e01      	subs	r6, #1
 800624e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006252:	6106      	str	r6, [r0, #16]
 8006254:	6039      	str	r1, [r7, #0]
 8006256:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
 800625a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800625e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006262:	f844 2b04 	str.w	r2, [r4], #4
 8006266:	459c      	cmp	ip, r3
 8006268:	d9ed      	bls.n	8006246 <__lshift+0x8a>
 800626a:	f853 2b04 	ldr.w	r2, [r3], #4
 800626e:	f844 2b04 	str.w	r2, [r4], #4
 8006272:	459c      	cmp	ip, r3
 8006274:	d8f3      	bhi.n	800625e <__lshift+0xa2>
 8006276:	e7e6      	b.n	8006246 <__lshift+0x8a>

08006278 <__mcmp>:
 8006278:	6902      	ldr	r2, [r0, #16]
 800627a:	690b      	ldr	r3, [r1, #16]
 800627c:	1ad2      	subs	r2, r2, r3
 800627e:	b410      	push	{r4}
 8006280:	d115      	bne.n	80062ae <__mcmp+0x36>
 8006282:	009b      	lsls	r3, r3, #2
 8006284:	3014      	adds	r0, #20
 8006286:	3114      	adds	r1, #20
 8006288:	4419      	add	r1, r3
 800628a:	4403      	add	r3, r0
 800628c:	e001      	b.n	8006292 <__mcmp+0x1a>
 800628e:	4298      	cmp	r0, r3
 8006290:	d211      	bcs.n	80062b6 <__mcmp+0x3e>
 8006292:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006296:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800629a:	42a2      	cmp	r2, r4
 800629c:	d0f7      	beq.n	800628e <__mcmp+0x16>
 800629e:	4294      	cmp	r4, r2
 80062a0:	bf94      	ite	ls
 80062a2:	2001      	movls	r0, #1
 80062a4:	f04f 30ff 	movhi.w	r0, #4294967295
 80062a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062ac:	4770      	bx	lr
 80062ae:	4610      	mov	r0, r2
 80062b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062b4:	4770      	bx	lr
 80062b6:	2000      	movs	r0, #0
 80062b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062bc:	4770      	bx	lr
 80062be:	bf00      	nop

080062c0 <__mdiff>:
 80062c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062c4:	460d      	mov	r5, r1
 80062c6:	4604      	mov	r4, r0
 80062c8:	4611      	mov	r1, r2
 80062ca:	4628      	mov	r0, r5
 80062cc:	4616      	mov	r6, r2
 80062ce:	f7ff ffd3 	bl	8006278 <__mcmp>
 80062d2:	1e07      	subs	r7, r0, #0
 80062d4:	d055      	beq.n	8006382 <__mdiff+0xc2>
 80062d6:	db4e      	blt.n	8006376 <__mdiff+0xb6>
 80062d8:	f04f 0800 	mov.w	r8, #0
 80062dc:	6869      	ldr	r1, [r5, #4]
 80062de:	4620      	mov	r0, r4
 80062e0:	f7ff fd60 	bl	8005da4 <_Balloc>
 80062e4:	692f      	ldr	r7, [r5, #16]
 80062e6:	6932      	ldr	r2, [r6, #16]
 80062e8:	f8c0 800c 	str.w	r8, [r0, #12]
 80062ec:	3514      	adds	r5, #20
 80062ee:	3614      	adds	r6, #20
 80062f0:	f100 0314 	add.w	r3, r0, #20
 80062f4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80062f8:	eb06 0882 	add.w	r8, r6, r2, lsl #2
 80062fc:	2100      	movs	r1, #0
 80062fe:	f856 2b04 	ldr.w	r2, [r6], #4
 8006302:	f855 4b04 	ldr.w	r4, [r5], #4
 8006306:	fa1f f982 	uxth.w	r9, r2
 800630a:	fa11 fa84 	uxtah	sl, r1, r4
 800630e:	0c11      	lsrs	r1, r2, #16
 8006310:	ebc1 4114 	rsb	r1, r1, r4, lsr #16
 8006314:	ebc9 020a 	rsb	r2, r9, sl
 8006318:	eb01 4122 	add.w	r1, r1, r2, asr #16
 800631c:	b292      	uxth	r2, r2
 800631e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8006322:	45b0      	cmp	r8, r6
 8006324:	f843 2b04 	str.w	r2, [r3], #4
 8006328:	ea4f 4121 	mov.w	r1, r1, asr #16
 800632c:	462c      	mov	r4, r5
 800632e:	d8e6      	bhi.n	80062fe <__mdiff+0x3e>
 8006330:	45ac      	cmp	ip, r5
 8006332:	4698      	mov	r8, r3
 8006334:	d915      	bls.n	8006362 <__mdiff+0xa2>
 8006336:	f854 6b04 	ldr.w	r6, [r4], #4
 800633a:	fa11 f186 	uxtah	r1, r1, r6
 800633e:	0c36      	lsrs	r6, r6, #16
 8006340:	eb06 4621 	add.w	r6, r6, r1, asr #16
 8006344:	b289      	uxth	r1, r1
 8006346:	ea41 4206 	orr.w	r2, r1, r6, lsl #16
 800634a:	45a4      	cmp	ip, r4
 800634c:	f843 2b04 	str.w	r2, [r3], #4
 8006350:	ea4f 4126 	mov.w	r1, r6, asr #16
 8006354:	d8ef      	bhi.n	8006336 <__mdiff+0x76>
 8006356:	43eb      	mvns	r3, r5
 8006358:	4463      	add	r3, ip
 800635a:	f023 0303 	bic.w	r3, r3, #3
 800635e:	3304      	adds	r3, #4
 8006360:	4443      	add	r3, r8
 8006362:	3b04      	subs	r3, #4
 8006364:	b922      	cbnz	r2, 8006370 <__mdiff+0xb0>
 8006366:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800636a:	3f01      	subs	r7, #1
 800636c:	2a00      	cmp	r2, #0
 800636e:	d0fa      	beq.n	8006366 <__mdiff+0xa6>
 8006370:	6107      	str	r7, [r0, #16]
 8006372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006376:	462b      	mov	r3, r5
 8006378:	f04f 0801 	mov.w	r8, #1
 800637c:	4635      	mov	r5, r6
 800637e:	461e      	mov	r6, r3
 8006380:	e7ac      	b.n	80062dc <__mdiff+0x1c>
 8006382:	4620      	mov	r0, r4
 8006384:	4639      	mov	r1, r7
 8006386:	f7ff fd0d 	bl	8005da4 <_Balloc>
 800638a:	2301      	movs	r3, #1
 800638c:	6147      	str	r7, [r0, #20]
 800638e:	6103      	str	r3, [r0, #16]
 8006390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006394 <__ulp>:
 8006394:	ec53 2b10 	vmov	r2, r3, d0
 8006398:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800639c:	0d1b      	lsrs	r3, r3, #20
 800639e:	051b      	lsls	r3, r3, #20
 80063a0:	f1a3 7150 	sub.w	r1, r3, #54525952	; 0x3400000
 80063a4:	2900      	cmp	r1, #0
 80063a6:	dd04      	ble.n	80063b2 <__ulp+0x1e>
 80063a8:	460b      	mov	r3, r1
 80063aa:	2200      	movs	r2, #0
 80063ac:	ec43 2b10 	vmov	d0, r2, r3
 80063b0:	4770      	bx	lr
 80063b2:	4249      	negs	r1, r1
 80063b4:	1509      	asrs	r1, r1, #20
 80063b6:	2913      	cmp	r1, #19
 80063b8:	dd0c      	ble.n	80063d4 <__ulp+0x40>
 80063ba:	2932      	cmp	r1, #50	; 0x32
 80063bc:	bfdd      	ittte	le
 80063be:	f1c1 0133 	rsble	r1, r1, #51	; 0x33
 80063c2:	2001      	movle	r0, #1
 80063c4:	fa00 f101 	lslle.w	r1, r0, r1
 80063c8:	2101      	movgt	r1, #1
 80063ca:	2300      	movs	r3, #0
 80063cc:	460a      	mov	r2, r1
 80063ce:	ec43 2b10 	vmov	d0, r2, r3
 80063d2:	4770      	bx	lr
 80063d4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80063d8:	fa40 f301 	asr.w	r3, r0, r1
 80063dc:	2200      	movs	r2, #0
 80063de:	ec43 2b10 	vmov	d0, r2, r3
 80063e2:	4770      	bx	lr

080063e4 <__b2d>:
 80063e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063e6:	6904      	ldr	r4, [r0, #16]
 80063e8:	f100 0614 	add.w	r6, r0, #20
 80063ec:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 80063f0:	460f      	mov	r7, r1
 80063f2:	f854 5c04 	ldr.w	r5, [r4, #-4]
 80063f6:	4628      	mov	r0, r5
 80063f8:	f7ff fd9c 	bl	8005f34 <__hi0bits>
 80063fc:	f1c0 0320 	rsb	r3, r0, #32
 8006400:	280a      	cmp	r0, #10
 8006402:	603b      	str	r3, [r7, #0]
 8006404:	f1a4 0104 	sub.w	r1, r4, #4
 8006408:	dc17      	bgt.n	800643a <__b2d+0x56>
 800640a:	428e      	cmp	r6, r1
 800640c:	f1c0 070b 	rsb	r7, r0, #11
 8006410:	bf38      	it	cc
 8006412:	f854 1c08 	ldrcc.w	r1, [r4, #-8]
 8006416:	fa25 fc07 	lsr.w	ip, r5, r7
 800641a:	f100 0015 	add.w	r0, r0, #21
 800641e:	f04c 537f 	orr.w	r3, ip, #1069547520	; 0x3fc00000
 8006422:	bf34      	ite	cc
 8006424:	fa21 f707 	lsrcc.w	r7, r1, r7
 8006428:	2700      	movcs	r7, #0
 800642a:	4085      	lsls	r5, r0
 800642c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006430:	ea47 0205 	orr.w	r2, r7, r5
 8006434:	ec43 2b10 	vmov	d0, r2, r3
 8006438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800643a:	428e      	cmp	r6, r1
 800643c:	bf36      	itet	cc
 800643e:	f1a4 0108 	subcc.w	r1, r4, #8
 8006442:	2400      	movcs	r4, #0
 8006444:	f854 4c08 	ldrcc.w	r4, [r4, #-8]
 8006448:	f1b0 070b 	subs.w	r7, r0, #11
 800644c:	d019      	beq.n	8006482 <__b2d+0x9e>
 800644e:	42b1      	cmp	r1, r6
 8006450:	fa05 f507 	lsl.w	r5, r5, r7
 8006454:	bf88      	it	hi
 8006456:	f851 1c04 	ldrhi.w	r1, [r1, #-4]
 800645a:	f1c0 002b 	rsb	r0, r0, #43	; 0x2b
 800645e:	f045 557f 	orr.w	r5, r5, #1069547520	; 0x3fc00000
 8006462:	fa24 fc00 	lsr.w	ip, r4, r0
 8006466:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800646a:	bf8c      	ite	hi
 800646c:	fa21 f000 	lsrhi.w	r0, r1, r0
 8006470:	2000      	movls	r0, #0
 8006472:	40bc      	lsls	r4, r7
 8006474:	ea45 030c 	orr.w	r3, r5, ip
 8006478:	ea40 0204 	orr.w	r2, r0, r4
 800647c:	ec43 2b10 	vmov	d0, r2, r3
 8006480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006482:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8006486:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800648a:	4622      	mov	r2, r4
 800648c:	ec43 2b10 	vmov	d0, r2, r3
 8006490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006492:	bf00      	nop

08006494 <__d2b>:
 8006494:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006498:	4689      	mov	r9, r1
 800649a:	b083      	sub	sp, #12
 800649c:	2101      	movs	r1, #1
 800649e:	ec55 4b10 	vmov	r4, r5, d0
 80064a2:	4690      	mov	r8, r2
 80064a4:	f7ff fc7e 	bl	8005da4 <_Balloc>
 80064a8:	f3c5 570a 	ubfx	r7, r5, #20, #11
 80064ac:	4606      	mov	r6, r0
 80064ae:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80064b2:	b10f      	cbz	r7, 80064b8 <__d2b+0x24>
 80064b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80064b8:	9301      	str	r3, [sp, #4]
 80064ba:	b314      	cbz	r4, 8006502 <__d2b+0x6e>
 80064bc:	a802      	add	r0, sp, #8
 80064be:	f840 4d08 	str.w	r4, [r0, #-8]!
 80064c2:	4668      	mov	r0, sp
 80064c4:	f7ff fd56 	bl	8005f74 <__lo0bits>
 80064c8:	2800      	cmp	r0, #0
 80064ca:	d131      	bne.n	8006530 <__d2b+0x9c>
 80064cc:	e89d 000c 	ldmia.w	sp, {r2, r3}
 80064d0:	6172      	str	r2, [r6, #20]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	bf0c      	ite	eq
 80064d6:	2401      	moveq	r4, #1
 80064d8:	2402      	movne	r4, #2
 80064da:	61b3      	str	r3, [r6, #24]
 80064dc:	6134      	str	r4, [r6, #16]
 80064de:	b9d7      	cbnz	r7, 8006516 <__d2b+0x82>
 80064e0:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80064e4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80064e8:	f8c9 0000 	str.w	r0, [r9]
 80064ec:	6918      	ldr	r0, [r3, #16]
 80064ee:	f7ff fd21 	bl	8005f34 <__hi0bits>
 80064f2:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 80064f6:	f8c8 0000 	str.w	r0, [r8]
 80064fa:	4630      	mov	r0, r6
 80064fc:	b003      	add	sp, #12
 80064fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006502:	a801      	add	r0, sp, #4
 8006504:	f7ff fd36 	bl	8005f74 <__lo0bits>
 8006508:	2401      	movs	r4, #1
 800650a:	9b01      	ldr	r3, [sp, #4]
 800650c:	6173      	str	r3, [r6, #20]
 800650e:	3020      	adds	r0, #32
 8006510:	6134      	str	r4, [r6, #16]
 8006512:	2f00      	cmp	r7, #0
 8006514:	d0e4      	beq.n	80064e0 <__d2b+0x4c>
 8006516:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
 800651a:	4407      	add	r7, r0
 800651c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006520:	f8c9 7000 	str.w	r7, [r9]
 8006524:	f8c8 0000 	str.w	r0, [r8]
 8006528:	4630      	mov	r0, r6
 800652a:	b003      	add	sp, #12
 800652c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006530:	e89d 000c 	ldmia.w	sp, {r2, r3}
 8006534:	f1c0 0120 	rsb	r1, r0, #32
 8006538:	fa03 f101 	lsl.w	r1, r3, r1
 800653c:	430a      	orrs	r2, r1
 800653e:	40c3      	lsrs	r3, r0
 8006540:	9301      	str	r3, [sp, #4]
 8006542:	6172      	str	r2, [r6, #20]
 8006544:	e7c5      	b.n	80064d2 <__d2b+0x3e>
 8006546:	bf00      	nop

08006548 <__ratio>:
 8006548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800654a:	b083      	sub	sp, #12
 800654c:	460e      	mov	r6, r1
 800654e:	4669      	mov	r1, sp
 8006550:	4607      	mov	r7, r0
 8006552:	f7ff ff47 	bl	80063e4 <__b2d>
 8006556:	4630      	mov	r0, r6
 8006558:	a901      	add	r1, sp, #4
 800655a:	ec55 4b10 	vmov	r4, r5, d0
 800655e:	f7ff ff41 	bl	80063e4 <__b2d>
 8006562:	e89d 0003 	ldmia.w	sp, {r0, r1}
 8006566:	693f      	ldr	r7, [r7, #16]
 8006568:	6936      	ldr	r6, [r6, #16]
 800656a:	1a41      	subs	r1, r0, r1
 800656c:	ebc6 0e07 	rsb	lr, r6, r7
 8006570:	eb01 1e4e 	add.w	lr, r1, lr, lsl #5
 8006574:	f1be 0f00 	cmp.w	lr, #0
 8006578:	ec53 2b10 	vmov	r2, r3, d0
 800657c:	dd0a      	ble.n	8006594 <__ratio+0x4c>
 800657e:	eb05 510e 	add.w	r1, r5, lr, lsl #20
 8006582:	460d      	mov	r5, r1
 8006584:	4620      	mov	r0, r4
 8006586:	4629      	mov	r1, r5
 8006588:	f002 f868 	bl	800865c <__aeabi_ddiv>
 800658c:	ec41 0b10 	vmov	d0, r0, r1
 8006590:	b003      	add	sp, #12
 8006592:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006594:	eba3 570e 	sub.w	r7, r3, lr, lsl #20
 8006598:	463b      	mov	r3, r7
 800659a:	e7f3      	b.n	8006584 <__ratio+0x3c>

0800659c <_mprec_log10>:
 800659c:	2817      	cmp	r0, #23
 800659e:	b510      	push	{r4, lr}
 80065a0:	4604      	mov	r4, r0
 80065a2:	dd0a      	ble.n	80065ba <_mprec_log10+0x1e>
 80065a4:	4908      	ldr	r1, [pc, #32]	; (80065c8 <_mprec_log10+0x2c>)
 80065a6:	2000      	movs	r0, #0
 80065a8:	2200      	movs	r2, #0
 80065aa:	4b08      	ldr	r3, [pc, #32]	; (80065cc <_mprec_log10+0x30>)
 80065ac:	f001 ff2c 	bl	8008408 <__aeabi_dmul>
 80065b0:	3c01      	subs	r4, #1
 80065b2:	d1f9      	bne.n	80065a8 <_mprec_log10+0xc>
 80065b4:	ec41 0b10 	vmov	d0, r0, r1
 80065b8:	bd10      	pop	{r4, pc}
 80065ba:	4b05      	ldr	r3, [pc, #20]	; (80065d0 <_mprec_log10+0x34>)
 80065bc:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
 80065c0:	ed94 0b00 	vldr	d0, [r4]
 80065c4:	bd10      	pop	{r4, pc}
 80065c6:	bf00      	nop
 80065c8:	3ff00000 	.word	0x3ff00000
 80065cc:	40240000 	.word	0x40240000
 80065d0:	08009200 	.word	0x08009200

080065d4 <__copybits>:
 80065d4:	b470      	push	{r4, r5, r6}
 80065d6:	6915      	ldr	r5, [r2, #16]
 80065d8:	f102 0314 	add.w	r3, r2, #20
 80065dc:	3901      	subs	r1, #1
 80065de:	114e      	asrs	r6, r1, #5
 80065e0:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 80065e4:	3601      	adds	r6, #1
 80065e6:	42ab      	cmp	r3, r5
 80065e8:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 80065ec:	d20c      	bcs.n	8006608 <__copybits+0x34>
 80065ee:	4601      	mov	r1, r0
 80065f0:	f853 4b04 	ldr.w	r4, [r3], #4
 80065f4:	f841 4b04 	str.w	r4, [r1], #4
 80065f8:	429d      	cmp	r5, r3
 80065fa:	d8f9      	bhi.n	80065f0 <__copybits+0x1c>
 80065fc:	1aab      	subs	r3, r5, r2
 80065fe:	3b15      	subs	r3, #21
 8006600:	f023 0303 	bic.w	r3, r3, #3
 8006604:	3304      	adds	r3, #4
 8006606:	4418      	add	r0, r3
 8006608:	4286      	cmp	r6, r0
 800660a:	d904      	bls.n	8006616 <__copybits+0x42>
 800660c:	2300      	movs	r3, #0
 800660e:	f840 3b04 	str.w	r3, [r0], #4
 8006612:	4286      	cmp	r6, r0
 8006614:	d8fb      	bhi.n	800660e <__copybits+0x3a>
 8006616:	bc70      	pop	{r4, r5, r6}
 8006618:	4770      	bx	lr
 800661a:	bf00      	nop

0800661c <__any_on>:
 800661c:	6903      	ldr	r3, [r0, #16]
 800661e:	114a      	asrs	r2, r1, #5
 8006620:	4293      	cmp	r3, r2
 8006622:	b410      	push	{r4}
 8006624:	f100 0414 	add.w	r4, r0, #20
 8006628:	da10      	bge.n	800664c <__any_on+0x30>
 800662a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800662e:	429c      	cmp	r4, r3
 8006630:	d221      	bcs.n	8006676 <__any_on+0x5a>
 8006632:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8006636:	3b04      	subs	r3, #4
 8006638:	b118      	cbz	r0, 8006642 <__any_on+0x26>
 800663a:	e015      	b.n	8006668 <__any_on+0x4c>
 800663c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006640:	b992      	cbnz	r2, 8006668 <__any_on+0x4c>
 8006642:	429c      	cmp	r4, r3
 8006644:	d3fa      	bcc.n	800663c <__any_on+0x20>
 8006646:	f85d 4b04 	ldr.w	r4, [sp], #4
 800664a:	4770      	bx	lr
 800664c:	dd10      	ble.n	8006670 <__any_on+0x54>
 800664e:	f011 011f 	ands.w	r1, r1, #31
 8006652:	d00d      	beq.n	8006670 <__any_on+0x54>
 8006654:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
 8006658:	fa20 f301 	lsr.w	r3, r0, r1
 800665c:	fa03 f101 	lsl.w	r1, r3, r1
 8006660:	4281      	cmp	r1, r0
 8006662:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006666:	d0e2      	beq.n	800662e <__any_on+0x12>
 8006668:	2001      	movs	r0, #1
 800666a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800666e:	4770      	bx	lr
 8006670:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006674:	e7db      	b.n	800662e <__any_on+0x12>
 8006676:	2000      	movs	r0, #0
 8006678:	e7e5      	b.n	8006646 <__any_on+0x2a>
 800667a:	bf00      	nop

0800667c <_realloc_r>:
 800667c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006680:	460c      	mov	r4, r1
 8006682:	b083      	sub	sp, #12
 8006684:	4690      	mov	r8, r2
 8006686:	4681      	mov	r9, r0
 8006688:	2900      	cmp	r1, #0
 800668a:	f000 80e2 	beq.w	8006852 <_realloc_r+0x1d6>
 800668e:	f7ff fb85 	bl	8005d9c <__malloc_lock>
 8006692:	f108 060b 	add.w	r6, r8, #11
 8006696:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800669a:	2e16      	cmp	r6, #22
 800669c:	f023 0503 	bic.w	r5, r3, #3
 80066a0:	f1a4 0708 	sub.w	r7, r4, #8
 80066a4:	d84b      	bhi.n	800673e <_realloc_r+0xc2>
 80066a6:	2110      	movs	r1, #16
 80066a8:	460e      	mov	r6, r1
 80066aa:	45b0      	cmp	r8, r6
 80066ac:	d84c      	bhi.n	8006748 <_realloc_r+0xcc>
 80066ae:	428d      	cmp	r5, r1
 80066b0:	da78      	bge.n	80067a4 <_realloc_r+0x128>
 80066b2:	f8df b390 	ldr.w	fp, [pc, #912]	; 8006a44 <_realloc_r+0x3c8>
 80066b6:	f8db e008 	ldr.w	lr, [fp, #8]
 80066ba:	1978      	adds	r0, r7, r5
 80066bc:	4586      	cmp	lr, r0
 80066be:	f000 80ce 	beq.w	800685e <_realloc_r+0x1e2>
 80066c2:	6842      	ldr	r2, [r0, #4]
 80066c4:	f022 0c01 	bic.w	ip, r2, #1
 80066c8:	4484      	add	ip, r0
 80066ca:	f8dc c004 	ldr.w	ip, [ip, #4]
 80066ce:	f01c 0f01 	tst.w	ip, #1
 80066d2:	d07a      	beq.n	80067ca <_realloc_r+0x14e>
 80066d4:	2200      	movs	r2, #0
 80066d6:	4610      	mov	r0, r2
 80066d8:	07db      	lsls	r3, r3, #31
 80066da:	f100 8092 	bmi.w	8006802 <_realloc_r+0x186>
 80066de:	f854 3c08 	ldr.w	r3, [r4, #-8]
 80066e2:	ebc3 0a07 	rsb	sl, r3, r7
 80066e6:	f8da 3004 	ldr.w	r3, [sl, #4]
 80066ea:	f023 0303 	bic.w	r3, r3, #3
 80066ee:	442b      	add	r3, r5
 80066f0:	b388      	cbz	r0, 8006756 <_realloc_r+0xda>
 80066f2:	4570      	cmp	r0, lr
 80066f4:	f000 80ed 	beq.w	80068d2 <_realloc_r+0x256>
 80066f8:	eb02 0e03 	add.w	lr, r2, r3
 80066fc:	458e      	cmp	lr, r1
 80066fe:	db2a      	blt.n	8006756 <_realloc_r+0xda>
 8006700:	68c3      	ldr	r3, [r0, #12]
 8006702:	6882      	ldr	r2, [r0, #8]
 8006704:	4657      	mov	r7, sl
 8006706:	60d3      	str	r3, [r2, #12]
 8006708:	609a      	str	r2, [r3, #8]
 800670a:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800670e:	f8da 300c 	ldr.w	r3, [sl, #12]
 8006712:	60cb      	str	r3, [r1, #12]
 8006714:	1f2a      	subs	r2, r5, #4
 8006716:	2a24      	cmp	r2, #36	; 0x24
 8006718:	6099      	str	r1, [r3, #8]
 800671a:	f200 8126 	bhi.w	800696a <_realloc_r+0x2ee>
 800671e:	2a13      	cmp	r2, #19
 8006720:	f240 80b3 	bls.w	800688a <_realloc_r+0x20e>
 8006724:	6823      	ldr	r3, [r4, #0]
 8006726:	f8ca 3008 	str.w	r3, [sl, #8]
 800672a:	6863      	ldr	r3, [r4, #4]
 800672c:	f8ca 300c 	str.w	r3, [sl, #12]
 8006730:	2a1b      	cmp	r2, #27
 8006732:	f200 8130 	bhi.w	8006996 <_realloc_r+0x31a>
 8006736:	3408      	adds	r4, #8
 8006738:	f10a 0310 	add.w	r3, sl, #16
 800673c:	e0a6      	b.n	800688c <_realloc_r+0x210>
 800673e:	f026 0607 	bic.w	r6, r6, #7
 8006742:	2e00      	cmp	r6, #0
 8006744:	4631      	mov	r1, r6
 8006746:	dab0      	bge.n	80066aa <_realloc_r+0x2e>
 8006748:	230c      	movs	r3, #12
 800674a:	2000      	movs	r0, #0
 800674c:	f8c9 3000 	str.w	r3, [r9]
 8006750:	b003      	add	sp, #12
 8006752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006756:	428b      	cmp	r3, r1
 8006758:	db53      	blt.n	8006802 <_realloc_r+0x186>
 800675a:	4657      	mov	r7, sl
 800675c:	f8da 100c 	ldr.w	r1, [sl, #12]
 8006760:	f857 0f08 	ldr.w	r0, [r7, #8]!
 8006764:	1f2a      	subs	r2, r5, #4
 8006766:	2a24      	cmp	r2, #36	; 0x24
 8006768:	60c1      	str	r1, [r0, #12]
 800676a:	6088      	str	r0, [r1, #8]
 800676c:	f200 8109 	bhi.w	8006982 <_realloc_r+0x306>
 8006770:	2a13      	cmp	r2, #19
 8006772:	f240 8104 	bls.w	800697e <_realloc_r+0x302>
 8006776:	6821      	ldr	r1, [r4, #0]
 8006778:	f8ca 1008 	str.w	r1, [sl, #8]
 800677c:	6861      	ldr	r1, [r4, #4]
 800677e:	f8ca 100c 	str.w	r1, [sl, #12]
 8006782:	2a1b      	cmp	r2, #27
 8006784:	f200 811c 	bhi.w	80069c0 <_realloc_r+0x344>
 8006788:	3408      	adds	r4, #8
 800678a:	f10a 0210 	add.w	r2, sl, #16
 800678e:	6821      	ldr	r1, [r4, #0]
 8006790:	6011      	str	r1, [r2, #0]
 8006792:	6861      	ldr	r1, [r4, #4]
 8006794:	6051      	str	r1, [r2, #4]
 8006796:	68a1      	ldr	r1, [r4, #8]
 8006798:	6091      	str	r1, [r2, #8]
 800679a:	461d      	mov	r5, r3
 800679c:	f8da 3004 	ldr.w	r3, [sl, #4]
 80067a0:	463c      	mov	r4, r7
 80067a2:	4657      	mov	r7, sl
 80067a4:	1baa      	subs	r2, r5, r6
 80067a6:	2a0f      	cmp	r2, #15
 80067a8:	f003 0301 	and.w	r3, r3, #1
 80067ac:	d819      	bhi.n	80067e2 <_realloc_r+0x166>
 80067ae:	432b      	orrs	r3, r5
 80067b0:	443d      	add	r5, r7
 80067b2:	607b      	str	r3, [r7, #4]
 80067b4:	686b      	ldr	r3, [r5, #4]
 80067b6:	f043 0301 	orr.w	r3, r3, #1
 80067ba:	606b      	str	r3, [r5, #4]
 80067bc:	4648      	mov	r0, r9
 80067be:	f7ff faef 	bl	8005da0 <__malloc_unlock>
 80067c2:	4620      	mov	r0, r4
 80067c4:	b003      	add	sp, #12
 80067c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067ca:	f022 0203 	bic.w	r2, r2, #3
 80067ce:	eb02 0c05 	add.w	ip, r2, r5
 80067d2:	458c      	cmp	ip, r1
 80067d4:	db80      	blt.n	80066d8 <_realloc_r+0x5c>
 80067d6:	68c2      	ldr	r2, [r0, #12]
 80067d8:	6881      	ldr	r1, [r0, #8]
 80067da:	4665      	mov	r5, ip
 80067dc:	60ca      	str	r2, [r1, #12]
 80067de:	6091      	str	r1, [r2, #8]
 80067e0:	e7e0      	b.n	80067a4 <_realloc_r+0x128>
 80067e2:	19b9      	adds	r1, r7, r6
 80067e4:	f042 0001 	orr.w	r0, r2, #1
 80067e8:	431e      	orrs	r6, r3
 80067ea:	440a      	add	r2, r1
 80067ec:	607e      	str	r6, [r7, #4]
 80067ee:	6048      	str	r0, [r1, #4]
 80067f0:	6853      	ldr	r3, [r2, #4]
 80067f2:	f043 0301 	orr.w	r3, r3, #1
 80067f6:	3108      	adds	r1, #8
 80067f8:	6053      	str	r3, [r2, #4]
 80067fa:	4648      	mov	r0, r9
 80067fc:	f7fe fc34 	bl	8005068 <_free_r>
 8006800:	e7dc      	b.n	80067bc <_realloc_r+0x140>
 8006802:	4641      	mov	r1, r8
 8006804:	4648      	mov	r0, r9
 8006806:	f7fe ff85 	bl	8005714 <_malloc_r>
 800680a:	4680      	mov	r8, r0
 800680c:	b1d0      	cbz	r0, 8006844 <_realloc_r+0x1c8>
 800680e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8006812:	f023 0201 	bic.w	r2, r3, #1
 8006816:	443a      	add	r2, r7
 8006818:	f1a0 0108 	sub.w	r1, r0, #8
 800681c:	4291      	cmp	r1, r2
 800681e:	f000 809e 	beq.w	800695e <_realloc_r+0x2e2>
 8006822:	1f2a      	subs	r2, r5, #4
 8006824:	2a24      	cmp	r2, #36	; 0x24
 8006826:	d850      	bhi.n	80068ca <_realloc_r+0x24e>
 8006828:	2a13      	cmp	r2, #19
 800682a:	d823      	bhi.n	8006874 <_realloc_r+0x1f8>
 800682c:	4603      	mov	r3, r0
 800682e:	4622      	mov	r2, r4
 8006830:	6811      	ldr	r1, [r2, #0]
 8006832:	6019      	str	r1, [r3, #0]
 8006834:	6851      	ldr	r1, [r2, #4]
 8006836:	6059      	str	r1, [r3, #4]
 8006838:	6892      	ldr	r2, [r2, #8]
 800683a:	609a      	str	r2, [r3, #8]
 800683c:	4621      	mov	r1, r4
 800683e:	4648      	mov	r0, r9
 8006840:	f7fe fc12 	bl	8005068 <_free_r>
 8006844:	4648      	mov	r0, r9
 8006846:	f7ff faab 	bl	8005da0 <__malloc_unlock>
 800684a:	4640      	mov	r0, r8
 800684c:	b003      	add	sp, #12
 800684e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006852:	4611      	mov	r1, r2
 8006854:	b003      	add	sp, #12
 8006856:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800685a:	f7fe bf5b 	b.w	8005714 <_malloc_r>
 800685e:	f8de 2004 	ldr.w	r2, [lr, #4]
 8006862:	f022 0203 	bic.w	r2, r2, #3
 8006866:	1950      	adds	r0, r2, r5
 8006868:	f106 0c10 	add.w	ip, r6, #16
 800686c:	4560      	cmp	r0, ip
 800686e:	da19      	bge.n	80068a4 <_realloc_r+0x228>
 8006870:	4670      	mov	r0, lr
 8006872:	e731      	b.n	80066d8 <_realloc_r+0x5c>
 8006874:	6823      	ldr	r3, [r4, #0]
 8006876:	6003      	str	r3, [r0, #0]
 8006878:	6863      	ldr	r3, [r4, #4]
 800687a:	6043      	str	r3, [r0, #4]
 800687c:	2a1b      	cmp	r2, #27
 800687e:	d863      	bhi.n	8006948 <_realloc_r+0x2cc>
 8006880:	f100 0308 	add.w	r3, r0, #8
 8006884:	f104 0208 	add.w	r2, r4, #8
 8006888:	e7d2      	b.n	8006830 <_realloc_r+0x1b4>
 800688a:	463b      	mov	r3, r7
 800688c:	6822      	ldr	r2, [r4, #0]
 800688e:	601a      	str	r2, [r3, #0]
 8006890:	6862      	ldr	r2, [r4, #4]
 8006892:	605a      	str	r2, [r3, #4]
 8006894:	68a2      	ldr	r2, [r4, #8]
 8006896:	609a      	str	r2, [r3, #8]
 8006898:	463c      	mov	r4, r7
 800689a:	4675      	mov	r5, lr
 800689c:	f8da 3004 	ldr.w	r3, [sl, #4]
 80068a0:	4657      	mov	r7, sl
 80068a2:	e77f      	b.n	80067a4 <_realloc_r+0x128>
 80068a4:	4437      	add	r7, r6
 80068a6:	1b83      	subs	r3, r0, r6
 80068a8:	f043 0301 	orr.w	r3, r3, #1
 80068ac:	f8cb 7008 	str.w	r7, [fp, #8]
 80068b0:	607b      	str	r3, [r7, #4]
 80068b2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80068b6:	f003 0301 	and.w	r3, r3, #1
 80068ba:	431e      	orrs	r6, r3
 80068bc:	4648      	mov	r0, r9
 80068be:	f844 6c04 	str.w	r6, [r4, #-4]
 80068c2:	f7ff fa6d 	bl	8005da0 <__malloc_unlock>
 80068c6:	4620      	mov	r0, r4
 80068c8:	e77c      	b.n	80067c4 <_realloc_r+0x148>
 80068ca:	4621      	mov	r1, r4
 80068cc:	f7ff fa06 	bl	8005cdc <memmove>
 80068d0:	e7b4      	b.n	800683c <_realloc_r+0x1c0>
 80068d2:	eb02 0c03 	add.w	ip, r2, r3
 80068d6:	f106 0210 	add.w	r2, r6, #16
 80068da:	4594      	cmp	ip, r2
 80068dc:	f6ff af3b 	blt.w	8006756 <_realloc_r+0xda>
 80068e0:	4657      	mov	r7, sl
 80068e2:	f8da 300c 	ldr.w	r3, [sl, #12]
 80068e6:	f857 1f08 	ldr.w	r1, [r7, #8]!
 80068ea:	1f2a      	subs	r2, r5, #4
 80068ec:	2a24      	cmp	r2, #36	; 0x24
 80068ee:	60cb      	str	r3, [r1, #12]
 80068f0:	6099      	str	r1, [r3, #8]
 80068f2:	f200 8087 	bhi.w	8006a04 <_realloc_r+0x388>
 80068f6:	2a13      	cmp	r2, #19
 80068f8:	d978      	bls.n	80069ec <_realloc_r+0x370>
 80068fa:	6823      	ldr	r3, [r4, #0]
 80068fc:	f8ca 3008 	str.w	r3, [sl, #8]
 8006900:	6863      	ldr	r3, [r4, #4]
 8006902:	f8ca 300c 	str.w	r3, [sl, #12]
 8006906:	2a1b      	cmp	r2, #27
 8006908:	f200 8085 	bhi.w	8006a16 <_realloc_r+0x39a>
 800690c:	3408      	adds	r4, #8
 800690e:	f10a 0310 	add.w	r3, sl, #16
 8006912:	6822      	ldr	r2, [r4, #0]
 8006914:	601a      	str	r2, [r3, #0]
 8006916:	6862      	ldr	r2, [r4, #4]
 8006918:	605a      	str	r2, [r3, #4]
 800691a:	68a2      	ldr	r2, [r4, #8]
 800691c:	609a      	str	r2, [r3, #8]
 800691e:	eb0a 0306 	add.w	r3, sl, r6
 8006922:	ebc6 020c 	rsb	r2, r6, ip
 8006926:	f042 0201 	orr.w	r2, r2, #1
 800692a:	f8cb 3008 	str.w	r3, [fp, #8]
 800692e:	605a      	str	r2, [r3, #4]
 8006930:	f8da 3004 	ldr.w	r3, [sl, #4]
 8006934:	f003 0301 	and.w	r3, r3, #1
 8006938:	431e      	orrs	r6, r3
 800693a:	4648      	mov	r0, r9
 800693c:	f8ca 6004 	str.w	r6, [sl, #4]
 8006940:	f7ff fa2e 	bl	8005da0 <__malloc_unlock>
 8006944:	4638      	mov	r0, r7
 8006946:	e73d      	b.n	80067c4 <_realloc_r+0x148>
 8006948:	68a3      	ldr	r3, [r4, #8]
 800694a:	6083      	str	r3, [r0, #8]
 800694c:	68e3      	ldr	r3, [r4, #12]
 800694e:	60c3      	str	r3, [r0, #12]
 8006950:	2a24      	cmp	r2, #36	; 0x24
 8006952:	d02c      	beq.n	80069ae <_realloc_r+0x332>
 8006954:	f100 0310 	add.w	r3, r0, #16
 8006958:	f104 0210 	add.w	r2, r4, #16
 800695c:	e768      	b.n	8006830 <_realloc_r+0x1b4>
 800695e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8006962:	f022 0203 	bic.w	r2, r2, #3
 8006966:	4415      	add	r5, r2
 8006968:	e71c      	b.n	80067a4 <_realloc_r+0x128>
 800696a:	4621      	mov	r1, r4
 800696c:	4638      	mov	r0, r7
 800696e:	4675      	mov	r5, lr
 8006970:	463c      	mov	r4, r7
 8006972:	f7ff f9b3 	bl	8005cdc <memmove>
 8006976:	4657      	mov	r7, sl
 8006978:	f8da 3004 	ldr.w	r3, [sl, #4]
 800697c:	e712      	b.n	80067a4 <_realloc_r+0x128>
 800697e:	463a      	mov	r2, r7
 8006980:	e705      	b.n	800678e <_realloc_r+0x112>
 8006982:	4621      	mov	r1, r4
 8006984:	4638      	mov	r0, r7
 8006986:	461d      	mov	r5, r3
 8006988:	463c      	mov	r4, r7
 800698a:	f7ff f9a7 	bl	8005cdc <memmove>
 800698e:	4657      	mov	r7, sl
 8006990:	f8da 3004 	ldr.w	r3, [sl, #4]
 8006994:	e706      	b.n	80067a4 <_realloc_r+0x128>
 8006996:	68a3      	ldr	r3, [r4, #8]
 8006998:	f8ca 3010 	str.w	r3, [sl, #16]
 800699c:	68e3      	ldr	r3, [r4, #12]
 800699e:	f8ca 3014 	str.w	r3, [sl, #20]
 80069a2:	2a24      	cmp	r2, #36	; 0x24
 80069a4:	d018      	beq.n	80069d8 <_realloc_r+0x35c>
 80069a6:	3410      	adds	r4, #16
 80069a8:	f10a 0318 	add.w	r3, sl, #24
 80069ac:	e76e      	b.n	800688c <_realloc_r+0x210>
 80069ae:	6923      	ldr	r3, [r4, #16]
 80069b0:	6103      	str	r3, [r0, #16]
 80069b2:	6963      	ldr	r3, [r4, #20]
 80069b4:	6143      	str	r3, [r0, #20]
 80069b6:	f104 0218 	add.w	r2, r4, #24
 80069ba:	f100 0318 	add.w	r3, r0, #24
 80069be:	e737      	b.n	8006830 <_realloc_r+0x1b4>
 80069c0:	68a1      	ldr	r1, [r4, #8]
 80069c2:	f8ca 1010 	str.w	r1, [sl, #16]
 80069c6:	68e1      	ldr	r1, [r4, #12]
 80069c8:	f8ca 1014 	str.w	r1, [sl, #20]
 80069cc:	2a24      	cmp	r2, #36	; 0x24
 80069ce:	d00f      	beq.n	80069f0 <_realloc_r+0x374>
 80069d0:	3410      	adds	r4, #16
 80069d2:	f10a 0218 	add.w	r2, sl, #24
 80069d6:	e6da      	b.n	800678e <_realloc_r+0x112>
 80069d8:	6923      	ldr	r3, [r4, #16]
 80069da:	f8ca 3018 	str.w	r3, [sl, #24]
 80069de:	6963      	ldr	r3, [r4, #20]
 80069e0:	f8ca 301c 	str.w	r3, [sl, #28]
 80069e4:	3418      	adds	r4, #24
 80069e6:	f10a 0320 	add.w	r3, sl, #32
 80069ea:	e74f      	b.n	800688c <_realloc_r+0x210>
 80069ec:	463b      	mov	r3, r7
 80069ee:	e790      	b.n	8006912 <_realloc_r+0x296>
 80069f0:	6922      	ldr	r2, [r4, #16]
 80069f2:	f8ca 2018 	str.w	r2, [sl, #24]
 80069f6:	6962      	ldr	r2, [r4, #20]
 80069f8:	f8ca 201c 	str.w	r2, [sl, #28]
 80069fc:	3418      	adds	r4, #24
 80069fe:	f10a 0220 	add.w	r2, sl, #32
 8006a02:	e6c4      	b.n	800678e <_realloc_r+0x112>
 8006a04:	4621      	mov	r1, r4
 8006a06:	4638      	mov	r0, r7
 8006a08:	f8cd c004 	str.w	ip, [sp, #4]
 8006a0c:	f7ff f966 	bl	8005cdc <memmove>
 8006a10:	f8dd c004 	ldr.w	ip, [sp, #4]
 8006a14:	e783      	b.n	800691e <_realloc_r+0x2a2>
 8006a16:	68a3      	ldr	r3, [r4, #8]
 8006a18:	f8ca 3010 	str.w	r3, [sl, #16]
 8006a1c:	68e3      	ldr	r3, [r4, #12]
 8006a1e:	f8ca 3014 	str.w	r3, [sl, #20]
 8006a22:	2a24      	cmp	r2, #36	; 0x24
 8006a24:	d003      	beq.n	8006a2e <_realloc_r+0x3b2>
 8006a26:	3410      	adds	r4, #16
 8006a28:	f10a 0318 	add.w	r3, sl, #24
 8006a2c:	e771      	b.n	8006912 <_realloc_r+0x296>
 8006a2e:	6923      	ldr	r3, [r4, #16]
 8006a30:	f8ca 3018 	str.w	r3, [sl, #24]
 8006a34:	6963      	ldr	r3, [r4, #20]
 8006a36:	f8ca 301c 	str.w	r3, [sl, #28]
 8006a3a:	3418      	adds	r4, #24
 8006a3c:	f10a 0320 	add.w	r3, sl, #32
 8006a40:	e767      	b.n	8006912 <_realloc_r+0x296>
 8006a42:	bf00      	nop
 8006a44:	20000518 	.word	0x20000518

08006a48 <__fpclassifyd>:
 8006a48:	ec53 2b10 	vmov	r2, r3, d0
 8006a4c:	f033 4100 	bics.w	r1, r3, #2147483648	; 0x80000000
 8006a50:	b410      	push	{r4}
 8006a52:	d008      	beq.n	8006a66 <__fpclassifyd+0x1e>
 8006a54:	480f      	ldr	r0, [pc, #60]	; (8006a94 <__fpclassifyd+0x4c>)
 8006a56:	f5a1 1480 	sub.w	r4, r1, #1048576	; 0x100000
 8006a5a:	4284      	cmp	r4, r0
 8006a5c:	d80a      	bhi.n	8006a74 <__fpclassifyd+0x2c>
 8006a5e:	2004      	movs	r0, #4
 8006a60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a64:	4770      	bx	lr
 8006a66:	2a00      	cmp	r2, #0
 8006a68:	bf0c      	ite	eq
 8006a6a:	2002      	moveq	r0, #2
 8006a6c:	2003      	movne	r0, #3
 8006a6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a72:	4770      	bx	lr
 8006a74:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8006a78:	d201      	bcs.n	8006a7e <__fpclassifyd+0x36>
 8006a7a:	2003      	movs	r0, #3
 8006a7c:	e7f7      	b.n	8006a6e <__fpclassifyd+0x26>
 8006a7e:	4806      	ldr	r0, [pc, #24]	; (8006a98 <__fpclassifyd+0x50>)
 8006a80:	4281      	cmp	r1, r0
 8006a82:	d001      	beq.n	8006a88 <__fpclassifyd+0x40>
 8006a84:	2000      	movs	r0, #0
 8006a86:	e7f2      	b.n	8006a6e <__fpclassifyd+0x26>
 8006a88:	f1d2 0001 	rsbs	r0, r2, #1
 8006a8c:	bf38      	it	cc
 8006a8e:	2000      	movcc	r0, #0
 8006a90:	e7ed      	b.n	8006a6e <__fpclassifyd+0x26>
 8006a92:	bf00      	nop
 8006a94:	7fdfffff 	.word	0x7fdfffff
 8006a98:	7ff00000 	.word	0x7ff00000

08006a9c <_sbrk_r>:
 8006a9c:	b538      	push	{r3, r4, r5, lr}
 8006a9e:	4c07      	ldr	r4, [pc, #28]	; (8006abc <_sbrk_r+0x20>)
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	4605      	mov	r5, r0
 8006aa4:	4608      	mov	r0, r1
 8006aa6:	6023      	str	r3, [r4, #0]
 8006aa8:	f7f9 fe8c 	bl	80007c4 <_sbrk>
 8006aac:	1c43      	adds	r3, r0, #1
 8006aae:	d000      	beq.n	8006ab2 <_sbrk_r+0x16>
 8006ab0:	bd38      	pop	{r3, r4, r5, pc}
 8006ab2:	6823      	ldr	r3, [r4, #0]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d0fb      	beq.n	8006ab0 <_sbrk_r+0x14>
 8006ab8:	602b      	str	r3, [r5, #0]
 8006aba:	bd38      	pop	{r3, r4, r5, pc}
 8006abc:	2000fd6c 	.word	0x2000fd6c

08006ac0 <__sread>:
 8006ac0:	b510      	push	{r4, lr}
 8006ac2:	460c      	mov	r4, r1
 8006ac4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ac8:	f001 f9a6 	bl	8007e18 <_read_r>
 8006acc:	2800      	cmp	r0, #0
 8006ace:	db03      	blt.n	8006ad8 <__sread+0x18>
 8006ad0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006ad2:	4403      	add	r3, r0
 8006ad4:	6523      	str	r3, [r4, #80]	; 0x50
 8006ad6:	bd10      	pop	{r4, pc}
 8006ad8:	89a3      	ldrh	r3, [r4, #12]
 8006ada:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ade:	81a3      	strh	r3, [r4, #12]
 8006ae0:	bd10      	pop	{r4, pc}
 8006ae2:	bf00      	nop

08006ae4 <__seofread>:
 8006ae4:	2000      	movs	r0, #0
 8006ae6:	4770      	bx	lr

08006ae8 <__swrite>:
 8006ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006aec:	460c      	mov	r4, r1
 8006aee:	8989      	ldrh	r1, [r1, #12]
 8006af0:	461d      	mov	r5, r3
 8006af2:	05cb      	lsls	r3, r1, #23
 8006af4:	4616      	mov	r6, r2
 8006af6:	4607      	mov	r7, r0
 8006af8:	d506      	bpl.n	8006b08 <__swrite+0x20>
 8006afa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006afe:	2200      	movs	r2, #0
 8006b00:	2302      	movs	r3, #2
 8006b02:	f001 f975 	bl	8007df0 <_lseek_r>
 8006b06:	89a1      	ldrh	r1, [r4, #12]
 8006b08:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8006b0c:	81a1      	strh	r1, [r4, #12]
 8006b0e:	4638      	mov	r0, r7
 8006b10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b14:	4632      	mov	r2, r6
 8006b16:	462b      	mov	r3, r5
 8006b18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b1c:	f000 bfde 	b.w	8007adc <_write_r>

08006b20 <__sseek>:
 8006b20:	b510      	push	{r4, lr}
 8006b22:	460c      	mov	r4, r1
 8006b24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b28:	f001 f962 	bl	8007df0 <_lseek_r>
 8006b2c:	1c42      	adds	r2, r0, #1
 8006b2e:	89a3      	ldrh	r3, [r4, #12]
 8006b30:	d004      	beq.n	8006b3c <__sseek+0x1c>
 8006b32:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006b36:	6520      	str	r0, [r4, #80]	; 0x50
 8006b38:	81a3      	strh	r3, [r4, #12]
 8006b3a:	bd10      	pop	{r4, pc}
 8006b3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b40:	81a3      	strh	r3, [r4, #12]
 8006b42:	bd10      	pop	{r4, pc}

08006b44 <__sclose>:
 8006b44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b48:	f001 b860 	b.w	8007c0c <_close_r>

08006b4c <strcmp>:
 8006b4c:	ea40 0c01 	orr.w	ip, r0, r1
 8006b50:	f01c 0f07 	tst.w	ip, #7
 8006b54:	d123      	bne.n	8006b9e <strcmp+0x52>
 8006b56:	f1bd 0d10 	subs.w	sp, sp, #16
 8006b5a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006b5e:	e9cd 6700 	strd	r6, r7, [sp]
 8006b62:	f06f 0600 	mvn.w	r6, #0
 8006b66:	f04f 0700 	mov.w	r7, #0
 8006b6a:	bf00      	nop
 8006b6c:	e8f0 2302 	ldrd	r2, r3, [r0], #8
 8006b70:	e8f1 4502 	ldrd	r4, r5, [r1], #8
 8006b74:	42a2      	cmp	r2, r4
 8006b76:	fa82 fc46 	uadd8	ip, r2, r6
 8006b7a:	faa7 fc86 	sel	ip, r7, r6
 8006b7e:	bf08      	it	eq
 8006b80:	f1bc 0f00 	cmpeq.w	ip, #0
 8006b84:	f040 80d7 	bne.w	8006d36 <strcmp+0x1ea>
 8006b88:	42ab      	cmp	r3, r5
 8006b8a:	fa83 fc46 	uadd8	ip, r3, r6
 8006b8e:	faa7 fc86 	sel	ip, r7, r6
 8006b92:	bf08      	it	eq
 8006b94:	f1bc 0f00 	cmpeq.w	ip, #0
 8006b98:	f040 80ca 	bne.w	8006d30 <strcmp+0x1e4>
 8006b9c:	e7e6      	b.n	8006b6c <strcmp+0x20>
 8006b9e:	f010 0c03 	ands.w	ip, r0, #3
 8006ba2:	d021      	beq.n	8006be8 <strcmp+0x9c>
 8006ba4:	f020 0003 	bic.w	r0, r0, #3
 8006ba8:	f850 2b04 	ldr.w	r2, [r0], #4
 8006bac:	ea5f 7ccc 	movs.w	ip, ip, lsl #31
 8006bb0:	d008      	beq.n	8006bc4 <strcmp+0x78>
 8006bb2:	d20f      	bcs.n	8006bd4 <strcmp+0x88>
 8006bb4:	f811 cb01 	ldrb.w	ip, [r1], #1
 8006bb8:	fa5f f392 	uxtb.w	r3, r2, ror #8
 8006bbc:	ebb3 0c0c 	subs.w	ip, r3, ip
 8006bc0:	d110      	bne.n	8006be4 <strcmp+0x98>
 8006bc2:	b17b      	cbz	r3, 8006be4 <strcmp+0x98>
 8006bc4:	f811 cb01 	ldrb.w	ip, [r1], #1
 8006bc8:	fa5f f3a2 	uxtb.w	r3, r2, ror #16
 8006bcc:	ebb3 0c0c 	subs.w	ip, r3, ip
 8006bd0:	d108      	bne.n	8006be4 <strcmp+0x98>
 8006bd2:	b13b      	cbz	r3, 8006be4 <strcmp+0x98>
 8006bd4:	f811 cb01 	ldrb.w	ip, [r1], #1
 8006bd8:	fa5f f3b2 	uxtb.w	r3, r2, ror #24
 8006bdc:	ebb3 0c0c 	subs.w	ip, r3, ip
 8006be0:	d100      	bne.n	8006be4 <strcmp+0x98>
 8006be2:	b90b      	cbnz	r3, 8006be8 <strcmp+0x9c>
 8006be4:	4660      	mov	r0, ip
 8006be6:	4770      	bx	lr
 8006be8:	f1bd 0d10 	subs.w	sp, sp, #16
 8006bec:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006bf0:	e9cd 6700 	strd	r6, r7, [sp]
 8006bf4:	f06f 0600 	mvn.w	r6, #0
 8006bf8:	f04f 0700 	mov.w	r7, #0
 8006bfc:	f011 0c03 	ands.w	ip, r1, #3
 8006c00:	d12d      	bne.n	8006c5e <strcmp+0x112>
 8006c02:	f010 0f04 	tst.w	r0, #4
 8006c06:	d00d      	beq.n	8006c24 <strcmp+0xd8>
 8006c08:	f850 2b04 	ldr.w	r2, [r0], #4
 8006c0c:	f851 4b04 	ldr.w	r4, [r1], #4
 8006c10:	42a2      	cmp	r2, r4
 8006c12:	fa82 fc46 	uadd8	ip, r2, r6
 8006c16:	faa7 fc86 	sel	ip, r7, r6
 8006c1a:	bf08      	it	eq
 8006c1c:	f1bc 0f00 	cmpeq.w	ip, #0
 8006c20:	f040 8089 	bne.w	8006d36 <strcmp+0x1ea>
 8006c24:	f011 0f04 	tst.w	r1, #4
 8006c28:	d09f      	beq.n	8006b6a <strcmp+0x1e>
 8006c2a:	f851 5b04 	ldr.w	r5, [r1], #4
 8006c2e:	bf00      	nop
 8006c30:	e8f0 2302 	ldrd	r2, r3, [r0], #8
 8006c34:	42aa      	cmp	r2, r5
 8006c36:	fa82 fc46 	uadd8	ip, r2, r6
 8006c3a:	faa7 fc86 	sel	ip, r7, r6
 8006c3e:	bf08      	it	eq
 8006c40:	f1bc 0f00 	cmpeq.w	ip, #0
 8006c44:	d171      	bne.n	8006d2a <strcmp+0x1de>
 8006c46:	e8f1 4502 	ldrd	r4, r5, [r1], #8
 8006c4a:	42a3      	cmp	r3, r4
 8006c4c:	fa83 fc46 	uadd8	ip, r3, r6
 8006c50:	faa7 fc86 	sel	ip, r7, r6
 8006c54:	bf08      	it	eq
 8006c56:	f1bc 0f00 	cmpeq.w	ip, #0
 8006c5a:	d163      	bne.n	8006d24 <strcmp+0x1d8>
 8006c5c:	e7e8      	b.n	8006c30 <strcmp+0xe4>
 8006c5e:	f021 0103 	bic.w	r1, r1, #3
 8006c62:	f1bc 0f02 	cmp.w	ip, #2
 8006c66:	d01e      	beq.n	8006ca6 <strcmp+0x15a>
 8006c68:	da3b      	bge.n	8006ce2 <strcmp+0x196>
 8006c6a:	f851 5b04 	ldr.w	r5, [r1], #4
 8006c6e:	bf00      	nop
 8006c70:	f850 3b04 	ldr.w	r3, [r0], #4
 8006c74:	ea4f 2515 	mov.w	r5, r5, lsr #8
 8006c78:	fa83 fc46 	uadd8	ip, r3, r6
 8006c7c:	faa7 fc86 	sel	ip, r7, r6
 8006c80:	ebb7 2f0c 	cmp.w	r7, ip, lsl #8
 8006c84:	ea03 2216 	and.w	r2, r3, r6, lsr #8
 8006c88:	bf08      	it	eq
 8006c8a:	42aa      	cmpeq	r2, r5
 8006c8c:	d14d      	bne.n	8006d2a <strcmp+0x1de>
 8006c8e:	f851 5b04 	ldr.w	r5, [r1], #4
 8006c92:	f1bc 0f00 	cmp.w	ip, #0
 8006c96:	ea82 0303 	eor.w	r3, r2, r3
 8006c9a:	ea4f 6205 	mov.w	r2, r5, lsl #24
 8006c9e:	bf08      	it	eq
 8006ca0:	4293      	cmpeq	r3, r2
 8006ca2:	d13c      	bne.n	8006d1e <strcmp+0x1d2>
 8006ca4:	e7e4      	b.n	8006c70 <strcmp+0x124>
 8006ca6:	f851 5b04 	ldr.w	r5, [r1], #4
 8006caa:	bf00      	nop
 8006cac:	f850 3b04 	ldr.w	r3, [r0], #4
 8006cb0:	ea4f 4515 	mov.w	r5, r5, lsr #16
 8006cb4:	fa83 fc46 	uadd8	ip, r3, r6
 8006cb8:	faa7 fc86 	sel	ip, r7, r6
 8006cbc:	ebb7 4f0c 	cmp.w	r7, ip, lsl #16
 8006cc0:	ea03 4216 	and.w	r2, r3, r6, lsr #16
 8006cc4:	bf08      	it	eq
 8006cc6:	42aa      	cmpeq	r2, r5
 8006cc8:	d12f      	bne.n	8006d2a <strcmp+0x1de>
 8006cca:	f851 5b04 	ldr.w	r5, [r1], #4
 8006cce:	f1bc 0f00 	cmp.w	ip, #0
 8006cd2:	ea82 0303 	eor.w	r3, r2, r3
 8006cd6:	ea4f 4205 	mov.w	r2, r5, lsl #16
 8006cda:	bf08      	it	eq
 8006cdc:	4293      	cmpeq	r3, r2
 8006cde:	d11e      	bne.n	8006d1e <strcmp+0x1d2>
 8006ce0:	e7e4      	b.n	8006cac <strcmp+0x160>
 8006ce2:	f851 5b04 	ldr.w	r5, [r1], #4
 8006ce6:	bf00      	nop
 8006ce8:	f850 3b04 	ldr.w	r3, [r0], #4
 8006cec:	ea4f 6515 	mov.w	r5, r5, lsr #24
 8006cf0:	fa83 fc46 	uadd8	ip, r3, r6
 8006cf4:	faa7 fc86 	sel	ip, r7, r6
 8006cf8:	ebb7 6f0c 	cmp.w	r7, ip, lsl #24
 8006cfc:	ea03 6216 	and.w	r2, r3, r6, lsr #24
 8006d00:	bf08      	it	eq
 8006d02:	42aa      	cmpeq	r2, r5
 8006d04:	d111      	bne.n	8006d2a <strcmp+0x1de>
 8006d06:	f851 5b04 	ldr.w	r5, [r1], #4
 8006d0a:	f1bc 0f00 	cmp.w	ip, #0
 8006d0e:	ea82 0303 	eor.w	r3, r2, r3
 8006d12:	ea4f 2205 	mov.w	r2, r5, lsl #8
 8006d16:	bf08      	it	eq
 8006d18:	4293      	cmpeq	r3, r2
 8006d1a:	d100      	bne.n	8006d1e <strcmp+0x1d2>
 8006d1c:	e7e4      	b.n	8006ce8 <strcmp+0x19c>
 8006d1e:	ba19      	rev	r1, r3
 8006d20:	ba12      	rev	r2, r2
 8006d22:	e00a      	b.n	8006d3a <strcmp+0x1ee>
 8006d24:	ba19      	rev	r1, r3
 8006d26:	ba22      	rev	r2, r4
 8006d28:	e007      	b.n	8006d3a <strcmp+0x1ee>
 8006d2a:	ba11      	rev	r1, r2
 8006d2c:	ba2a      	rev	r2, r5
 8006d2e:	e004      	b.n	8006d3a <strcmp+0x1ee>
 8006d30:	ba19      	rev	r1, r3
 8006d32:	ba2a      	rev	r2, r5
 8006d34:	e001      	b.n	8006d3a <strcmp+0x1ee>
 8006d36:	ba11      	rev	r1, r2
 8006d38:	ba22      	rev	r2, r4
 8006d3a:	fa9c f08c 	rev.w	r0, ip
 8006d3e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006d42:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006d46:	f11d 0d10 	adds.w	sp, sp, #16
 8006d4a:	b138      	cbz	r0, 8006d5c <strcmp+0x210>
 8006d4c:	fab0 f080 	clz	r0, r0
 8006d50:	f1c0 0018 	rsb	r0, r0, #24
 8006d54:	fa21 f100 	lsr.w	r1, r1, r0
 8006d58:	fa22 f200 	lsr.w	r2, r2, r0
 8006d5c:	2001      	movs	r0, #1
 8006d5e:	4291      	cmp	r1, r2
 8006d60:	bf98      	it	ls
 8006d62:	4180      	sbcls	r0, r0
 8006d64:	4770      	bx	lr
 8006d66:	bf00      	nop

08006d68 <__sprint_r.part.0>:
 8006d68:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8006d6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d6e:	049c      	lsls	r4, r3, #18
 8006d70:	460e      	mov	r6, r1
 8006d72:	4680      	mov	r8, r0
 8006d74:	4691      	mov	r9, r2
 8006d76:	d52a      	bpl.n	8006dce <__sprint_r.part.0+0x66>
 8006d78:	6893      	ldr	r3, [r2, #8]
 8006d7a:	6812      	ldr	r2, [r2, #0]
 8006d7c:	f102 0a08 	add.w	sl, r2, #8
 8006d80:	b31b      	cbz	r3, 8006dca <__sprint_r.part.0+0x62>
 8006d82:	e91a 00a0 	ldmdb	sl, {r5, r7}
 8006d86:	08bf      	lsrs	r7, r7, #2
 8006d88:	d017      	beq.n	8006dba <__sprint_r.part.0+0x52>
 8006d8a:	3d04      	subs	r5, #4
 8006d8c:	2400      	movs	r4, #0
 8006d8e:	e001      	b.n	8006d94 <__sprint_r.part.0+0x2c>
 8006d90:	42a7      	cmp	r7, r4
 8006d92:	d010      	beq.n	8006db6 <__sprint_r.part.0+0x4e>
 8006d94:	4640      	mov	r0, r8
 8006d96:	f855 1f04 	ldr.w	r1, [r5, #4]!
 8006d9a:	4632      	mov	r2, r6
 8006d9c:	f000 ff90 	bl	8007cc0 <_fputwc_r>
 8006da0:	1c43      	adds	r3, r0, #1
 8006da2:	f104 0401 	add.w	r4, r4, #1
 8006da6:	d1f3      	bne.n	8006d90 <__sprint_r.part.0+0x28>
 8006da8:	2300      	movs	r3, #0
 8006daa:	f8c9 3008 	str.w	r3, [r9, #8]
 8006dae:	f8c9 3004 	str.w	r3, [r9, #4]
 8006db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006db6:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8006dba:	eba3 0387 	sub.w	r3, r3, r7, lsl #2
 8006dbe:	f8c9 3008 	str.w	r3, [r9, #8]
 8006dc2:	f10a 0a08 	add.w	sl, sl, #8
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d1db      	bne.n	8006d82 <__sprint_r.part.0+0x1a>
 8006dca:	2000      	movs	r0, #0
 8006dcc:	e7ec      	b.n	8006da8 <__sprint_r.part.0+0x40>
 8006dce:	f7fe fa19 	bl	8005204 <__sfvwrite_r>
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	f8c9 3008 	str.w	r3, [r9, #8]
 8006dd8:	f8c9 3004 	str.w	r3, [r9, #4]
 8006ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006de0 <__sprint_r>:
 8006de0:	6893      	ldr	r3, [r2, #8]
 8006de2:	b410      	push	{r4}
 8006de4:	b11b      	cbz	r3, 8006dee <__sprint_r+0xe>
 8006de6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006dea:	f7ff bfbd 	b.w	8006d68 <__sprint_r.part.0>
 8006dee:	4618      	mov	r0, r3
 8006df0:	6053      	str	r3, [r2, #4]
 8006df2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <_vfiprintf_r>:
 8006df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dfc:	b0b1      	sub	sp, #196	; 0xc4
 8006dfe:	461c      	mov	r4, r3
 8006e00:	9102      	str	r1, [sp, #8]
 8006e02:	4690      	mov	r8, r2
 8006e04:	9308      	str	r3, [sp, #32]
 8006e06:	9006      	str	r0, [sp, #24]
 8006e08:	b118      	cbz	r0, 8006e12 <_vfiprintf_r+0x1a>
 8006e0a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	f000 80e8 	beq.w	8006fe2 <_vfiprintf_r+0x1ea>
 8006e12:	9d02      	ldr	r5, [sp, #8]
 8006e14:	89ab      	ldrh	r3, [r5, #12]
 8006e16:	b29a      	uxth	r2, r3
 8006e18:	0490      	lsls	r0, r2, #18
 8006e1a:	d407      	bmi.n	8006e2c <_vfiprintf_r+0x34>
 8006e1c:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 8006e1e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006e22:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8006e26:	81ab      	strh	r3, [r5, #12]
 8006e28:	b29a      	uxth	r2, r3
 8006e2a:	6669      	str	r1, [r5, #100]	; 0x64
 8006e2c:	0711      	lsls	r1, r2, #28
 8006e2e:	f140 80b7 	bpl.w	8006fa0 <_vfiprintf_r+0x1a8>
 8006e32:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006e36:	f8db 3010 	ldr.w	r3, [fp, #16]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	f000 80b0 	beq.w	8006fa0 <_vfiprintf_r+0x1a8>
 8006e40:	f002 021a 	and.w	r2, r2, #26
 8006e44:	2a0a      	cmp	r2, #10
 8006e46:	f000 80b7 	beq.w	8006fb8 <_vfiprintf_r+0x1c0>
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	f10d 0980 	add.w	r9, sp, #128	; 0x80
 8006e50:	930a      	str	r3, [sp, #40]	; 0x28
 8006e52:	9315      	str	r3, [sp, #84]	; 0x54
 8006e54:	9314      	str	r3, [sp, #80]	; 0x50
 8006e56:	9309      	str	r3, [sp, #36]	; 0x24
 8006e58:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8006e5c:	464e      	mov	r6, r9
 8006e5e:	f898 3000 	ldrb.w	r3, [r8]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	f000 84c4 	beq.w	80077f0 <_vfiprintf_r+0x9f8>
 8006e68:	2b25      	cmp	r3, #37	; 0x25
 8006e6a:	f000 84c1 	beq.w	80077f0 <_vfiprintf_r+0x9f8>
 8006e6e:	f108 0201 	add.w	r2, r8, #1
 8006e72:	e001      	b.n	8006e78 <_vfiprintf_r+0x80>
 8006e74:	2b25      	cmp	r3, #37	; 0x25
 8006e76:	d004      	beq.n	8006e82 <_vfiprintf_r+0x8a>
 8006e78:	4614      	mov	r4, r2
 8006e7a:	3201      	adds	r2, #1
 8006e7c:	7823      	ldrb	r3, [r4, #0]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d1f8      	bne.n	8006e74 <_vfiprintf_r+0x7c>
 8006e82:	ebc8 0504 	rsb	r5, r8, r4
 8006e86:	b195      	cbz	r5, 8006eae <_vfiprintf_r+0xb6>
 8006e88:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006e8a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006e8c:	f8c6 8000 	str.w	r8, [r6]
 8006e90:	3301      	adds	r3, #1
 8006e92:	442a      	add	r2, r5
 8006e94:	2b07      	cmp	r3, #7
 8006e96:	6075      	str	r5, [r6, #4]
 8006e98:	9215      	str	r2, [sp, #84]	; 0x54
 8006e9a:	9314      	str	r3, [sp, #80]	; 0x50
 8006e9c:	dd7b      	ble.n	8006f96 <_vfiprintf_r+0x19e>
 8006e9e:	2a00      	cmp	r2, #0
 8006ea0:	f040 84d4 	bne.w	800784c <_vfiprintf_r+0xa54>
 8006ea4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ea6:	9214      	str	r2, [sp, #80]	; 0x50
 8006ea8:	4428      	add	r0, r5
 8006eaa:	464e      	mov	r6, r9
 8006eac:	9009      	str	r0, [sp, #36]	; 0x24
 8006eae:	7823      	ldrb	r3, [r4, #0]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	f000 83e9 	beq.w	8007688 <_vfiprintf_r+0x890>
 8006eb6:	2100      	movs	r1, #0
 8006eb8:	f04f 0200 	mov.w	r2, #0
 8006ebc:	f04f 3cff 	mov.w	ip, #4294967295
 8006ec0:	7863      	ldrb	r3, [r4, #1]
 8006ec2:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
 8006ec6:	9104      	str	r1, [sp, #16]
 8006ec8:	468a      	mov	sl, r1
 8006eca:	f104 0801 	add.w	r8, r4, #1
 8006ece:	4608      	mov	r0, r1
 8006ed0:	4665      	mov	r5, ip
 8006ed2:	f108 0801 	add.w	r8, r8, #1
 8006ed6:	f1a3 0220 	sub.w	r2, r3, #32
 8006eda:	2a58      	cmp	r2, #88	; 0x58
 8006edc:	f200 82d5 	bhi.w	800748a <_vfiprintf_r+0x692>
 8006ee0:	e8df f012 	tbh	[pc, r2, lsl #1]
 8006ee4:	02d302c7 	.word	0x02d302c7
 8006ee8:	02ce02d3 	.word	0x02ce02d3
 8006eec:	02d302d3 	.word	0x02d302d3
 8006ef0:	02d302d3 	.word	0x02d302d3
 8006ef4:	02d302d3 	.word	0x02d302d3
 8006ef8:	028b027e 	.word	0x028b027e
 8006efc:	008402d3 	.word	0x008402d3
 8006f00:	02d3028f 	.word	0x02d3028f
 8006f04:	0194012b 	.word	0x0194012b
 8006f08:	01940194 	.word	0x01940194
 8006f0c:	01940194 	.word	0x01940194
 8006f10:	01940194 	.word	0x01940194
 8006f14:	01940194 	.word	0x01940194
 8006f18:	02d302d3 	.word	0x02d302d3
 8006f1c:	02d302d3 	.word	0x02d302d3
 8006f20:	02d302d3 	.word	0x02d302d3
 8006f24:	02d302d3 	.word	0x02d302d3
 8006f28:	02d302d3 	.word	0x02d302d3
 8006f2c:	02d30130 	.word	0x02d30130
 8006f30:	02d302d3 	.word	0x02d302d3
 8006f34:	02d302d3 	.word	0x02d302d3
 8006f38:	02d302d3 	.word	0x02d302d3
 8006f3c:	02d302d3 	.word	0x02d302d3
 8006f40:	017902d3 	.word	0x017902d3
 8006f44:	02d302d3 	.word	0x02d302d3
 8006f48:	02d302d3 	.word	0x02d302d3
 8006f4c:	01a202d3 	.word	0x01a202d3
 8006f50:	02d302d3 	.word	0x02d302d3
 8006f54:	02d301bd 	.word	0x02d301bd
 8006f58:	02d302d3 	.word	0x02d302d3
 8006f5c:	02d302d3 	.word	0x02d302d3
 8006f60:	02d302d3 	.word	0x02d302d3
 8006f64:	02d302d3 	.word	0x02d302d3
 8006f68:	01e202d3 	.word	0x01e202d3
 8006f6c:	02d301f8 	.word	0x02d301f8
 8006f70:	02d302d3 	.word	0x02d302d3
 8006f74:	01f80214 	.word	0x01f80214
 8006f78:	02d302d3 	.word	0x02d302d3
 8006f7c:	02d30219 	.word	0x02d30219
 8006f80:	00890226 	.word	0x00890226
 8006f84:	02790264 	.word	0x02790264
 8006f88:	023802d3 	.word	0x023802d3
 8006f8c:	011902d3 	.word	0x011902d3
 8006f90:	02d302d3 	.word	0x02d302d3
 8006f94:	02ab      	.short	0x02ab
 8006f96:	3608      	adds	r6, #8
 8006f98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f9a:	4428      	add	r0, r5
 8006f9c:	9009      	str	r0, [sp, #36]	; 0x24
 8006f9e:	e786      	b.n	8006eae <_vfiprintf_r+0xb6>
 8006fa0:	9806      	ldr	r0, [sp, #24]
 8006fa2:	9902      	ldr	r1, [sp, #8]
 8006fa4:	f7fc fd70 	bl	8003a88 <__swsetup_r>
 8006fa8:	b9b0      	cbnz	r0, 8006fd8 <_vfiprintf_r+0x1e0>
 8006faa:	9d02      	ldr	r5, [sp, #8]
 8006fac:	89aa      	ldrh	r2, [r5, #12]
 8006fae:	f002 021a 	and.w	r2, r2, #26
 8006fb2:	2a0a      	cmp	r2, #10
 8006fb4:	f47f af49 	bne.w	8006e4a <_vfiprintf_r+0x52>
 8006fb8:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006fbc:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	f6ff af42 	blt.w	8006e4a <_vfiprintf_r+0x52>
 8006fc6:	9806      	ldr	r0, [sp, #24]
 8006fc8:	4659      	mov	r1, fp
 8006fca:	4642      	mov	r2, r8
 8006fcc:	4623      	mov	r3, r4
 8006fce:	f000 fd49 	bl	8007a64 <__sbprintf>
 8006fd2:	b031      	add	sp, #196	; 0xc4
 8006fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8006fdc:	b031      	add	sp, #196	; 0xc4
 8006fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fe2:	f7fd feff 	bl	8004de4 <__sinit>
 8006fe6:	e714      	b.n	8006e12 <_vfiprintf_r+0x1a>
 8006fe8:	4240      	negs	r0, r0
 8006fea:	9308      	str	r3, [sp, #32]
 8006fec:	f04a 0a04 	orr.w	sl, sl, #4
 8006ff0:	f898 3000 	ldrb.w	r3, [r8]
 8006ff4:	e76d      	b.n	8006ed2 <_vfiprintf_r+0xda>
 8006ff6:	f01a 0320 	ands.w	r3, sl, #32
 8006ffa:	9004      	str	r0, [sp, #16]
 8006ffc:	46ac      	mov	ip, r5
 8006ffe:	f000 80f2 	beq.w	80071e6 <_vfiprintf_r+0x3ee>
 8007002:	f8dd b020 	ldr.w	fp, [sp, #32]
 8007006:	f10b 0307 	add.w	r3, fp, #7
 800700a:	f023 0307 	bic.w	r3, r3, #7
 800700e:	f103 0408 	add.w	r4, r3, #8
 8007012:	9408      	str	r4, [sp, #32]
 8007014:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007018:	2300      	movs	r3, #0
 800701a:	f04f 0000 	mov.w	r0, #0
 800701e:	2100      	movs	r1, #0
 8007020:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
 8007024:	f8cd c014 	str.w	ip, [sp, #20]
 8007028:	9107      	str	r1, [sp, #28]
 800702a:	f1bc 0f00 	cmp.w	ip, #0
 800702e:	bfa8      	it	ge
 8007030:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
 8007034:	ea54 0205 	orrs.w	r2, r4, r5
 8007038:	f040 80ad 	bne.w	8007196 <_vfiprintf_r+0x39e>
 800703c:	f1bc 0f00 	cmp.w	ip, #0
 8007040:	f040 80a9 	bne.w	8007196 <_vfiprintf_r+0x39e>
 8007044:	2b00      	cmp	r3, #0
 8007046:	f040 83bc 	bne.w	80077c2 <_vfiprintf_r+0x9ca>
 800704a:	f01a 0f01 	tst.w	sl, #1
 800704e:	f000 83b8 	beq.w	80077c2 <_vfiprintf_r+0x9ca>
 8007052:	af30      	add	r7, sp, #192	; 0xc0
 8007054:	2330      	movs	r3, #48	; 0x30
 8007056:	f807 3d41 	strb.w	r3, [r7, #-65]!
 800705a:	ebc7 0409 	rsb	r4, r7, r9
 800705e:	9405      	str	r4, [sp, #20]
 8007060:	f8dd b014 	ldr.w	fp, [sp, #20]
 8007064:	9c07      	ldr	r4, [sp, #28]
 8007066:	45e3      	cmp	fp, ip
 8007068:	bfb8      	it	lt
 800706a:	46e3      	movlt	fp, ip
 800706c:	f8cd b00c 	str.w	fp, [sp, #12]
 8007070:	b11c      	cbz	r4, 800707a <_vfiprintf_r+0x282>
 8007072:	f10b 0b01 	add.w	fp, fp, #1
 8007076:	f8cd b00c 	str.w	fp, [sp, #12]
 800707a:	f01a 0502 	ands.w	r5, sl, #2
 800707e:	9507      	str	r5, [sp, #28]
 8007080:	d005      	beq.n	800708e <_vfiprintf_r+0x296>
 8007082:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8007086:	f10b 0b02 	add.w	fp, fp, #2
 800708a:	f8cd b00c 	str.w	fp, [sp, #12]
 800708e:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 8007092:	930b      	str	r3, [sp, #44]	; 0x2c
 8007094:	f040 8217 	bne.w	80074c6 <_vfiprintf_r+0x6ce>
 8007098:	9d04      	ldr	r5, [sp, #16]
 800709a:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800709e:	ebcb 0405 	rsb	r4, fp, r5
 80070a2:	2c00      	cmp	r4, #0
 80070a4:	f340 820f 	ble.w	80074c6 <_vfiprintf_r+0x6ce>
 80070a8:	2c10      	cmp	r4, #16
 80070aa:	f340 8488 	ble.w	80079be <_vfiprintf_r+0xbc6>
 80070ae:	4dbd      	ldr	r5, [pc, #756]	; (80073a4 <_vfiprintf_r+0x5ac>)
 80070b0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80070b2:	9814      	ldr	r0, [sp, #80]	; 0x50
 80070b4:	462b      	mov	r3, r5
 80070b6:	f04f 0b10 	mov.w	fp, #16
 80070ba:	4625      	mov	r5, r4
 80070bc:	4664      	mov	r4, ip
 80070be:	46b4      	mov	ip, r6
 80070c0:	461e      	mov	r6, r3
 80070c2:	e006      	b.n	80070d2 <_vfiprintf_r+0x2da>
 80070c4:	1c83      	adds	r3, r0, #2
 80070c6:	f10c 0c08 	add.w	ip, ip, #8
 80070ca:	4608      	mov	r0, r1
 80070cc:	3d10      	subs	r5, #16
 80070ce:	2d10      	cmp	r5, #16
 80070d0:	dd11      	ble.n	80070f6 <_vfiprintf_r+0x2fe>
 80070d2:	1c41      	adds	r1, r0, #1
 80070d4:	3210      	adds	r2, #16
 80070d6:	2907      	cmp	r1, #7
 80070d8:	9215      	str	r2, [sp, #84]	; 0x54
 80070da:	e88c 0840 	stmia.w	ip, {r6, fp}
 80070de:	9114      	str	r1, [sp, #80]	; 0x50
 80070e0:	ddf0      	ble.n	80070c4 <_vfiprintf_r+0x2cc>
 80070e2:	2a00      	cmp	r2, #0
 80070e4:	f040 81e2 	bne.w	80074ac <_vfiprintf_r+0x6b4>
 80070e8:	3d10      	subs	r5, #16
 80070ea:	2d10      	cmp	r5, #16
 80070ec:	f04f 0301 	mov.w	r3, #1
 80070f0:	4610      	mov	r0, r2
 80070f2:	46cc      	mov	ip, r9
 80070f4:	dced      	bgt.n	80070d2 <_vfiprintf_r+0x2da>
 80070f6:	4631      	mov	r1, r6
 80070f8:	4666      	mov	r6, ip
 80070fa:	46a4      	mov	ip, r4
 80070fc:	462c      	mov	r4, r5
 80070fe:	460d      	mov	r5, r1
 8007100:	4422      	add	r2, r4
 8007102:	2b07      	cmp	r3, #7
 8007104:	9215      	str	r2, [sp, #84]	; 0x54
 8007106:	6035      	str	r5, [r6, #0]
 8007108:	6074      	str	r4, [r6, #4]
 800710a:	9314      	str	r3, [sp, #80]	; 0x50
 800710c:	f300 8369 	bgt.w	80077e2 <_vfiprintf_r+0x9ea>
 8007110:	3608      	adds	r6, #8
 8007112:	1c59      	adds	r1, r3, #1
 8007114:	e1da      	b.n	80074cc <_vfiprintf_r+0x6d4>
 8007116:	f01a 0f20 	tst.w	sl, #32
 800711a:	9004      	str	r0, [sp, #16]
 800711c:	46ac      	mov	ip, r5
 800711e:	f000 808b 	beq.w	8007238 <_vfiprintf_r+0x440>
 8007122:	9d08      	ldr	r5, [sp, #32]
 8007124:	1deb      	adds	r3, r5, #7
 8007126:	f023 0307 	bic.w	r3, r3, #7
 800712a:	f103 0b08 	add.w	fp, r3, #8
 800712e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007132:	f8cd b020 	str.w	fp, [sp, #32]
 8007136:	2301      	movs	r3, #1
 8007138:	e76f      	b.n	800701a <_vfiprintf_r+0x222>
 800713a:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 800713e:	f898 3000 	ldrb.w	r3, [r8]
 8007142:	e6c6      	b.n	8006ed2 <_vfiprintf_r+0xda>
 8007144:	f04a 0a10 	orr.w	sl, sl, #16
 8007148:	f01a 0f20 	tst.w	sl, #32
 800714c:	9004      	str	r0, [sp, #16]
 800714e:	46ac      	mov	ip, r5
 8007150:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
 8007154:	f000 80c6 	beq.w	80072e4 <_vfiprintf_r+0x4ec>
 8007158:	9c08      	ldr	r4, [sp, #32]
 800715a:	1de1      	adds	r1, r4, #7
 800715c:	f021 0107 	bic.w	r1, r1, #7
 8007160:	e9d1 2300 	ldrd	r2, r3, [r1]
 8007164:	3108      	adds	r1, #8
 8007166:	9108      	str	r1, [sp, #32]
 8007168:	4614      	mov	r4, r2
 800716a:	461d      	mov	r5, r3
 800716c:	2a00      	cmp	r2, #0
 800716e:	f173 0000 	sbcs.w	r0, r3, #0
 8007172:	f2c0 83cd 	blt.w	8007910 <_vfiprintf_r+0xb18>
 8007176:	f1bc 0f00 	cmp.w	ip, #0
 800717a:	f89d 1047 	ldrb.w	r1, [sp, #71]	; 0x47
 800717e:	9107      	str	r1, [sp, #28]
 8007180:	bfa8      	it	ge
 8007182:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
 8007186:	ea54 0205 	orrs.w	r2, r4, r5
 800718a:	f8cd c014 	str.w	ip, [sp, #20]
 800718e:	f04f 0301 	mov.w	r3, #1
 8007192:	f43f af53 	beq.w	800703c <_vfiprintf_r+0x244>
 8007196:	2b01      	cmp	r3, #1
 8007198:	f000 8315 	beq.w	80077c6 <_vfiprintf_r+0x9ce>
 800719c:	2b02      	cmp	r3, #2
 800719e:	f10d 037f 	add.w	r3, sp, #127	; 0x7f
 80071a2:	f040 8248 	bne.w	8007636 <_vfiprintf_r+0x83e>
 80071a6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80071a8:	4619      	mov	r1, r3
 80071aa:	0922      	lsrs	r2, r4, #4
 80071ac:	f004 040f 	and.w	r4, r4, #15
 80071b0:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
 80071b4:	460f      	mov	r7, r1
 80071b6:	092b      	lsrs	r3, r5, #4
 80071b8:	5d01      	ldrb	r1, [r0, r4]
 80071ba:	7039      	strb	r1, [r7, #0]
 80071bc:	ea52 0b03 	orrs.w	fp, r2, r3
 80071c0:	4614      	mov	r4, r2
 80071c2:	461d      	mov	r5, r3
 80071c4:	f107 31ff 	add.w	r1, r7, #4294967295
 80071c8:	d1ef      	bne.n	80071aa <_vfiprintf_r+0x3b2>
 80071ca:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80071ce:	ebc7 0309 	rsb	r3, r7, r9
 80071d2:	9305      	str	r3, [sp, #20]
 80071d4:	e744      	b.n	8007060 <_vfiprintf_r+0x268>
 80071d6:	f04a 0a10 	orr.w	sl, sl, #16
 80071da:	f01a 0320 	ands.w	r3, sl, #32
 80071de:	9004      	str	r0, [sp, #16]
 80071e0:	46ac      	mov	ip, r5
 80071e2:	f47f af0e 	bne.w	8007002 <_vfiprintf_r+0x20a>
 80071e6:	f01a 0210 	ands.w	r2, sl, #16
 80071ea:	f040 830f 	bne.w	800780c <_vfiprintf_r+0xa14>
 80071ee:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 80071f2:	f000 830b 	beq.w	800780c <_vfiprintf_r+0xa14>
 80071f6:	f8dd b020 	ldr.w	fp, [sp, #32]
 80071fa:	f8bb 4000 	ldrh.w	r4, [fp]
 80071fe:	f10b 0b04 	add.w	fp, fp, #4
 8007202:	4613      	mov	r3, r2
 8007204:	2500      	movs	r5, #0
 8007206:	f8cd b020 	str.w	fp, [sp, #32]
 800720a:	e706      	b.n	800701a <_vfiprintf_r+0x222>
 800720c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8007210:	2000      	movs	r0, #0
 8007212:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007216:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800721a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 800721e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8007222:	2a09      	cmp	r2, #9
 8007224:	d9f5      	bls.n	8007212 <_vfiprintf_r+0x41a>
 8007226:	e656      	b.n	8006ed6 <_vfiprintf_r+0xde>
 8007228:	f04a 0a10 	orr.w	sl, sl, #16
 800722c:	f01a 0f20 	tst.w	sl, #32
 8007230:	9004      	str	r0, [sp, #16]
 8007232:	46ac      	mov	ip, r5
 8007234:	f47f af75 	bne.w	8007122 <_vfiprintf_r+0x32a>
 8007238:	f01a 0f10 	tst.w	sl, #16
 800723c:	f040 82ec 	bne.w	8007818 <_vfiprintf_r+0xa20>
 8007240:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8007244:	f000 82e8 	beq.w	8007818 <_vfiprintf_r+0xa20>
 8007248:	f8dd b020 	ldr.w	fp, [sp, #32]
 800724c:	f8bb 4000 	ldrh.w	r4, [fp]
 8007250:	f10b 0b04 	add.w	fp, fp, #4
 8007254:	2500      	movs	r5, #0
 8007256:	2301      	movs	r3, #1
 8007258:	f8cd b020 	str.w	fp, [sp, #32]
 800725c:	e6dd      	b.n	800701a <_vfiprintf_r+0x222>
 800725e:	46ac      	mov	ip, r5
 8007260:	f01a 0f20 	tst.w	sl, #32
 8007264:	4d50      	ldr	r5, [pc, #320]	; (80073a8 <_vfiprintf_r+0x5b0>)
 8007266:	9004      	str	r0, [sp, #16]
 8007268:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
 800726c:	950a      	str	r5, [sp, #40]	; 0x28
 800726e:	f000 80ee 	beq.w	800744e <_vfiprintf_r+0x656>
 8007272:	9d08      	ldr	r5, [sp, #32]
 8007274:	1dea      	adds	r2, r5, #7
 8007276:	f022 0207 	bic.w	r2, r2, #7
 800727a:	e9d2 4500 	ldrd	r4, r5, [r2]
 800727e:	f102 0b08 	add.w	fp, r2, #8
 8007282:	f8cd b020 	str.w	fp, [sp, #32]
 8007286:	f01a 0f01 	tst.w	sl, #1
 800728a:	f000 82a8 	beq.w	80077de <_vfiprintf_r+0x9e6>
 800728e:	ea54 0b05 	orrs.w	fp, r4, r5
 8007292:	f000 82a4 	beq.w	80077de <_vfiprintf_r+0x9e6>
 8007296:	2230      	movs	r2, #48	; 0x30
 8007298:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
 800729c:	f04a 0a02 	orr.w	sl, sl, #2
 80072a0:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
 80072a4:	2302      	movs	r3, #2
 80072a6:	e6b8      	b.n	800701a <_vfiprintf_r+0x222>
 80072a8:	9b08      	ldr	r3, [sp, #32]
 80072aa:	f8dd b020 	ldr.w	fp, [sp, #32]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	9004      	str	r0, [sp, #16]
 80072b2:	2401      	movs	r4, #1
 80072b4:	f04f 0500 	mov.w	r5, #0
 80072b8:	f10b 0b04 	add.w	fp, fp, #4
 80072bc:	9403      	str	r4, [sp, #12]
 80072be:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
 80072c2:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
 80072c6:	f8cd b020 	str.w	fp, [sp, #32]
 80072ca:	9405      	str	r4, [sp, #20]
 80072cc:	af16      	add	r7, sp, #88	; 0x58
 80072ce:	f04f 0c00 	mov.w	ip, #0
 80072d2:	e6d2      	b.n	800707a <_vfiprintf_r+0x282>
 80072d4:	f01a 0f20 	tst.w	sl, #32
 80072d8:	9004      	str	r0, [sp, #16]
 80072da:	46ac      	mov	ip, r5
 80072dc:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
 80072e0:	f47f af3a 	bne.w	8007158 <_vfiprintf_r+0x360>
 80072e4:	f01a 0f10 	tst.w	sl, #16
 80072e8:	f040 82a4 	bne.w	8007834 <_vfiprintf_r+0xa3c>
 80072ec:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80072f0:	f000 82a0 	beq.w	8007834 <_vfiprintf_r+0xa3c>
 80072f4:	f8dd b020 	ldr.w	fp, [sp, #32]
 80072f8:	f9bb 4000 	ldrsh.w	r4, [fp]
 80072fc:	f10b 0b04 	add.w	fp, fp, #4
 8007300:	17e5      	asrs	r5, r4, #31
 8007302:	4622      	mov	r2, r4
 8007304:	462b      	mov	r3, r5
 8007306:	f8cd b020 	str.w	fp, [sp, #32]
 800730a:	e72f      	b.n	800716c <_vfiprintf_r+0x374>
 800730c:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
 8007310:	f898 3000 	ldrb.w	r3, [r8]
 8007314:	e5dd      	b.n	8006ed2 <_vfiprintf_r+0xda>
 8007316:	f898 3000 	ldrb.w	r3, [r8]
 800731a:	4642      	mov	r2, r8
 800731c:	2b6c      	cmp	r3, #108	; 0x6c
 800731e:	bf03      	ittte	eq
 8007320:	f108 0801 	addeq.w	r8, r8, #1
 8007324:	f04a 0a20 	orreq.w	sl, sl, #32
 8007328:	7853      	ldrbeq	r3, [r2, #1]
 800732a:	f04a 0a10 	orrne.w	sl, sl, #16
 800732e:	e5d0      	b.n	8006ed2 <_vfiprintf_r+0xda>
 8007330:	f01a 0f20 	tst.w	sl, #32
 8007334:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
 8007338:	f000 82f8 	beq.w	800792c <_vfiprintf_r+0xb34>
 800733c:	9c08      	ldr	r4, [sp, #32]
 800733e:	6821      	ldr	r1, [r4, #0]
 8007340:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8007342:	17e5      	asrs	r5, r4, #31
 8007344:	462b      	mov	r3, r5
 8007346:	9d08      	ldr	r5, [sp, #32]
 8007348:	4622      	mov	r2, r4
 800734a:	3504      	adds	r5, #4
 800734c:	9508      	str	r5, [sp, #32]
 800734e:	e9c1 2300 	strd	r2, r3, [r1]
 8007352:	e584      	b.n	8006e5e <_vfiprintf_r+0x66>
 8007354:	9c08      	ldr	r4, [sp, #32]
 8007356:	9004      	str	r0, [sp, #16]
 8007358:	6827      	ldr	r7, [r4, #0]
 800735a:	46ac      	mov	ip, r5
 800735c:	f04f 0500 	mov.w	r5, #0
 8007360:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
 8007364:	3404      	adds	r4, #4
 8007366:	2f00      	cmp	r7, #0
 8007368:	f000 8334 	beq.w	80079d4 <_vfiprintf_r+0xbdc>
 800736c:	f1bc 0f00 	cmp.w	ip, #0
 8007370:	4638      	mov	r0, r7
 8007372:	f2c0 8308 	blt.w	8007986 <_vfiprintf_r+0xb8e>
 8007376:	4662      	mov	r2, ip
 8007378:	2100      	movs	r1, #0
 800737a:	f8cd c004 	str.w	ip, [sp, #4]
 800737e:	f7fe fc65 	bl	8005c4c <memchr>
 8007382:	f8dd c004 	ldr.w	ip, [sp, #4]
 8007386:	2800      	cmp	r0, #0
 8007388:	f000 833c 	beq.w	8007a04 <_vfiprintf_r+0xc0c>
 800738c:	1bc0      	subs	r0, r0, r7
 800738e:	4560      	cmp	r0, ip
 8007390:	bfa8      	it	ge
 8007392:	4660      	movge	r0, ip
 8007394:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
 8007398:	9005      	str	r0, [sp, #20]
 800739a:	9408      	str	r4, [sp, #32]
 800739c:	9507      	str	r5, [sp, #28]
 800739e:	f04f 0c00 	mov.w	ip, #0
 80073a2:	e65d      	b.n	8007060 <_vfiprintf_r+0x268>
 80073a4:	08009328 	.word	0x08009328
 80073a8:	08009190 	.word	0x08009190
 80073ac:	9a08      	ldr	r2, [sp, #32]
 80073ae:	9004      	str	r0, [sp, #16]
 80073b0:	2330      	movs	r3, #48	; 0x30
 80073b2:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
 80073b6:	f102 0b04 	add.w	fp, r2, #4
 80073ba:	2378      	movs	r3, #120	; 0x78
 80073bc:	48af      	ldr	r0, [pc, #700]	; (800767c <_vfiprintf_r+0x884>)
 80073be:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
 80073c2:	46ac      	mov	ip, r5
 80073c4:	6814      	ldr	r4, [r2, #0]
 80073c6:	f8cd b020 	str.w	fp, [sp, #32]
 80073ca:	f04a 0a02 	orr.w	sl, sl, #2
 80073ce:	2500      	movs	r5, #0
 80073d0:	900a      	str	r0, [sp, #40]	; 0x28
 80073d2:	2302      	movs	r3, #2
 80073d4:	e621      	b.n	800701a <_vfiprintf_r+0x222>
 80073d6:	f04a 0a20 	orr.w	sl, sl, #32
 80073da:	f898 3000 	ldrb.w	r3, [r8]
 80073de:	e578      	b.n	8006ed2 <_vfiprintf_r+0xda>
 80073e0:	f8dd b020 	ldr.w	fp, [sp, #32]
 80073e4:	f8db 0000 	ldr.w	r0, [fp]
 80073e8:	2800      	cmp	r0, #0
 80073ea:	f10b 0304 	add.w	r3, fp, #4
 80073ee:	f6ff adfb 	blt.w	8006fe8 <_vfiprintf_r+0x1f0>
 80073f2:	9308      	str	r3, [sp, #32]
 80073f4:	f898 3000 	ldrb.w	r3, [r8]
 80073f8:	e56b      	b.n	8006ed2 <_vfiprintf_r+0xda>
 80073fa:	f898 3000 	ldrb.w	r3, [r8]
 80073fe:	212b      	movs	r1, #43	; 0x2b
 8007400:	e567      	b.n	8006ed2 <_vfiprintf_r+0xda>
 8007402:	f898 3000 	ldrb.w	r3, [r8]
 8007406:	2b2a      	cmp	r3, #42	; 0x2a
 8007408:	f108 0401 	add.w	r4, r8, #1
 800740c:	f000 8309 	beq.w	8007a22 <_vfiprintf_r+0xc2a>
 8007410:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8007414:	2a09      	cmp	r2, #9
 8007416:	bf98      	it	ls
 8007418:	2500      	movls	r5, #0
 800741a:	f200 82fe 	bhi.w	8007a1a <_vfiprintf_r+0xc22>
 800741e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007422:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8007426:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 800742a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800742e:	2a09      	cmp	r2, #9
 8007430:	d9f5      	bls.n	800741e <_vfiprintf_r+0x626>
 8007432:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 8007436:	46a0      	mov	r8, r4
 8007438:	e54d      	b.n	8006ed6 <_vfiprintf_r+0xde>
 800743a:	4c90      	ldr	r4, [pc, #576]	; (800767c <_vfiprintf_r+0x884>)
 800743c:	9004      	str	r0, [sp, #16]
 800743e:	f01a 0f20 	tst.w	sl, #32
 8007442:	46ac      	mov	ip, r5
 8007444:	940a      	str	r4, [sp, #40]	; 0x28
 8007446:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
 800744a:	f47f af12 	bne.w	8007272 <_vfiprintf_r+0x47a>
 800744e:	f01a 0f10 	tst.w	sl, #16
 8007452:	f040 81e9 	bne.w	8007828 <_vfiprintf_r+0xa30>
 8007456:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800745a:	f000 81e5 	beq.w	8007828 <_vfiprintf_r+0xa30>
 800745e:	f8dd b020 	ldr.w	fp, [sp, #32]
 8007462:	f8bb 4000 	ldrh.w	r4, [fp]
 8007466:	f10b 0b04 	add.w	fp, fp, #4
 800746a:	2500      	movs	r5, #0
 800746c:	f8cd b020 	str.w	fp, [sp, #32]
 8007470:	e709      	b.n	8007286 <_vfiprintf_r+0x48e>
 8007472:	f898 3000 	ldrb.w	r3, [r8]
 8007476:	2900      	cmp	r1, #0
 8007478:	f47f ad2b 	bne.w	8006ed2 <_vfiprintf_r+0xda>
 800747c:	2120      	movs	r1, #32
 800747e:	e528      	b.n	8006ed2 <_vfiprintf_r+0xda>
 8007480:	f04a 0a01 	orr.w	sl, sl, #1
 8007484:	f898 3000 	ldrb.w	r3, [r8]
 8007488:	e523      	b.n	8006ed2 <_vfiprintf_r+0xda>
 800748a:	9004      	str	r0, [sp, #16]
 800748c:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
 8007490:	2b00      	cmp	r3, #0
 8007492:	f000 80f9 	beq.w	8007688 <_vfiprintf_r+0x890>
 8007496:	2501      	movs	r5, #1
 8007498:	f04f 0b00 	mov.w	fp, #0
 800749c:	9503      	str	r5, [sp, #12]
 800749e:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
 80074a2:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
 80074a6:	9505      	str	r5, [sp, #20]
 80074a8:	af16      	add	r7, sp, #88	; 0x58
 80074aa:	e710      	b.n	80072ce <_vfiprintf_r+0x4d6>
 80074ac:	9806      	ldr	r0, [sp, #24]
 80074ae:	9902      	ldr	r1, [sp, #8]
 80074b0:	aa13      	add	r2, sp, #76	; 0x4c
 80074b2:	f7ff fc59 	bl	8006d68 <__sprint_r.part.0>
 80074b6:	2800      	cmp	r0, #0
 80074b8:	f040 80ed 	bne.w	8007696 <_vfiprintf_r+0x89e>
 80074bc:	9814      	ldr	r0, [sp, #80]	; 0x50
 80074be:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80074c0:	1c43      	adds	r3, r0, #1
 80074c2:	46cc      	mov	ip, r9
 80074c4:	e602      	b.n	80070cc <_vfiprintf_r+0x2d4>
 80074c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80074c8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80074ca:	1c59      	adds	r1, r3, #1
 80074cc:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
 80074d0:	b168      	cbz	r0, 80074ee <_vfiprintf_r+0x6f6>
 80074d2:	3201      	adds	r2, #1
 80074d4:	f10d 0047 	add.w	r0, sp, #71	; 0x47
 80074d8:	2301      	movs	r3, #1
 80074da:	2907      	cmp	r1, #7
 80074dc:	9215      	str	r2, [sp, #84]	; 0x54
 80074de:	9114      	str	r1, [sp, #80]	; 0x50
 80074e0:	e886 0009 	stmia.w	r6, {r0, r3}
 80074e4:	f300 8160 	bgt.w	80077a8 <_vfiprintf_r+0x9b0>
 80074e8:	460b      	mov	r3, r1
 80074ea:	3608      	adds	r6, #8
 80074ec:	3101      	adds	r1, #1
 80074ee:	9c07      	ldr	r4, [sp, #28]
 80074f0:	b164      	cbz	r4, 800750c <_vfiprintf_r+0x714>
 80074f2:	3202      	adds	r2, #2
 80074f4:	a812      	add	r0, sp, #72	; 0x48
 80074f6:	2302      	movs	r3, #2
 80074f8:	2907      	cmp	r1, #7
 80074fa:	9215      	str	r2, [sp, #84]	; 0x54
 80074fc:	9114      	str	r1, [sp, #80]	; 0x50
 80074fe:	e886 0009 	stmia.w	r6, {r0, r3}
 8007502:	f300 8157 	bgt.w	80077b4 <_vfiprintf_r+0x9bc>
 8007506:	460b      	mov	r3, r1
 8007508:	3608      	adds	r6, #8
 800750a:	3101      	adds	r1, #1
 800750c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800750e:	2d80      	cmp	r5, #128	; 0x80
 8007510:	f000 8101 	beq.w	8007716 <_vfiprintf_r+0x91e>
 8007514:	9d05      	ldr	r5, [sp, #20]
 8007516:	ebc5 040c 	rsb	r4, r5, ip
 800751a:	2c00      	cmp	r4, #0
 800751c:	dd2f      	ble.n	800757e <_vfiprintf_r+0x786>
 800751e:	2c10      	cmp	r4, #16
 8007520:	4d57      	ldr	r5, [pc, #348]	; (8007680 <_vfiprintf_r+0x888>)
 8007522:	dd22      	ble.n	800756a <_vfiprintf_r+0x772>
 8007524:	4630      	mov	r0, r6
 8007526:	f04f 0b10 	mov.w	fp, #16
 800752a:	462e      	mov	r6, r5
 800752c:	4625      	mov	r5, r4
 800752e:	9c06      	ldr	r4, [sp, #24]
 8007530:	e006      	b.n	8007540 <_vfiprintf_r+0x748>
 8007532:	f103 0c02 	add.w	ip, r3, #2
 8007536:	3008      	adds	r0, #8
 8007538:	460b      	mov	r3, r1
 800753a:	3d10      	subs	r5, #16
 800753c:	2d10      	cmp	r5, #16
 800753e:	dd10      	ble.n	8007562 <_vfiprintf_r+0x76a>
 8007540:	1c59      	adds	r1, r3, #1
 8007542:	3210      	adds	r2, #16
 8007544:	2907      	cmp	r1, #7
 8007546:	9215      	str	r2, [sp, #84]	; 0x54
 8007548:	e880 0840 	stmia.w	r0, {r6, fp}
 800754c:	9114      	str	r1, [sp, #80]	; 0x50
 800754e:	ddf0      	ble.n	8007532 <_vfiprintf_r+0x73a>
 8007550:	2a00      	cmp	r2, #0
 8007552:	d163      	bne.n	800761c <_vfiprintf_r+0x824>
 8007554:	3d10      	subs	r5, #16
 8007556:	2d10      	cmp	r5, #16
 8007558:	f04f 0c01 	mov.w	ip, #1
 800755c:	4613      	mov	r3, r2
 800755e:	4648      	mov	r0, r9
 8007560:	dcee      	bgt.n	8007540 <_vfiprintf_r+0x748>
 8007562:	462c      	mov	r4, r5
 8007564:	4661      	mov	r1, ip
 8007566:	4635      	mov	r5, r6
 8007568:	4606      	mov	r6, r0
 800756a:	4422      	add	r2, r4
 800756c:	2907      	cmp	r1, #7
 800756e:	9215      	str	r2, [sp, #84]	; 0x54
 8007570:	6035      	str	r5, [r6, #0]
 8007572:	6074      	str	r4, [r6, #4]
 8007574:	9114      	str	r1, [sp, #80]	; 0x50
 8007576:	f300 80c1 	bgt.w	80076fc <_vfiprintf_r+0x904>
 800757a:	3608      	adds	r6, #8
 800757c:	3101      	adds	r1, #1
 800757e:	9d05      	ldr	r5, [sp, #20]
 8007580:	6037      	str	r7, [r6, #0]
 8007582:	442a      	add	r2, r5
 8007584:	2907      	cmp	r1, #7
 8007586:	9215      	str	r2, [sp, #84]	; 0x54
 8007588:	6075      	str	r5, [r6, #4]
 800758a:	9114      	str	r1, [sp, #80]	; 0x50
 800758c:	f340 80c1 	ble.w	8007712 <_vfiprintf_r+0x91a>
 8007590:	2a00      	cmp	r2, #0
 8007592:	f040 8130 	bne.w	80077f6 <_vfiprintf_r+0x9fe>
 8007596:	9214      	str	r2, [sp, #80]	; 0x50
 8007598:	464e      	mov	r6, r9
 800759a:	f01a 0f04 	tst.w	sl, #4
 800759e:	f000 808b 	beq.w	80076b8 <_vfiprintf_r+0x8c0>
 80075a2:	9d04      	ldr	r5, [sp, #16]
 80075a4:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80075a8:	ebcb 0405 	rsb	r4, fp, r5
 80075ac:	2c00      	cmp	r4, #0
 80075ae:	f340 8083 	ble.w	80076b8 <_vfiprintf_r+0x8c0>
 80075b2:	2c10      	cmp	r4, #16
 80075b4:	f340 8222 	ble.w	80079fc <_vfiprintf_r+0xc04>
 80075b8:	9914      	ldr	r1, [sp, #80]	; 0x50
 80075ba:	4d32      	ldr	r5, [pc, #200]	; (8007684 <_vfiprintf_r+0x88c>)
 80075bc:	f8dd a018 	ldr.w	sl, [sp, #24]
 80075c0:	f8dd b008 	ldr.w	fp, [sp, #8]
 80075c4:	2710      	movs	r7, #16
 80075c6:	e005      	b.n	80075d4 <_vfiprintf_r+0x7dc>
 80075c8:	1c88      	adds	r0, r1, #2
 80075ca:	3608      	adds	r6, #8
 80075cc:	4619      	mov	r1, r3
 80075ce:	3c10      	subs	r4, #16
 80075d0:	2c10      	cmp	r4, #16
 80075d2:	dd10      	ble.n	80075f6 <_vfiprintf_r+0x7fe>
 80075d4:	1c4b      	adds	r3, r1, #1
 80075d6:	3210      	adds	r2, #16
 80075d8:	2b07      	cmp	r3, #7
 80075da:	9215      	str	r2, [sp, #84]	; 0x54
 80075dc:	e886 00a0 	stmia.w	r6, {r5, r7}
 80075e0:	9314      	str	r3, [sp, #80]	; 0x50
 80075e2:	ddf1      	ble.n	80075c8 <_vfiprintf_r+0x7d0>
 80075e4:	2a00      	cmp	r2, #0
 80075e6:	d17d      	bne.n	80076e4 <_vfiprintf_r+0x8ec>
 80075e8:	3c10      	subs	r4, #16
 80075ea:	2c10      	cmp	r4, #16
 80075ec:	f04f 0001 	mov.w	r0, #1
 80075f0:	4611      	mov	r1, r2
 80075f2:	464e      	mov	r6, r9
 80075f4:	dcee      	bgt.n	80075d4 <_vfiprintf_r+0x7dc>
 80075f6:	4422      	add	r2, r4
 80075f8:	2807      	cmp	r0, #7
 80075fa:	9215      	str	r2, [sp, #84]	; 0x54
 80075fc:	6035      	str	r5, [r6, #0]
 80075fe:	6074      	str	r4, [r6, #4]
 8007600:	9014      	str	r0, [sp, #80]	; 0x50
 8007602:	dd59      	ble.n	80076b8 <_vfiprintf_r+0x8c0>
 8007604:	2a00      	cmp	r2, #0
 8007606:	d14f      	bne.n	80076a8 <_vfiprintf_r+0x8b0>
 8007608:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800760a:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800760e:	9d04      	ldr	r5, [sp, #16]
 8007610:	45ab      	cmp	fp, r5
 8007612:	bfac      	ite	ge
 8007614:	445c      	addge	r4, fp
 8007616:	1964      	addlt	r4, r4, r5
 8007618:	9409      	str	r4, [sp, #36]	; 0x24
 800761a:	e05e      	b.n	80076da <_vfiprintf_r+0x8e2>
 800761c:	4620      	mov	r0, r4
 800761e:	9902      	ldr	r1, [sp, #8]
 8007620:	aa13      	add	r2, sp, #76	; 0x4c
 8007622:	f7ff fba1 	bl	8006d68 <__sprint_r.part.0>
 8007626:	2800      	cmp	r0, #0
 8007628:	d135      	bne.n	8007696 <_vfiprintf_r+0x89e>
 800762a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800762c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800762e:	f103 0c01 	add.w	ip, r3, #1
 8007632:	4648      	mov	r0, r9
 8007634:	e781      	b.n	800753a <_vfiprintf_r+0x742>
 8007636:	08e0      	lsrs	r0, r4, #3
 8007638:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
 800763c:	f004 0207 	and.w	r2, r4, #7
 8007640:	08e9      	lsrs	r1, r5, #3
 8007642:	3230      	adds	r2, #48	; 0x30
 8007644:	ea50 0b01 	orrs.w	fp, r0, r1
 8007648:	461f      	mov	r7, r3
 800764a:	701a      	strb	r2, [r3, #0]
 800764c:	4604      	mov	r4, r0
 800764e:	460d      	mov	r5, r1
 8007650:	f103 33ff 	add.w	r3, r3, #4294967295
 8007654:	d1ef      	bne.n	8007636 <_vfiprintf_r+0x83e>
 8007656:	f01a 0f01 	tst.w	sl, #1
 800765a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800765e:	4639      	mov	r1, r7
 8007660:	f000 80b9 	beq.w	80077d6 <_vfiprintf_r+0x9de>
 8007664:	2a30      	cmp	r2, #48	; 0x30
 8007666:	f43f acf8 	beq.w	800705a <_vfiprintf_r+0x262>
 800766a:	461f      	mov	r7, r3
 800766c:	ebc7 0509 	rsb	r5, r7, r9
 8007670:	2330      	movs	r3, #48	; 0x30
 8007672:	9505      	str	r5, [sp, #20]
 8007674:	f801 3c01 	strb.w	r3, [r1, #-1]
 8007678:	e4f2      	b.n	8007060 <_vfiprintf_r+0x268>
 800767a:	bf00      	nop
 800767c:	080091a4 	.word	0x080091a4
 8007680:	08009318 	.word	0x08009318
 8007684:	08009328 	.word	0x08009328
 8007688:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800768a:	b123      	cbz	r3, 8007696 <_vfiprintf_r+0x89e>
 800768c:	9806      	ldr	r0, [sp, #24]
 800768e:	9902      	ldr	r1, [sp, #8]
 8007690:	aa13      	add	r2, sp, #76	; 0x4c
 8007692:	f7ff fb69 	bl	8006d68 <__sprint_r.part.0>
 8007696:	9c02      	ldr	r4, [sp, #8]
 8007698:	89a3      	ldrh	r3, [r4, #12]
 800769a:	065b      	lsls	r3, r3, #25
 800769c:	f53f ac9c 	bmi.w	8006fd8 <_vfiprintf_r+0x1e0>
 80076a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80076a2:	b031      	add	sp, #196	; 0xc4
 80076a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076a8:	9806      	ldr	r0, [sp, #24]
 80076aa:	9902      	ldr	r1, [sp, #8]
 80076ac:	aa13      	add	r2, sp, #76	; 0x4c
 80076ae:	f7ff fb5b 	bl	8006d68 <__sprint_r.part.0>
 80076b2:	2800      	cmp	r0, #0
 80076b4:	d1ef      	bne.n	8007696 <_vfiprintf_r+0x89e>
 80076b6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80076b8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80076ba:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80076be:	9d04      	ldr	r5, [sp, #16]
 80076c0:	45ab      	cmp	fp, r5
 80076c2:	bfac      	ite	ge
 80076c4:	445c      	addge	r4, fp
 80076c6:	1964      	addlt	r4, r4, r5
 80076c8:	9409      	str	r4, [sp, #36]	; 0x24
 80076ca:	b132      	cbz	r2, 80076da <_vfiprintf_r+0x8e2>
 80076cc:	9806      	ldr	r0, [sp, #24]
 80076ce:	9902      	ldr	r1, [sp, #8]
 80076d0:	aa13      	add	r2, sp, #76	; 0x4c
 80076d2:	f7ff fb49 	bl	8006d68 <__sprint_r.part.0>
 80076d6:	2800      	cmp	r0, #0
 80076d8:	d1dd      	bne.n	8007696 <_vfiprintf_r+0x89e>
 80076da:	2000      	movs	r0, #0
 80076dc:	9014      	str	r0, [sp, #80]	; 0x50
 80076de:	464e      	mov	r6, r9
 80076e0:	f7ff bbbd 	b.w	8006e5e <_vfiprintf_r+0x66>
 80076e4:	4650      	mov	r0, sl
 80076e6:	4659      	mov	r1, fp
 80076e8:	aa13      	add	r2, sp, #76	; 0x4c
 80076ea:	f7ff fb3d 	bl	8006d68 <__sprint_r.part.0>
 80076ee:	2800      	cmp	r0, #0
 80076f0:	d1d1      	bne.n	8007696 <_vfiprintf_r+0x89e>
 80076f2:	9914      	ldr	r1, [sp, #80]	; 0x50
 80076f4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80076f6:	1c48      	adds	r0, r1, #1
 80076f8:	464e      	mov	r6, r9
 80076fa:	e768      	b.n	80075ce <_vfiprintf_r+0x7d6>
 80076fc:	2a00      	cmp	r2, #0
 80076fe:	f040 80fa 	bne.w	80078f6 <_vfiprintf_r+0xafe>
 8007702:	9c05      	ldr	r4, [sp, #20]
 8007704:	9720      	str	r7, [sp, #128]	; 0x80
 8007706:	2301      	movs	r3, #1
 8007708:	9421      	str	r4, [sp, #132]	; 0x84
 800770a:	9415      	str	r4, [sp, #84]	; 0x54
 800770c:	4622      	mov	r2, r4
 800770e:	9314      	str	r3, [sp, #80]	; 0x50
 8007710:	464e      	mov	r6, r9
 8007712:	3608      	adds	r6, #8
 8007714:	e741      	b.n	800759a <_vfiprintf_r+0x7a2>
 8007716:	9d04      	ldr	r5, [sp, #16]
 8007718:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800771c:	ebcb 0405 	rsb	r4, fp, r5
 8007720:	2c00      	cmp	r4, #0
 8007722:	f77f aef7 	ble.w	8007514 <_vfiprintf_r+0x71c>
 8007726:	2c10      	cmp	r4, #16
 8007728:	4da8      	ldr	r5, [pc, #672]	; (80079cc <_vfiprintf_r+0xbd4>)
 800772a:	f340 8174 	ble.w	8007a16 <_vfiprintf_r+0xc1e>
 800772e:	4629      	mov	r1, r5
 8007730:	f04f 0b10 	mov.w	fp, #16
 8007734:	4625      	mov	r5, r4
 8007736:	4664      	mov	r4, ip
 8007738:	46b4      	mov	ip, r6
 800773a:	460e      	mov	r6, r1
 800773c:	e006      	b.n	800774c <_vfiprintf_r+0x954>
 800773e:	1c98      	adds	r0, r3, #2
 8007740:	f10c 0c08 	add.w	ip, ip, #8
 8007744:	460b      	mov	r3, r1
 8007746:	3d10      	subs	r5, #16
 8007748:	2d10      	cmp	r5, #16
 800774a:	dd0f      	ble.n	800776c <_vfiprintf_r+0x974>
 800774c:	1c59      	adds	r1, r3, #1
 800774e:	3210      	adds	r2, #16
 8007750:	2907      	cmp	r1, #7
 8007752:	9215      	str	r2, [sp, #84]	; 0x54
 8007754:	e88c 0840 	stmia.w	ip, {r6, fp}
 8007758:	9114      	str	r1, [sp, #80]	; 0x50
 800775a:	ddf0      	ble.n	800773e <_vfiprintf_r+0x946>
 800775c:	b9ba      	cbnz	r2, 800778e <_vfiprintf_r+0x996>
 800775e:	3d10      	subs	r5, #16
 8007760:	2d10      	cmp	r5, #16
 8007762:	f04f 0001 	mov.w	r0, #1
 8007766:	4613      	mov	r3, r2
 8007768:	46cc      	mov	ip, r9
 800776a:	dcef      	bgt.n	800774c <_vfiprintf_r+0x954>
 800776c:	4633      	mov	r3, r6
 800776e:	4666      	mov	r6, ip
 8007770:	46a4      	mov	ip, r4
 8007772:	462c      	mov	r4, r5
 8007774:	461d      	mov	r5, r3
 8007776:	4422      	add	r2, r4
 8007778:	2807      	cmp	r0, #7
 800777a:	9215      	str	r2, [sp, #84]	; 0x54
 800777c:	6035      	str	r5, [r6, #0]
 800777e:	6074      	str	r4, [r6, #4]
 8007780:	9014      	str	r0, [sp, #80]	; 0x50
 8007782:	f300 80b2 	bgt.w	80078ea <_vfiprintf_r+0xaf2>
 8007786:	3608      	adds	r6, #8
 8007788:	1c41      	adds	r1, r0, #1
 800778a:	4603      	mov	r3, r0
 800778c:	e6c2      	b.n	8007514 <_vfiprintf_r+0x71c>
 800778e:	9806      	ldr	r0, [sp, #24]
 8007790:	9902      	ldr	r1, [sp, #8]
 8007792:	aa13      	add	r2, sp, #76	; 0x4c
 8007794:	f7ff fae8 	bl	8006d68 <__sprint_r.part.0>
 8007798:	2800      	cmp	r0, #0
 800779a:	f47f af7c 	bne.w	8007696 <_vfiprintf_r+0x89e>
 800779e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80077a0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80077a2:	1c58      	adds	r0, r3, #1
 80077a4:	46cc      	mov	ip, r9
 80077a6:	e7ce      	b.n	8007746 <_vfiprintf_r+0x94e>
 80077a8:	2a00      	cmp	r2, #0
 80077aa:	d17c      	bne.n	80078a6 <_vfiprintf_r+0xaae>
 80077ac:	4619      	mov	r1, r3
 80077ae:	464e      	mov	r6, r9
 80077b0:	4613      	mov	r3, r2
 80077b2:	e69c      	b.n	80074ee <_vfiprintf_r+0x6f6>
 80077b4:	2a00      	cmp	r2, #0
 80077b6:	f040 8087 	bne.w	80078c8 <_vfiprintf_r+0xad0>
 80077ba:	2101      	movs	r1, #1
 80077bc:	4613      	mov	r3, r2
 80077be:	464e      	mov	r6, r9
 80077c0:	e6a4      	b.n	800750c <_vfiprintf_r+0x714>
 80077c2:	464f      	mov	r7, r9
 80077c4:	e44c      	b.n	8007060 <_vfiprintf_r+0x268>
 80077c6:	2d00      	cmp	r5, #0
 80077c8:	bf08      	it	eq
 80077ca:	2c0a      	cmpeq	r4, #10
 80077cc:	d249      	bcs.n	8007862 <_vfiprintf_r+0xa6a>
 80077ce:	af30      	add	r7, sp, #192	; 0xc0
 80077d0:	3430      	adds	r4, #48	; 0x30
 80077d2:	f807 4d41 	strb.w	r4, [r7, #-65]!
 80077d6:	ebc7 0309 	rsb	r3, r7, r9
 80077da:	9305      	str	r3, [sp, #20]
 80077dc:	e440      	b.n	8007060 <_vfiprintf_r+0x268>
 80077de:	2302      	movs	r3, #2
 80077e0:	e41b      	b.n	800701a <_vfiprintf_r+0x222>
 80077e2:	2a00      	cmp	r2, #0
 80077e4:	f040 80b2 	bne.w	800794c <_vfiprintf_r+0xb54>
 80077e8:	4613      	mov	r3, r2
 80077ea:	2101      	movs	r1, #1
 80077ec:	464e      	mov	r6, r9
 80077ee:	e66d      	b.n	80074cc <_vfiprintf_r+0x6d4>
 80077f0:	4644      	mov	r4, r8
 80077f2:	f7ff bb5c 	b.w	8006eae <_vfiprintf_r+0xb6>
 80077f6:	9806      	ldr	r0, [sp, #24]
 80077f8:	9902      	ldr	r1, [sp, #8]
 80077fa:	aa13      	add	r2, sp, #76	; 0x4c
 80077fc:	f7ff fab4 	bl	8006d68 <__sprint_r.part.0>
 8007800:	2800      	cmp	r0, #0
 8007802:	f47f af48 	bne.w	8007696 <_vfiprintf_r+0x89e>
 8007806:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007808:	464e      	mov	r6, r9
 800780a:	e6c6      	b.n	800759a <_vfiprintf_r+0x7a2>
 800780c:	9d08      	ldr	r5, [sp, #32]
 800780e:	682c      	ldr	r4, [r5, #0]
 8007810:	3504      	adds	r5, #4
 8007812:	9508      	str	r5, [sp, #32]
 8007814:	2500      	movs	r5, #0
 8007816:	e400      	b.n	800701a <_vfiprintf_r+0x222>
 8007818:	9d08      	ldr	r5, [sp, #32]
 800781a:	682c      	ldr	r4, [r5, #0]
 800781c:	3504      	adds	r5, #4
 800781e:	9508      	str	r5, [sp, #32]
 8007820:	2301      	movs	r3, #1
 8007822:	2500      	movs	r5, #0
 8007824:	f7ff bbf9 	b.w	800701a <_vfiprintf_r+0x222>
 8007828:	9d08      	ldr	r5, [sp, #32]
 800782a:	682c      	ldr	r4, [r5, #0]
 800782c:	3504      	adds	r5, #4
 800782e:	9508      	str	r5, [sp, #32]
 8007830:	2500      	movs	r5, #0
 8007832:	e528      	b.n	8007286 <_vfiprintf_r+0x48e>
 8007834:	9d08      	ldr	r5, [sp, #32]
 8007836:	f8dd b020 	ldr.w	fp, [sp, #32]
 800783a:	682c      	ldr	r4, [r5, #0]
 800783c:	f10b 0b04 	add.w	fp, fp, #4
 8007840:	17e5      	asrs	r5, r4, #31
 8007842:	f8cd b020 	str.w	fp, [sp, #32]
 8007846:	4622      	mov	r2, r4
 8007848:	462b      	mov	r3, r5
 800784a:	e48f      	b.n	800716c <_vfiprintf_r+0x374>
 800784c:	9806      	ldr	r0, [sp, #24]
 800784e:	9902      	ldr	r1, [sp, #8]
 8007850:	aa13      	add	r2, sp, #76	; 0x4c
 8007852:	f7ff fa89 	bl	8006d68 <__sprint_r.part.0>
 8007856:	2800      	cmp	r0, #0
 8007858:	f47f af1d 	bne.w	8007696 <_vfiprintf_r+0x89e>
 800785c:	464e      	mov	r6, r9
 800785e:	f7ff bb9b 	b.w	8006f98 <_vfiprintf_r+0x1a0>
 8007862:	f10d 0b7f 	add.w	fp, sp, #127	; 0x7f
 8007866:	9603      	str	r6, [sp, #12]
 8007868:	465e      	mov	r6, fp
 800786a:	46e3      	mov	fp, ip
 800786c:	4620      	mov	r0, r4
 800786e:	4629      	mov	r1, r5
 8007870:	220a      	movs	r2, #10
 8007872:	2300      	movs	r3, #0
 8007874:	f001 f88a 	bl	800898c <__aeabi_uldivmod>
 8007878:	3230      	adds	r2, #48	; 0x30
 800787a:	7032      	strb	r2, [r6, #0]
 800787c:	4620      	mov	r0, r4
 800787e:	4629      	mov	r1, r5
 8007880:	220a      	movs	r2, #10
 8007882:	2300      	movs	r3, #0
 8007884:	f001 f882 	bl	800898c <__aeabi_uldivmod>
 8007888:	4604      	mov	r4, r0
 800788a:	460d      	mov	r5, r1
 800788c:	ea54 0005 	orrs.w	r0, r4, r5
 8007890:	4637      	mov	r7, r6
 8007892:	f106 36ff 	add.w	r6, r6, #4294967295
 8007896:	d1e9      	bne.n	800786c <_vfiprintf_r+0xa74>
 8007898:	ebc7 0309 	rsb	r3, r7, r9
 800789c:	46dc      	mov	ip, fp
 800789e:	9e03      	ldr	r6, [sp, #12]
 80078a0:	9305      	str	r3, [sp, #20]
 80078a2:	f7ff bbdd 	b.w	8007060 <_vfiprintf_r+0x268>
 80078a6:	9806      	ldr	r0, [sp, #24]
 80078a8:	9902      	ldr	r1, [sp, #8]
 80078aa:	f8cd c004 	str.w	ip, [sp, #4]
 80078ae:	aa13      	add	r2, sp, #76	; 0x4c
 80078b0:	f7ff fa5a 	bl	8006d68 <__sprint_r.part.0>
 80078b4:	f8dd c004 	ldr.w	ip, [sp, #4]
 80078b8:	2800      	cmp	r0, #0
 80078ba:	f47f aeec 	bne.w	8007696 <_vfiprintf_r+0x89e>
 80078be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80078c0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80078c2:	1c59      	adds	r1, r3, #1
 80078c4:	464e      	mov	r6, r9
 80078c6:	e612      	b.n	80074ee <_vfiprintf_r+0x6f6>
 80078c8:	9806      	ldr	r0, [sp, #24]
 80078ca:	9902      	ldr	r1, [sp, #8]
 80078cc:	f8cd c004 	str.w	ip, [sp, #4]
 80078d0:	aa13      	add	r2, sp, #76	; 0x4c
 80078d2:	f7ff fa49 	bl	8006d68 <__sprint_r.part.0>
 80078d6:	f8dd c004 	ldr.w	ip, [sp, #4]
 80078da:	2800      	cmp	r0, #0
 80078dc:	f47f aedb 	bne.w	8007696 <_vfiprintf_r+0x89e>
 80078e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80078e2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80078e4:	1c59      	adds	r1, r3, #1
 80078e6:	464e      	mov	r6, r9
 80078e8:	e610      	b.n	800750c <_vfiprintf_r+0x714>
 80078ea:	2a00      	cmp	r2, #0
 80078ec:	d156      	bne.n	800799c <_vfiprintf_r+0xba4>
 80078ee:	2101      	movs	r1, #1
 80078f0:	4613      	mov	r3, r2
 80078f2:	464e      	mov	r6, r9
 80078f4:	e60e      	b.n	8007514 <_vfiprintf_r+0x71c>
 80078f6:	9806      	ldr	r0, [sp, #24]
 80078f8:	9902      	ldr	r1, [sp, #8]
 80078fa:	aa13      	add	r2, sp, #76	; 0x4c
 80078fc:	f7ff fa34 	bl	8006d68 <__sprint_r.part.0>
 8007900:	2800      	cmp	r0, #0
 8007902:	f47f aec8 	bne.w	8007696 <_vfiprintf_r+0x89e>
 8007906:	9914      	ldr	r1, [sp, #80]	; 0x50
 8007908:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800790a:	3101      	adds	r1, #1
 800790c:	464e      	mov	r6, r9
 800790e:	e636      	b.n	800757e <_vfiprintf_r+0x786>
 8007910:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
 8007914:	4264      	negs	r4, r4
 8007916:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800791a:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
 800791e:	f8cd b01c 	str.w	fp, [sp, #28]
 8007922:	f8cd c014 	str.w	ip, [sp, #20]
 8007926:	2301      	movs	r3, #1
 8007928:	f7ff bb7f 	b.w	800702a <_vfiprintf_r+0x232>
 800792c:	f01a 0f10 	tst.w	sl, #16
 8007930:	d11d      	bne.n	800796e <_vfiprintf_r+0xb76>
 8007932:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8007936:	d059      	beq.n	80079ec <_vfiprintf_r+0xbf4>
 8007938:	9d08      	ldr	r5, [sp, #32]
 800793a:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 800793e:	682b      	ldr	r3, [r5, #0]
 8007940:	3504      	adds	r5, #4
 8007942:	9508      	str	r5, [sp, #32]
 8007944:	f8a3 b000 	strh.w	fp, [r3]
 8007948:	f7ff ba89 	b.w	8006e5e <_vfiprintf_r+0x66>
 800794c:	9806      	ldr	r0, [sp, #24]
 800794e:	9902      	ldr	r1, [sp, #8]
 8007950:	f8cd c004 	str.w	ip, [sp, #4]
 8007954:	aa13      	add	r2, sp, #76	; 0x4c
 8007956:	f7ff fa07 	bl	8006d68 <__sprint_r.part.0>
 800795a:	f8dd c004 	ldr.w	ip, [sp, #4]
 800795e:	2800      	cmp	r0, #0
 8007960:	f47f ae99 	bne.w	8007696 <_vfiprintf_r+0x89e>
 8007964:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007966:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007968:	1c59      	adds	r1, r3, #1
 800796a:	464e      	mov	r6, r9
 800796c:	e5ae      	b.n	80074cc <_vfiprintf_r+0x6d4>
 800796e:	f8dd b020 	ldr.w	fp, [sp, #32]
 8007972:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8007974:	f8db 3000 	ldr.w	r3, [fp]
 8007978:	f10b 0b04 	add.w	fp, fp, #4
 800797c:	f8cd b020 	str.w	fp, [sp, #32]
 8007980:	601c      	str	r4, [r3, #0]
 8007982:	f7ff ba6c 	b.w	8006e5e <_vfiprintf_r+0x66>
 8007986:	9408      	str	r4, [sp, #32]
 8007988:	f7fa fd64 	bl	8002454 <strlen>
 800798c:	f89d 4047 	ldrb.w	r4, [sp, #71]	; 0x47
 8007990:	9005      	str	r0, [sp, #20]
 8007992:	9407      	str	r4, [sp, #28]
 8007994:	f04f 0c00 	mov.w	ip, #0
 8007998:	f7ff bb62 	b.w	8007060 <_vfiprintf_r+0x268>
 800799c:	9806      	ldr	r0, [sp, #24]
 800799e:	9902      	ldr	r1, [sp, #8]
 80079a0:	f8cd c004 	str.w	ip, [sp, #4]
 80079a4:	aa13      	add	r2, sp, #76	; 0x4c
 80079a6:	f7ff f9df 	bl	8006d68 <__sprint_r.part.0>
 80079aa:	f8dd c004 	ldr.w	ip, [sp, #4]
 80079ae:	2800      	cmp	r0, #0
 80079b0:	f47f ae71 	bne.w	8007696 <_vfiprintf_r+0x89e>
 80079b4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80079b6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80079b8:	1c59      	adds	r1, r3, #1
 80079ba:	464e      	mov	r6, r9
 80079bc:	e5aa      	b.n	8007514 <_vfiprintf_r+0x71c>
 80079be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80079c0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80079c2:	4d03      	ldr	r5, [pc, #12]	; (80079d0 <_vfiprintf_r+0xbd8>)
 80079c4:	3301      	adds	r3, #1
 80079c6:	f7ff bb9b 	b.w	8007100 <_vfiprintf_r+0x308>
 80079ca:	bf00      	nop
 80079cc:	08009318 	.word	0x08009318
 80079d0:	08009328 	.word	0x08009328
 80079d4:	f1bc 0f06 	cmp.w	ip, #6
 80079d8:	bf34      	ite	cc
 80079da:	4663      	movcc	r3, ip
 80079dc:	2306      	movcs	r3, #6
 80079de:	9408      	str	r4, [sp, #32]
 80079e0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80079e4:	9305      	str	r3, [sp, #20]
 80079e6:	9403      	str	r4, [sp, #12]
 80079e8:	4f16      	ldr	r7, [pc, #88]	; (8007a44 <_vfiprintf_r+0xc4c>)
 80079ea:	e470      	b.n	80072ce <_vfiprintf_r+0x4d6>
 80079ec:	9c08      	ldr	r4, [sp, #32]
 80079ee:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80079f0:	6823      	ldr	r3, [r4, #0]
 80079f2:	3404      	adds	r4, #4
 80079f4:	9408      	str	r4, [sp, #32]
 80079f6:	601d      	str	r5, [r3, #0]
 80079f8:	f7ff ba31 	b.w	8006e5e <_vfiprintf_r+0x66>
 80079fc:	9814      	ldr	r0, [sp, #80]	; 0x50
 80079fe:	4d12      	ldr	r5, [pc, #72]	; (8007a48 <_vfiprintf_r+0xc50>)
 8007a00:	3001      	adds	r0, #1
 8007a02:	e5f8      	b.n	80075f6 <_vfiprintf_r+0x7fe>
 8007a04:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
 8007a08:	f8cd c014 	str.w	ip, [sp, #20]
 8007a0c:	9507      	str	r5, [sp, #28]
 8007a0e:	9408      	str	r4, [sp, #32]
 8007a10:	4684      	mov	ip, r0
 8007a12:	f7ff bb25 	b.w	8007060 <_vfiprintf_r+0x268>
 8007a16:	4608      	mov	r0, r1
 8007a18:	e6ad      	b.n	8007776 <_vfiprintf_r+0x97e>
 8007a1a:	46a0      	mov	r8, r4
 8007a1c:	2500      	movs	r5, #0
 8007a1e:	f7ff ba5a 	b.w	8006ed6 <_vfiprintf_r+0xde>
 8007a22:	f8dd b020 	ldr.w	fp, [sp, #32]
 8007a26:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007a2a:	f8db 5000 	ldr.w	r5, [fp]
 8007a2e:	f10b 0204 	add.w	r2, fp, #4
 8007a32:	2d00      	cmp	r5, #0
 8007a34:	9208      	str	r2, [sp, #32]
 8007a36:	46a0      	mov	r8, r4
 8007a38:	f6bf aa4b 	bge.w	8006ed2 <_vfiprintf_r+0xda>
 8007a3c:	f04f 35ff 	mov.w	r5, #4294967295
 8007a40:	f7ff ba47 	b.w	8006ed2 <_vfiprintf_r+0xda>
 8007a44:	080091b8 	.word	0x080091b8
 8007a48:	08009328 	.word	0x08009328

08007a4c <vfiprintf>:
 8007a4c:	b430      	push	{r4, r5}
 8007a4e:	4c04      	ldr	r4, [pc, #16]	; (8007a60 <vfiprintf+0x14>)
 8007a50:	460d      	mov	r5, r1
 8007a52:	4613      	mov	r3, r2
 8007a54:	4601      	mov	r1, r0
 8007a56:	462a      	mov	r2, r5
 8007a58:	6820      	ldr	r0, [r4, #0]
 8007a5a:	bc30      	pop	{r4, r5}
 8007a5c:	f7ff b9cc 	b.w	8006df8 <_vfiprintf_r>
 8007a60:	20000498 	.word	0x20000498

08007a64 <__sbprintf>:
 8007a64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007a68:	460c      	mov	r4, r1
 8007a6a:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 8007a6e:	f8b1 900c 	ldrh.w	r9, [r1, #12]
 8007a72:	69e7      	ldr	r7, [r4, #28]
 8007a74:	6e49      	ldr	r1, [r1, #100]	; 0x64
 8007a76:	f8b4 800e 	ldrh.w	r8, [r4, #14]
 8007a7a:	9119      	str	r1, [sp, #100]	; 0x64
 8007a7c:	ad1a      	add	r5, sp, #104	; 0x68
 8007a7e:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8007a82:	f04f 0e00 	mov.w	lr, #0
 8007a86:	9707      	str	r7, [sp, #28]
 8007a88:	f029 0902 	bic.w	r9, r9, #2
 8007a8c:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8007a8e:	9500      	str	r5, [sp, #0]
 8007a90:	4669      	mov	r1, sp
 8007a92:	9504      	str	r5, [sp, #16]
 8007a94:	9602      	str	r6, [sp, #8]
 8007a96:	9605      	str	r6, [sp, #20]
 8007a98:	f8ad 900c 	strh.w	r9, [sp, #12]
 8007a9c:	f8ad 800e 	strh.w	r8, [sp, #14]
 8007aa0:	9709      	str	r7, [sp, #36]	; 0x24
 8007aa2:	f8cd e018 	str.w	lr, [sp, #24]
 8007aa6:	4606      	mov	r6, r0
 8007aa8:	f7ff f9a6 	bl	8006df8 <_vfiprintf_r>
 8007aac:	1e05      	subs	r5, r0, #0
 8007aae:	db07      	blt.n	8007ac0 <__sbprintf+0x5c>
 8007ab0:	4630      	mov	r0, r6
 8007ab2:	4669      	mov	r1, sp
 8007ab4:	f7fd f942 	bl	8004d3c <_fflush_r>
 8007ab8:	2800      	cmp	r0, #0
 8007aba:	bf18      	it	ne
 8007abc:	f04f 35ff 	movne.w	r5, #4294967295
 8007ac0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8007ac4:	065b      	lsls	r3, r3, #25
 8007ac6:	d503      	bpl.n	8007ad0 <__sbprintf+0x6c>
 8007ac8:	89a3      	ldrh	r3, [r4, #12]
 8007aca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ace:	81a3      	strh	r3, [r4, #12]
 8007ad0:	4628      	mov	r0, r5
 8007ad2:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 8007ad6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ada:	bf00      	nop

08007adc <_write_r>:
 8007adc:	b570      	push	{r4, r5, r6, lr}
 8007ade:	4c08      	ldr	r4, [pc, #32]	; (8007b00 <_write_r+0x24>)
 8007ae0:	4606      	mov	r6, r0
 8007ae2:	2500      	movs	r5, #0
 8007ae4:	4608      	mov	r0, r1
 8007ae6:	4611      	mov	r1, r2
 8007ae8:	461a      	mov	r2, r3
 8007aea:	6025      	str	r5, [r4, #0]
 8007aec:	f7f8 fe80 	bl	80007f0 <_write>
 8007af0:	1c43      	adds	r3, r0, #1
 8007af2:	d000      	beq.n	8007af6 <_write_r+0x1a>
 8007af4:	bd70      	pop	{r4, r5, r6, pc}
 8007af6:	6823      	ldr	r3, [r4, #0]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d0fb      	beq.n	8007af4 <_write_r+0x18>
 8007afc:	6033      	str	r3, [r6, #0]
 8007afe:	bd70      	pop	{r4, r5, r6, pc}
 8007b00:	2000fd6c 	.word	0x2000fd6c

08007b04 <__register_exitproc>:
 8007b04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b06:	4c27      	ldr	r4, [pc, #156]	; (8007ba4 <__register_exitproc+0xa0>)
 8007b08:	6826      	ldr	r6, [r4, #0]
 8007b0a:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
 8007b0e:	b085      	sub	sp, #20
 8007b10:	4607      	mov	r7, r0
 8007b12:	2c00      	cmp	r4, #0
 8007b14:	d041      	beq.n	8007b9a <__register_exitproc+0x96>
 8007b16:	6865      	ldr	r5, [r4, #4]
 8007b18:	2d1f      	cmp	r5, #31
 8007b1a:	dd1e      	ble.n	8007b5a <__register_exitproc+0x56>
 8007b1c:	4822      	ldr	r0, [pc, #136]	; (8007ba8 <__register_exitproc+0xa4>)
 8007b1e:	b918      	cbnz	r0, 8007b28 <__register_exitproc+0x24>
 8007b20:	f04f 30ff 	mov.w	r0, #4294967295
 8007b24:	b005      	add	sp, #20
 8007b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b28:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8007b2c:	9103      	str	r1, [sp, #12]
 8007b2e:	9202      	str	r2, [sp, #8]
 8007b30:	9301      	str	r3, [sp, #4]
 8007b32:	f3af 8000 	nop.w
 8007b36:	9903      	ldr	r1, [sp, #12]
 8007b38:	9a02      	ldr	r2, [sp, #8]
 8007b3a:	9b01      	ldr	r3, [sp, #4]
 8007b3c:	4604      	mov	r4, r0
 8007b3e:	2800      	cmp	r0, #0
 8007b40:	d0ee      	beq.n	8007b20 <__register_exitproc+0x1c>
 8007b42:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
 8007b46:	6025      	str	r5, [r4, #0]
 8007b48:	2000      	movs	r0, #0
 8007b4a:	6060      	str	r0, [r4, #4]
 8007b4c:	4605      	mov	r5, r0
 8007b4e:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
 8007b52:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
 8007b56:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
 8007b5a:	b93f      	cbnz	r7, 8007b6c <__register_exitproc+0x68>
 8007b5c:	1cab      	adds	r3, r5, #2
 8007b5e:	2000      	movs	r0, #0
 8007b60:	3501      	adds	r5, #1
 8007b62:	6065      	str	r5, [r4, #4]
 8007b64:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
 8007b68:	b005      	add	sp, #20
 8007b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b6c:	eb04 0085 	add.w	r0, r4, r5, lsl #2
 8007b70:	f04f 0c01 	mov.w	ip, #1
 8007b74:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
 8007b78:	f8d4 6188 	ldr.w	r6, [r4, #392]	; 0x188
 8007b7c:	fa0c f205 	lsl.w	r2, ip, r5
 8007b80:	4316      	orrs	r6, r2
 8007b82:	2f02      	cmp	r7, #2
 8007b84:	f8c4 6188 	str.w	r6, [r4, #392]	; 0x188
 8007b88:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 8007b8c:	d1e6      	bne.n	8007b5c <__register_exitproc+0x58>
 8007b8e:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
 8007b92:	431a      	orrs	r2, r3
 8007b94:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 8007b98:	e7e0      	b.n	8007b5c <__register_exitproc+0x58>
 8007b9a:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
 8007b9e:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
 8007ba2:	e7b8      	b.n	8007b16 <__register_exitproc+0x12>
 8007ba4:	0800916c 	.word	0x0800916c
 8007ba8:	00000000 	.word	0x00000000

08007bac <_calloc_r>:
 8007bac:	b510      	push	{r4, lr}
 8007bae:	fb02 f101 	mul.w	r1, r2, r1
 8007bb2:	f7fd fdaf 	bl	8005714 <_malloc_r>
 8007bb6:	4604      	mov	r4, r0
 8007bb8:	b168      	cbz	r0, 8007bd6 <_calloc_r+0x2a>
 8007bba:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8007bbe:	f022 0203 	bic.w	r2, r2, #3
 8007bc2:	3a04      	subs	r2, #4
 8007bc4:	2a24      	cmp	r2, #36	; 0x24
 8007bc6:	d818      	bhi.n	8007bfa <_calloc_r+0x4e>
 8007bc8:	2a13      	cmp	r2, #19
 8007bca:	d806      	bhi.n	8007bda <_calloc_r+0x2e>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	2200      	movs	r2, #0
 8007bd0:	601a      	str	r2, [r3, #0]
 8007bd2:	605a      	str	r2, [r3, #4]
 8007bd4:	609a      	str	r2, [r3, #8]
 8007bd6:	4620      	mov	r0, r4
 8007bd8:	bd10      	pop	{r4, pc}
 8007bda:	2300      	movs	r3, #0
 8007bdc:	2a1b      	cmp	r2, #27
 8007bde:	6003      	str	r3, [r0, #0]
 8007be0:	6043      	str	r3, [r0, #4]
 8007be2:	d90f      	bls.n	8007c04 <_calloc_r+0x58>
 8007be4:	2a24      	cmp	r2, #36	; 0x24
 8007be6:	6083      	str	r3, [r0, #8]
 8007be8:	60c3      	str	r3, [r0, #12]
 8007bea:	bf05      	ittet	eq
 8007bec:	6103      	streq	r3, [r0, #16]
 8007bee:	6143      	streq	r3, [r0, #20]
 8007bf0:	f100 0310 	addne.w	r3, r0, #16
 8007bf4:	f100 0318 	addeq.w	r3, r0, #24
 8007bf8:	e7e9      	b.n	8007bce <_calloc_r+0x22>
 8007bfa:	2100      	movs	r1, #0
 8007bfc:	f7fa fb86 	bl	800230c <memset>
 8007c00:	4620      	mov	r0, r4
 8007c02:	bd10      	pop	{r4, pc}
 8007c04:	f100 0308 	add.w	r3, r0, #8
 8007c08:	e7e1      	b.n	8007bce <_calloc_r+0x22>
 8007c0a:	bf00      	nop

08007c0c <_close_r>:
 8007c0c:	b538      	push	{r3, r4, r5, lr}
 8007c0e:	4c07      	ldr	r4, [pc, #28]	; (8007c2c <_close_r+0x20>)
 8007c10:	2300      	movs	r3, #0
 8007c12:	4605      	mov	r5, r0
 8007c14:	4608      	mov	r0, r1
 8007c16:	6023      	str	r3, [r4, #0]
 8007c18:	f7f8 fdf2 	bl	8000800 <_close>
 8007c1c:	1c43      	adds	r3, r0, #1
 8007c1e:	d000      	beq.n	8007c22 <_close_r+0x16>
 8007c20:	bd38      	pop	{r3, r4, r5, pc}
 8007c22:	6823      	ldr	r3, [r4, #0]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d0fb      	beq.n	8007c20 <_close_r+0x14>
 8007c28:	602b      	str	r3, [r5, #0]
 8007c2a:	bd38      	pop	{r3, r4, r5, pc}
 8007c2c:	2000fd6c 	.word	0x2000fd6c

08007c30 <_fclose_r>:
 8007c30:	b570      	push	{r4, r5, r6, lr}
 8007c32:	460c      	mov	r4, r1
 8007c34:	4605      	mov	r5, r0
 8007c36:	b131      	cbz	r1, 8007c46 <_fclose_r+0x16>
 8007c38:	b110      	cbz	r0, 8007c40 <_fclose_r+0x10>
 8007c3a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d02f      	beq.n	8007ca0 <_fclose_r+0x70>
 8007c40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c44:	b90b      	cbnz	r3, 8007c4a <_fclose_r+0x1a>
 8007c46:	2000      	movs	r0, #0
 8007c48:	bd70      	pop	{r4, r5, r6, pc}
 8007c4a:	4628      	mov	r0, r5
 8007c4c:	4621      	mov	r1, r4
 8007c4e:	f7fd f875 	bl	8004d3c <_fflush_r>
 8007c52:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007c54:	4606      	mov	r6, r0
 8007c56:	b133      	cbz	r3, 8007c66 <_fclose_r+0x36>
 8007c58:	4628      	mov	r0, r5
 8007c5a:	69e1      	ldr	r1, [r4, #28]
 8007c5c:	4798      	blx	r3
 8007c5e:	2800      	cmp	r0, #0
 8007c60:	bfb8      	it	lt
 8007c62:	f04f 36ff 	movlt.w	r6, #4294967295
 8007c66:	89a3      	ldrh	r3, [r4, #12]
 8007c68:	061b      	lsls	r3, r3, #24
 8007c6a:	d41c      	bmi.n	8007ca6 <_fclose_r+0x76>
 8007c6c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007c6e:	b141      	cbz	r1, 8007c82 <_fclose_r+0x52>
 8007c70:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8007c74:	4299      	cmp	r1, r3
 8007c76:	d002      	beq.n	8007c7e <_fclose_r+0x4e>
 8007c78:	4628      	mov	r0, r5
 8007c7a:	f7fd f9f5 	bl	8005068 <_free_r>
 8007c7e:	2300      	movs	r3, #0
 8007c80:	6323      	str	r3, [r4, #48]	; 0x30
 8007c82:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007c84:	b121      	cbz	r1, 8007c90 <_fclose_r+0x60>
 8007c86:	4628      	mov	r0, r5
 8007c88:	f7fd f9ee 	bl	8005068 <_free_r>
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	6463      	str	r3, [r4, #68]	; 0x44
 8007c90:	f7fd f968 	bl	8004f64 <__sfp_lock_acquire>
 8007c94:	2300      	movs	r3, #0
 8007c96:	81a3      	strh	r3, [r4, #12]
 8007c98:	f7fd f966 	bl	8004f68 <__sfp_lock_release>
 8007c9c:	4630      	mov	r0, r6
 8007c9e:	bd70      	pop	{r4, r5, r6, pc}
 8007ca0:	f7fd f8a0 	bl	8004de4 <__sinit>
 8007ca4:	e7cc      	b.n	8007c40 <_fclose_r+0x10>
 8007ca6:	4628      	mov	r0, r5
 8007ca8:	6921      	ldr	r1, [r4, #16]
 8007caa:	f7fd f9dd 	bl	8005068 <_free_r>
 8007cae:	e7dd      	b.n	8007c6c <_fclose_r+0x3c>

08007cb0 <fclose>:
 8007cb0:	4b02      	ldr	r3, [pc, #8]	; (8007cbc <fclose+0xc>)
 8007cb2:	4601      	mov	r1, r0
 8007cb4:	6818      	ldr	r0, [r3, #0]
 8007cb6:	f7ff bfbb 	b.w	8007c30 <_fclose_r>
 8007cba:	bf00      	nop
 8007cbc:	20000498 	.word	0x20000498

08007cc0 <_fputwc_r>:
 8007cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cc4:	8993      	ldrh	r3, [r2, #12]
 8007cc6:	460f      	mov	r7, r1
 8007cc8:	0499      	lsls	r1, r3, #18
 8007cca:	b082      	sub	sp, #8
 8007ccc:	4614      	mov	r4, r2
 8007cce:	4680      	mov	r8, r0
 8007cd0:	d406      	bmi.n	8007ce0 <_fputwc_r+0x20>
 8007cd2:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8007cd4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007cd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007cdc:	81a3      	strh	r3, [r4, #12]
 8007cde:	6662      	str	r2, [r4, #100]	; 0x64
 8007ce0:	f7fd fc8c 	bl	80055fc <__locale_mb_cur_max>
 8007ce4:	2801      	cmp	r0, #1
 8007ce6:	d03d      	beq.n	8007d64 <_fputwc_r+0xa4>
 8007ce8:	463a      	mov	r2, r7
 8007cea:	4640      	mov	r0, r8
 8007cec:	a901      	add	r1, sp, #4
 8007cee:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 8007cf2:	f000 f957 	bl	8007fa4 <_wcrtomb_r>
 8007cf6:	1c42      	adds	r2, r0, #1
 8007cf8:	4606      	mov	r6, r0
 8007cfa:	d02c      	beq.n	8007d56 <_fputwc_r+0x96>
 8007cfc:	2800      	cmp	r0, #0
 8007cfe:	d039      	beq.n	8007d74 <_fputwc_r+0xb4>
 8007d00:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8007d04:	2500      	movs	r5, #0
 8007d06:	e009      	b.n	8007d1c <_fputwc_r+0x5c>
 8007d08:	6823      	ldr	r3, [r4, #0]
 8007d0a:	7019      	strb	r1, [r3, #0]
 8007d0c:	6823      	ldr	r3, [r4, #0]
 8007d0e:	3301      	adds	r3, #1
 8007d10:	6023      	str	r3, [r4, #0]
 8007d12:	3501      	adds	r5, #1
 8007d14:	42b5      	cmp	r5, r6
 8007d16:	d22d      	bcs.n	8007d74 <_fputwc_r+0xb4>
 8007d18:	ab01      	add	r3, sp, #4
 8007d1a:	5ce9      	ldrb	r1, [r5, r3]
 8007d1c:	68a3      	ldr	r3, [r4, #8]
 8007d1e:	3b01      	subs	r3, #1
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	60a3      	str	r3, [r4, #8]
 8007d24:	daf0      	bge.n	8007d08 <_fputwc_r+0x48>
 8007d26:	69a2      	ldr	r2, [r4, #24]
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	db05      	blt.n	8007d38 <_fputwc_r+0x78>
 8007d2c:	6823      	ldr	r3, [r4, #0]
 8007d2e:	7019      	strb	r1, [r3, #0]
 8007d30:	6823      	ldr	r3, [r4, #0]
 8007d32:	7819      	ldrb	r1, [r3, #0]
 8007d34:	290a      	cmp	r1, #10
 8007d36:	d1ea      	bne.n	8007d0e <_fputwc_r+0x4e>
 8007d38:	4640      	mov	r0, r8
 8007d3a:	4622      	mov	r2, r4
 8007d3c:	f000 f8d6 	bl	8007eec <__swbuf_r>
 8007d40:	f1b0 33ff 	subs.w	r3, r0, #4294967295
 8007d44:	4258      	negs	r0, r3
 8007d46:	4158      	adcs	r0, r3
 8007d48:	2800      	cmp	r0, #0
 8007d4a:	d0e2      	beq.n	8007d12 <_fputwc_r+0x52>
 8007d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d50:	b002      	add	sp, #8
 8007d52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d56:	89a3      	ldrh	r3, [r4, #12]
 8007d58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d5c:	81a3      	strh	r3, [r4, #12]
 8007d5e:	b002      	add	sp, #8
 8007d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d64:	1e7b      	subs	r3, r7, #1
 8007d66:	2bfe      	cmp	r3, #254	; 0xfe
 8007d68:	d8be      	bhi.n	8007ce8 <_fputwc_r+0x28>
 8007d6a:	b2f9      	uxtb	r1, r7
 8007d6c:	4606      	mov	r6, r0
 8007d6e:	f88d 1004 	strb.w	r1, [sp, #4]
 8007d72:	e7c7      	b.n	8007d04 <_fputwc_r+0x44>
 8007d74:	4638      	mov	r0, r7
 8007d76:	b002      	add	sp, #8
 8007d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007d7c <fputwc>:
 8007d7c:	4b08      	ldr	r3, [pc, #32]	; (8007da0 <fputwc+0x24>)
 8007d7e:	b570      	push	{r4, r5, r6, lr}
 8007d80:	681c      	ldr	r4, [r3, #0]
 8007d82:	4606      	mov	r6, r0
 8007d84:	460d      	mov	r5, r1
 8007d86:	b124      	cbz	r4, 8007d92 <fputwc+0x16>
 8007d88:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007d8a:	b913      	cbnz	r3, 8007d92 <fputwc+0x16>
 8007d8c:	4620      	mov	r0, r4
 8007d8e:	f7fd f829 	bl	8004de4 <__sinit>
 8007d92:	4620      	mov	r0, r4
 8007d94:	4631      	mov	r1, r6
 8007d96:	462a      	mov	r2, r5
 8007d98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007d9c:	f7ff bf90 	b.w	8007cc0 <_fputwc_r>
 8007da0:	20000498 	.word	0x20000498

08007da4 <_fstat_r>:
 8007da4:	b538      	push	{r3, r4, r5, lr}
 8007da6:	4c08      	ldr	r4, [pc, #32]	; (8007dc8 <_fstat_r+0x24>)
 8007da8:	2300      	movs	r3, #0
 8007daa:	4605      	mov	r5, r0
 8007dac:	4608      	mov	r0, r1
 8007dae:	4611      	mov	r1, r2
 8007db0:	6023      	str	r3, [r4, #0]
 8007db2:	f7f8 fd29 	bl	8000808 <_fstat>
 8007db6:	1c43      	adds	r3, r0, #1
 8007db8:	d000      	beq.n	8007dbc <_fstat_r+0x18>
 8007dba:	bd38      	pop	{r3, r4, r5, pc}
 8007dbc:	6823      	ldr	r3, [r4, #0]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d0fb      	beq.n	8007dba <_fstat_r+0x16>
 8007dc2:	602b      	str	r3, [r5, #0]
 8007dc4:	bd38      	pop	{r3, r4, r5, pc}
 8007dc6:	bf00      	nop
 8007dc8:	2000fd6c 	.word	0x2000fd6c

08007dcc <_isatty_r>:
 8007dcc:	b538      	push	{r3, r4, r5, lr}
 8007dce:	4c07      	ldr	r4, [pc, #28]	; (8007dec <_isatty_r+0x20>)
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	4605      	mov	r5, r0
 8007dd4:	4608      	mov	r0, r1
 8007dd6:	6023      	str	r3, [r4, #0]
 8007dd8:	f7f8 fd1c 	bl	8000814 <_isatty>
 8007ddc:	1c43      	adds	r3, r0, #1
 8007dde:	d000      	beq.n	8007de2 <_isatty_r+0x16>
 8007de0:	bd38      	pop	{r3, r4, r5, pc}
 8007de2:	6823      	ldr	r3, [r4, #0]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d0fb      	beq.n	8007de0 <_isatty_r+0x14>
 8007de8:	602b      	str	r3, [r5, #0]
 8007dea:	bd38      	pop	{r3, r4, r5, pc}
 8007dec:	2000fd6c 	.word	0x2000fd6c

08007df0 <_lseek_r>:
 8007df0:	b570      	push	{r4, r5, r6, lr}
 8007df2:	4c08      	ldr	r4, [pc, #32]	; (8007e14 <_lseek_r+0x24>)
 8007df4:	4606      	mov	r6, r0
 8007df6:	2500      	movs	r5, #0
 8007df8:	4608      	mov	r0, r1
 8007dfa:	4611      	mov	r1, r2
 8007dfc:	461a      	mov	r2, r3
 8007dfe:	6025      	str	r5, [r4, #0]
 8007e00:	f7f8 fd0a 	bl	8000818 <_lseek>
 8007e04:	1c43      	adds	r3, r0, #1
 8007e06:	d000      	beq.n	8007e0a <_lseek_r+0x1a>
 8007e08:	bd70      	pop	{r4, r5, r6, pc}
 8007e0a:	6823      	ldr	r3, [r4, #0]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d0fb      	beq.n	8007e08 <_lseek_r+0x18>
 8007e10:	6033      	str	r3, [r6, #0]
 8007e12:	bd70      	pop	{r4, r5, r6, pc}
 8007e14:	2000fd6c 	.word	0x2000fd6c

08007e18 <_read_r>:
 8007e18:	b570      	push	{r4, r5, r6, lr}
 8007e1a:	4c08      	ldr	r4, [pc, #32]	; (8007e3c <_read_r+0x24>)
 8007e1c:	4606      	mov	r6, r0
 8007e1e:	2500      	movs	r5, #0
 8007e20:	4608      	mov	r0, r1
 8007e22:	4611      	mov	r1, r2
 8007e24:	461a      	mov	r2, r3
 8007e26:	6025      	str	r5, [r4, #0]
 8007e28:	f7f8 fcf8 	bl	800081c <_read>
 8007e2c:	1c43      	adds	r3, r0, #1
 8007e2e:	d000      	beq.n	8007e32 <_read_r+0x1a>
 8007e30:	bd70      	pop	{r4, r5, r6, pc}
 8007e32:	6823      	ldr	r3, [r4, #0]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d0fb      	beq.n	8007e30 <_read_r+0x18>
 8007e38:	6033      	str	r3, [r6, #0]
 8007e3a:	bd70      	pop	{r4, r5, r6, pc}
 8007e3c:	2000fd6c 	.word	0x2000fd6c

08007e40 <cleanup_glue>:
 8007e40:	b538      	push	{r3, r4, r5, lr}
 8007e42:	460c      	mov	r4, r1
 8007e44:	6809      	ldr	r1, [r1, #0]
 8007e46:	4605      	mov	r5, r0
 8007e48:	b109      	cbz	r1, 8007e4e <cleanup_glue+0xe>
 8007e4a:	f7ff fff9 	bl	8007e40 <cleanup_glue>
 8007e4e:	4628      	mov	r0, r5
 8007e50:	4621      	mov	r1, r4
 8007e52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e56:	f7fd b907 	b.w	8005068 <_free_r>
 8007e5a:	bf00      	nop

08007e5c <_reclaim_reent>:
 8007e5c:	4b22      	ldr	r3, [pc, #136]	; (8007ee8 <_reclaim_reent+0x8c>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4298      	cmp	r0, r3
 8007e62:	b570      	push	{r4, r5, r6, lr}
 8007e64:	4605      	mov	r5, r0
 8007e66:	d032      	beq.n	8007ece <_reclaim_reent+0x72>
 8007e68:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8007e6a:	b1aa      	cbz	r2, 8007e98 <_reclaim_reent+0x3c>
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	461e      	mov	r6, r3
 8007e70:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007e74:	b909      	cbnz	r1, 8007e7a <_reclaim_reent+0x1e>
 8007e76:	e007      	b.n	8007e88 <_reclaim_reent+0x2c>
 8007e78:	4621      	mov	r1, r4
 8007e7a:	680c      	ldr	r4, [r1, #0]
 8007e7c:	4628      	mov	r0, r5
 8007e7e:	f7fd f8f3 	bl	8005068 <_free_r>
 8007e82:	2c00      	cmp	r4, #0
 8007e84:	d1f8      	bne.n	8007e78 <_reclaim_reent+0x1c>
 8007e86:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 8007e88:	3601      	adds	r6, #1
 8007e8a:	2e20      	cmp	r6, #32
 8007e8c:	4633      	mov	r3, r6
 8007e8e:	d1ef      	bne.n	8007e70 <_reclaim_reent+0x14>
 8007e90:	4611      	mov	r1, r2
 8007e92:	4628      	mov	r0, r5
 8007e94:	f7fd f8e8 	bl	8005068 <_free_r>
 8007e98:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8007e9a:	b111      	cbz	r1, 8007ea2 <_reclaim_reent+0x46>
 8007e9c:	4628      	mov	r0, r5
 8007e9e:	f7fd f8e3 	bl	8005068 <_free_r>
 8007ea2:	f8d5 1148 	ldr.w	r1, [r5, #328]	; 0x148
 8007ea6:	b159      	cbz	r1, 8007ec0 <_reclaim_reent+0x64>
 8007ea8:	f505 76a6 	add.w	r6, r5, #332	; 0x14c
 8007eac:	42b1      	cmp	r1, r6
 8007eae:	d101      	bne.n	8007eb4 <_reclaim_reent+0x58>
 8007eb0:	e006      	b.n	8007ec0 <_reclaim_reent+0x64>
 8007eb2:	4621      	mov	r1, r4
 8007eb4:	680c      	ldr	r4, [r1, #0]
 8007eb6:	4628      	mov	r0, r5
 8007eb8:	f7fd f8d6 	bl	8005068 <_free_r>
 8007ebc:	42a6      	cmp	r6, r4
 8007ebe:	d1f8      	bne.n	8007eb2 <_reclaim_reent+0x56>
 8007ec0:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8007ec2:	b111      	cbz	r1, 8007eca <_reclaim_reent+0x6e>
 8007ec4:	4628      	mov	r0, r5
 8007ec6:	f7fd f8cf 	bl	8005068 <_free_r>
 8007eca:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8007ecc:	b903      	cbnz	r3, 8007ed0 <_reclaim_reent+0x74>
 8007ece:	bd70      	pop	{r4, r5, r6, pc}
 8007ed0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8007ed2:	4628      	mov	r0, r5
 8007ed4:	4798      	blx	r3
 8007ed6:	f8d5 12e0 	ldr.w	r1, [r5, #736]	; 0x2e0
 8007eda:	2900      	cmp	r1, #0
 8007edc:	d0f7      	beq.n	8007ece <_reclaim_reent+0x72>
 8007ede:	4628      	mov	r0, r5
 8007ee0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007ee4:	f7ff bfac 	b.w	8007e40 <cleanup_glue>
 8007ee8:	20000498 	.word	0x20000498

08007eec <__swbuf_r>:
 8007eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eee:	460d      	mov	r5, r1
 8007ef0:	4614      	mov	r4, r2
 8007ef2:	4607      	mov	r7, r0
 8007ef4:	b110      	cbz	r0, 8007efc <__swbuf_r+0x10>
 8007ef6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d048      	beq.n	8007f8e <__swbuf_r+0xa2>
 8007efc:	89a2      	ldrh	r2, [r4, #12]
 8007efe:	69a3      	ldr	r3, [r4, #24]
 8007f00:	60a3      	str	r3, [r4, #8]
 8007f02:	b293      	uxth	r3, r2
 8007f04:	0718      	lsls	r0, r3, #28
 8007f06:	d538      	bpl.n	8007f7a <__swbuf_r+0x8e>
 8007f08:	6926      	ldr	r6, [r4, #16]
 8007f0a:	2e00      	cmp	r6, #0
 8007f0c:	d035      	beq.n	8007f7a <__swbuf_r+0x8e>
 8007f0e:	0499      	lsls	r1, r3, #18
 8007f10:	b2ed      	uxtb	r5, r5
 8007f12:	d515      	bpl.n	8007f40 <__swbuf_r+0x54>
 8007f14:	6823      	ldr	r3, [r4, #0]
 8007f16:	6962      	ldr	r2, [r4, #20]
 8007f18:	1b9e      	subs	r6, r3, r6
 8007f1a:	4296      	cmp	r6, r2
 8007f1c:	da1c      	bge.n	8007f58 <__swbuf_r+0x6c>
 8007f1e:	3601      	adds	r6, #1
 8007f20:	68a2      	ldr	r2, [r4, #8]
 8007f22:	1c59      	adds	r1, r3, #1
 8007f24:	3a01      	subs	r2, #1
 8007f26:	60a2      	str	r2, [r4, #8]
 8007f28:	6021      	str	r1, [r4, #0]
 8007f2a:	701d      	strb	r5, [r3, #0]
 8007f2c:	6963      	ldr	r3, [r4, #20]
 8007f2e:	42b3      	cmp	r3, r6
 8007f30:	d01a      	beq.n	8007f68 <__swbuf_r+0x7c>
 8007f32:	89a3      	ldrh	r3, [r4, #12]
 8007f34:	07db      	lsls	r3, r3, #31
 8007f36:	d501      	bpl.n	8007f3c <__swbuf_r+0x50>
 8007f38:	2d0a      	cmp	r5, #10
 8007f3a:	d015      	beq.n	8007f68 <__swbuf_r+0x7c>
 8007f3c:	4628      	mov	r0, r5
 8007f3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007f46:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f4a:	6663      	str	r3, [r4, #100]	; 0x64
 8007f4c:	6823      	ldr	r3, [r4, #0]
 8007f4e:	81a2      	strh	r2, [r4, #12]
 8007f50:	6962      	ldr	r2, [r4, #20]
 8007f52:	1b9e      	subs	r6, r3, r6
 8007f54:	4296      	cmp	r6, r2
 8007f56:	dbe2      	blt.n	8007f1e <__swbuf_r+0x32>
 8007f58:	4638      	mov	r0, r7
 8007f5a:	4621      	mov	r1, r4
 8007f5c:	f7fc feee 	bl	8004d3c <_fflush_r>
 8007f60:	b940      	cbnz	r0, 8007f74 <__swbuf_r+0x88>
 8007f62:	6823      	ldr	r3, [r4, #0]
 8007f64:	2601      	movs	r6, #1
 8007f66:	e7db      	b.n	8007f20 <__swbuf_r+0x34>
 8007f68:	4638      	mov	r0, r7
 8007f6a:	4621      	mov	r1, r4
 8007f6c:	f7fc fee6 	bl	8004d3c <_fflush_r>
 8007f70:	2800      	cmp	r0, #0
 8007f72:	d0e3      	beq.n	8007f3c <__swbuf_r+0x50>
 8007f74:	f04f 30ff 	mov.w	r0, #4294967295
 8007f78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f7a:	4638      	mov	r0, r7
 8007f7c:	4621      	mov	r1, r4
 8007f7e:	f7fb fd83 	bl	8003a88 <__swsetup_r>
 8007f82:	2800      	cmp	r0, #0
 8007f84:	d1f6      	bne.n	8007f74 <__swbuf_r+0x88>
 8007f86:	89a2      	ldrh	r2, [r4, #12]
 8007f88:	6926      	ldr	r6, [r4, #16]
 8007f8a:	b293      	uxth	r3, r2
 8007f8c:	e7bf      	b.n	8007f0e <__swbuf_r+0x22>
 8007f8e:	f7fc ff29 	bl	8004de4 <__sinit>
 8007f92:	e7b3      	b.n	8007efc <__swbuf_r+0x10>

08007f94 <__swbuf>:
 8007f94:	4b02      	ldr	r3, [pc, #8]	; (8007fa0 <__swbuf+0xc>)
 8007f96:	460a      	mov	r2, r1
 8007f98:	4601      	mov	r1, r0
 8007f9a:	6818      	ldr	r0, [r3, #0]
 8007f9c:	f7ff bfa6 	b.w	8007eec <__swbuf_r>
 8007fa0:	20000498 	.word	0x20000498

08007fa4 <_wcrtomb_r>:
 8007fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fa8:	461e      	mov	r6, r3
 8007faa:	b086      	sub	sp, #24
 8007fac:	460c      	mov	r4, r1
 8007fae:	4605      	mov	r5, r0
 8007fb0:	4617      	mov	r7, r2
 8007fb2:	4b0f      	ldr	r3, [pc, #60]	; (8007ff0 <_wcrtomb_r+0x4c>)
 8007fb4:	b191      	cbz	r1, 8007fdc <_wcrtomb_r+0x38>
 8007fb6:	f8d3 8000 	ldr.w	r8, [r3]
 8007fba:	f7fd fb1b 	bl	80055f4 <__locale_charset>
 8007fbe:	9600      	str	r6, [sp, #0]
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	4621      	mov	r1, r4
 8007fc4:	463a      	mov	r2, r7
 8007fc6:	4628      	mov	r0, r5
 8007fc8:	47c0      	blx	r8
 8007fca:	1c43      	adds	r3, r0, #1
 8007fcc:	d103      	bne.n	8007fd6 <_wcrtomb_r+0x32>
 8007fce:	2200      	movs	r2, #0
 8007fd0:	238a      	movs	r3, #138	; 0x8a
 8007fd2:	6032      	str	r2, [r6, #0]
 8007fd4:	602b      	str	r3, [r5, #0]
 8007fd6:	b006      	add	sp, #24
 8007fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fdc:	681f      	ldr	r7, [r3, #0]
 8007fde:	f7fd fb09 	bl	80055f4 <__locale_charset>
 8007fe2:	9600      	str	r6, [sp, #0]
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	4622      	mov	r2, r4
 8007fe8:	4628      	mov	r0, r5
 8007fea:	a903      	add	r1, sp, #12
 8007fec:	47b8      	blx	r7
 8007fee:	e7ec      	b.n	8007fca <_wcrtomb_r+0x26>
 8007ff0:	20000928 	.word	0x20000928

08007ff4 <wcrtomb>:
 8007ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ff8:	4b12      	ldr	r3, [pc, #72]	; (8008044 <wcrtomb+0x50>)
 8007ffa:	b086      	sub	sp, #24
 8007ffc:	681d      	ldr	r5, [r3, #0]
 8007ffe:	4b12      	ldr	r3, [pc, #72]	; (8008048 <wcrtomb+0x54>)
 8008000:	4604      	mov	r4, r0
 8008002:	460f      	mov	r7, r1
 8008004:	4616      	mov	r6, r2
 8008006:	b190      	cbz	r0, 800802e <wcrtomb+0x3a>
 8008008:	f8d3 8000 	ldr.w	r8, [r3]
 800800c:	f7fd faf2 	bl	80055f4 <__locale_charset>
 8008010:	9600      	str	r6, [sp, #0]
 8008012:	4603      	mov	r3, r0
 8008014:	4621      	mov	r1, r4
 8008016:	463a      	mov	r2, r7
 8008018:	4628      	mov	r0, r5
 800801a:	47c0      	blx	r8
 800801c:	1c43      	adds	r3, r0, #1
 800801e:	d103      	bne.n	8008028 <wcrtomb+0x34>
 8008020:	2200      	movs	r2, #0
 8008022:	238a      	movs	r3, #138	; 0x8a
 8008024:	6032      	str	r2, [r6, #0]
 8008026:	602b      	str	r3, [r5, #0]
 8008028:	b006      	add	sp, #24
 800802a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800802e:	681f      	ldr	r7, [r3, #0]
 8008030:	f7fd fae0 	bl	80055f4 <__locale_charset>
 8008034:	9600      	str	r6, [sp, #0]
 8008036:	4603      	mov	r3, r0
 8008038:	4622      	mov	r2, r4
 800803a:	4628      	mov	r0, r5
 800803c:	a903      	add	r1, sp, #12
 800803e:	47b8      	blx	r7
 8008040:	e7ec      	b.n	800801c <wcrtomb+0x28>
 8008042:	bf00      	nop
 8008044:	20000498 	.word	0x20000498
 8008048:	20000928 	.word	0x20000928

0800804c <__ascii_wctomb>:
 800804c:	b121      	cbz	r1, 8008058 <__ascii_wctomb+0xc>
 800804e:	2aff      	cmp	r2, #255	; 0xff
 8008050:	d804      	bhi.n	800805c <__ascii_wctomb+0x10>
 8008052:	700a      	strb	r2, [r1, #0]
 8008054:	2001      	movs	r0, #1
 8008056:	4770      	bx	lr
 8008058:	4608      	mov	r0, r1
 800805a:	4770      	bx	lr
 800805c:	238a      	movs	r3, #138	; 0x8a
 800805e:	6003      	str	r3, [r0, #0]
 8008060:	f04f 30ff 	mov.w	r0, #4294967295
 8008064:	4770      	bx	lr
 8008066:	bf00      	nop

08008068 <_wctomb_r>:
 8008068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800806c:	4c09      	ldr	r4, [pc, #36]	; (8008094 <_wctomb_r+0x2c>)
 800806e:	b082      	sub	sp, #8
 8008070:	4698      	mov	r8, r3
 8008072:	4605      	mov	r5, r0
 8008074:	460f      	mov	r7, r1
 8008076:	4616      	mov	r6, r2
 8008078:	6824      	ldr	r4, [r4, #0]
 800807a:	f7fd fabb 	bl	80055f4 <__locale_charset>
 800807e:	f8cd 8000 	str.w	r8, [sp]
 8008082:	4603      	mov	r3, r0
 8008084:	4639      	mov	r1, r7
 8008086:	4632      	mov	r2, r6
 8008088:	4628      	mov	r0, r5
 800808a:	47a0      	blx	r4
 800808c:	b002      	add	sp, #8
 800808e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008092:	bf00      	nop
 8008094:	20000928 	.word	0x20000928

08008098 <__aeabi_drsub>:
 8008098:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800809c:	e002      	b.n	80080a4 <__adddf3>
 800809e:	bf00      	nop

080080a0 <__aeabi_dsub>:
 80080a0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080080a4 <__adddf3>:
 80080a4:	b530      	push	{r4, r5, lr}
 80080a6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80080aa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80080ae:	ea94 0f05 	teq	r4, r5
 80080b2:	bf08      	it	eq
 80080b4:	ea90 0f02 	teqeq	r0, r2
 80080b8:	bf1f      	itttt	ne
 80080ba:	ea54 0c00 	orrsne.w	ip, r4, r0
 80080be:	ea55 0c02 	orrsne.w	ip, r5, r2
 80080c2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80080c6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80080ca:	f000 80e2 	beq.w	8008292 <__adddf3+0x1ee>
 80080ce:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80080d2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80080d6:	bfb8      	it	lt
 80080d8:	426d      	neglt	r5, r5
 80080da:	dd0c      	ble.n	80080f6 <__adddf3+0x52>
 80080dc:	442c      	add	r4, r5
 80080de:	ea80 0202 	eor.w	r2, r0, r2
 80080e2:	ea81 0303 	eor.w	r3, r1, r3
 80080e6:	ea82 0000 	eor.w	r0, r2, r0
 80080ea:	ea83 0101 	eor.w	r1, r3, r1
 80080ee:	ea80 0202 	eor.w	r2, r0, r2
 80080f2:	ea81 0303 	eor.w	r3, r1, r3
 80080f6:	2d36      	cmp	r5, #54	; 0x36
 80080f8:	bf88      	it	hi
 80080fa:	bd30      	pophi	{r4, r5, pc}
 80080fc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008100:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8008104:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8008108:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800810c:	d002      	beq.n	8008114 <__adddf3+0x70>
 800810e:	4240      	negs	r0, r0
 8008110:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008114:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8008118:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800811c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008120:	d002      	beq.n	8008128 <__adddf3+0x84>
 8008122:	4252      	negs	r2, r2
 8008124:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008128:	ea94 0f05 	teq	r4, r5
 800812c:	f000 80a7 	beq.w	800827e <__adddf3+0x1da>
 8008130:	f1a4 0401 	sub.w	r4, r4, #1
 8008134:	f1d5 0e20 	rsbs	lr, r5, #32
 8008138:	db0d      	blt.n	8008156 <__adddf3+0xb2>
 800813a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800813e:	fa22 f205 	lsr.w	r2, r2, r5
 8008142:	1880      	adds	r0, r0, r2
 8008144:	f141 0100 	adc.w	r1, r1, #0
 8008148:	fa03 f20e 	lsl.w	r2, r3, lr
 800814c:	1880      	adds	r0, r0, r2
 800814e:	fa43 f305 	asr.w	r3, r3, r5
 8008152:	4159      	adcs	r1, r3
 8008154:	e00e      	b.n	8008174 <__adddf3+0xd0>
 8008156:	f1a5 0520 	sub.w	r5, r5, #32
 800815a:	f10e 0e20 	add.w	lr, lr, #32
 800815e:	2a01      	cmp	r2, #1
 8008160:	fa03 fc0e 	lsl.w	ip, r3, lr
 8008164:	bf28      	it	cs
 8008166:	f04c 0c02 	orrcs.w	ip, ip, #2
 800816a:	fa43 f305 	asr.w	r3, r3, r5
 800816e:	18c0      	adds	r0, r0, r3
 8008170:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8008174:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008178:	d507      	bpl.n	800818a <__adddf3+0xe6>
 800817a:	f04f 0e00 	mov.w	lr, #0
 800817e:	f1dc 0c00 	rsbs	ip, ip, #0
 8008182:	eb7e 0000 	sbcs.w	r0, lr, r0
 8008186:	eb6e 0101 	sbc.w	r1, lr, r1
 800818a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800818e:	d31b      	bcc.n	80081c8 <__adddf3+0x124>
 8008190:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8008194:	d30c      	bcc.n	80081b0 <__adddf3+0x10c>
 8008196:	0849      	lsrs	r1, r1, #1
 8008198:	ea5f 0030 	movs.w	r0, r0, rrx
 800819c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80081a0:	f104 0401 	add.w	r4, r4, #1
 80081a4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80081a8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80081ac:	f080 809a 	bcs.w	80082e4 <__adddf3+0x240>
 80081b0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80081b4:	bf08      	it	eq
 80081b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80081ba:	f150 0000 	adcs.w	r0, r0, #0
 80081be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80081c2:	ea41 0105 	orr.w	r1, r1, r5
 80081c6:	bd30      	pop	{r4, r5, pc}
 80081c8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80081cc:	4140      	adcs	r0, r0
 80081ce:	eb41 0101 	adc.w	r1, r1, r1
 80081d2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80081d6:	f1a4 0401 	sub.w	r4, r4, #1
 80081da:	d1e9      	bne.n	80081b0 <__adddf3+0x10c>
 80081dc:	f091 0f00 	teq	r1, #0
 80081e0:	bf04      	itt	eq
 80081e2:	4601      	moveq	r1, r0
 80081e4:	2000      	moveq	r0, #0
 80081e6:	fab1 f381 	clz	r3, r1
 80081ea:	bf08      	it	eq
 80081ec:	3320      	addeq	r3, #32
 80081ee:	f1a3 030b 	sub.w	r3, r3, #11
 80081f2:	f1b3 0220 	subs.w	r2, r3, #32
 80081f6:	da0c      	bge.n	8008212 <__adddf3+0x16e>
 80081f8:	320c      	adds	r2, #12
 80081fa:	dd08      	ble.n	800820e <__adddf3+0x16a>
 80081fc:	f102 0c14 	add.w	ip, r2, #20
 8008200:	f1c2 020c 	rsb	r2, r2, #12
 8008204:	fa01 f00c 	lsl.w	r0, r1, ip
 8008208:	fa21 f102 	lsr.w	r1, r1, r2
 800820c:	e00c      	b.n	8008228 <__adddf3+0x184>
 800820e:	f102 0214 	add.w	r2, r2, #20
 8008212:	bfd8      	it	le
 8008214:	f1c2 0c20 	rsble	ip, r2, #32
 8008218:	fa01 f102 	lsl.w	r1, r1, r2
 800821c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008220:	bfdc      	itt	le
 8008222:	ea41 010c 	orrle.w	r1, r1, ip
 8008226:	4090      	lslle	r0, r2
 8008228:	1ae4      	subs	r4, r4, r3
 800822a:	bfa2      	ittt	ge
 800822c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008230:	4329      	orrge	r1, r5
 8008232:	bd30      	popge	{r4, r5, pc}
 8008234:	ea6f 0404 	mvn.w	r4, r4
 8008238:	3c1f      	subs	r4, #31
 800823a:	da1c      	bge.n	8008276 <__adddf3+0x1d2>
 800823c:	340c      	adds	r4, #12
 800823e:	dc0e      	bgt.n	800825e <__adddf3+0x1ba>
 8008240:	f104 0414 	add.w	r4, r4, #20
 8008244:	f1c4 0220 	rsb	r2, r4, #32
 8008248:	fa20 f004 	lsr.w	r0, r0, r4
 800824c:	fa01 f302 	lsl.w	r3, r1, r2
 8008250:	ea40 0003 	orr.w	r0, r0, r3
 8008254:	fa21 f304 	lsr.w	r3, r1, r4
 8008258:	ea45 0103 	orr.w	r1, r5, r3
 800825c:	bd30      	pop	{r4, r5, pc}
 800825e:	f1c4 040c 	rsb	r4, r4, #12
 8008262:	f1c4 0220 	rsb	r2, r4, #32
 8008266:	fa20 f002 	lsr.w	r0, r0, r2
 800826a:	fa01 f304 	lsl.w	r3, r1, r4
 800826e:	ea40 0003 	orr.w	r0, r0, r3
 8008272:	4629      	mov	r1, r5
 8008274:	bd30      	pop	{r4, r5, pc}
 8008276:	fa21 f004 	lsr.w	r0, r1, r4
 800827a:	4629      	mov	r1, r5
 800827c:	bd30      	pop	{r4, r5, pc}
 800827e:	f094 0f00 	teq	r4, #0
 8008282:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8008286:	bf06      	itte	eq
 8008288:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800828c:	3401      	addeq	r4, #1
 800828e:	3d01      	subne	r5, #1
 8008290:	e74e      	b.n	8008130 <__adddf3+0x8c>
 8008292:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8008296:	bf18      	it	ne
 8008298:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800829c:	d029      	beq.n	80082f2 <__adddf3+0x24e>
 800829e:	ea94 0f05 	teq	r4, r5
 80082a2:	bf08      	it	eq
 80082a4:	ea90 0f02 	teqeq	r0, r2
 80082a8:	d005      	beq.n	80082b6 <__adddf3+0x212>
 80082aa:	ea54 0c00 	orrs.w	ip, r4, r0
 80082ae:	bf04      	itt	eq
 80082b0:	4619      	moveq	r1, r3
 80082b2:	4610      	moveq	r0, r2
 80082b4:	bd30      	pop	{r4, r5, pc}
 80082b6:	ea91 0f03 	teq	r1, r3
 80082ba:	bf1e      	ittt	ne
 80082bc:	2100      	movne	r1, #0
 80082be:	2000      	movne	r0, #0
 80082c0:	bd30      	popne	{r4, r5, pc}
 80082c2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80082c6:	d105      	bne.n	80082d4 <__adddf3+0x230>
 80082c8:	0040      	lsls	r0, r0, #1
 80082ca:	4149      	adcs	r1, r1
 80082cc:	bf28      	it	cs
 80082ce:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80082d2:	bd30      	pop	{r4, r5, pc}
 80082d4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80082d8:	bf3c      	itt	cc
 80082da:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80082de:	bd30      	popcc	{r4, r5, pc}
 80082e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80082e4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80082e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80082ec:	f04f 0000 	mov.w	r0, #0
 80082f0:	bd30      	pop	{r4, r5, pc}
 80082f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80082f6:	bf1a      	itte	ne
 80082f8:	4619      	movne	r1, r3
 80082fa:	4610      	movne	r0, r2
 80082fc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008300:	bf1c      	itt	ne
 8008302:	460b      	movne	r3, r1
 8008304:	4602      	movne	r2, r0
 8008306:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800830a:	bf06      	itte	eq
 800830c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008310:	ea91 0f03 	teqeq	r1, r3
 8008314:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8008318:	bd30      	pop	{r4, r5, pc}
 800831a:	bf00      	nop

0800831c <__aeabi_ui2d>:
 800831c:	f090 0f00 	teq	r0, #0
 8008320:	bf04      	itt	eq
 8008322:	2100      	moveq	r1, #0
 8008324:	4770      	bxeq	lr
 8008326:	b530      	push	{r4, r5, lr}
 8008328:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800832c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008330:	f04f 0500 	mov.w	r5, #0
 8008334:	f04f 0100 	mov.w	r1, #0
 8008338:	e750      	b.n	80081dc <__adddf3+0x138>
 800833a:	bf00      	nop

0800833c <__aeabi_i2d>:
 800833c:	f090 0f00 	teq	r0, #0
 8008340:	bf04      	itt	eq
 8008342:	2100      	moveq	r1, #0
 8008344:	4770      	bxeq	lr
 8008346:	b530      	push	{r4, r5, lr}
 8008348:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800834c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008350:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8008354:	bf48      	it	mi
 8008356:	4240      	negmi	r0, r0
 8008358:	f04f 0100 	mov.w	r1, #0
 800835c:	e73e      	b.n	80081dc <__adddf3+0x138>
 800835e:	bf00      	nop

08008360 <__aeabi_f2d>:
 8008360:	0042      	lsls	r2, r0, #1
 8008362:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8008366:	ea4f 0131 	mov.w	r1, r1, rrx
 800836a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800836e:	bf1f      	itttt	ne
 8008370:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8008374:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8008378:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800837c:	4770      	bxne	lr
 800837e:	f092 0f00 	teq	r2, #0
 8008382:	bf14      	ite	ne
 8008384:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8008388:	4770      	bxeq	lr
 800838a:	b530      	push	{r4, r5, lr}
 800838c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8008390:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008394:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008398:	e720      	b.n	80081dc <__adddf3+0x138>
 800839a:	bf00      	nop

0800839c <__aeabi_ul2d>:
 800839c:	ea50 0201 	orrs.w	r2, r0, r1
 80083a0:	bf08      	it	eq
 80083a2:	4770      	bxeq	lr
 80083a4:	b530      	push	{r4, r5, lr}
 80083a6:	f04f 0500 	mov.w	r5, #0
 80083aa:	e00a      	b.n	80083c2 <__aeabi_l2d+0x16>

080083ac <__aeabi_l2d>:
 80083ac:	ea50 0201 	orrs.w	r2, r0, r1
 80083b0:	bf08      	it	eq
 80083b2:	4770      	bxeq	lr
 80083b4:	b530      	push	{r4, r5, lr}
 80083b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80083ba:	d502      	bpl.n	80083c2 <__aeabi_l2d+0x16>
 80083bc:	4240      	negs	r0, r0
 80083be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80083c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80083c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80083ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80083ce:	f43f aedc 	beq.w	800818a <__adddf3+0xe6>
 80083d2:	f04f 0203 	mov.w	r2, #3
 80083d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80083da:	bf18      	it	ne
 80083dc:	3203      	addne	r2, #3
 80083de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80083e2:	bf18      	it	ne
 80083e4:	3203      	addne	r2, #3
 80083e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80083ea:	f1c2 0320 	rsb	r3, r2, #32
 80083ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80083f2:	fa20 f002 	lsr.w	r0, r0, r2
 80083f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80083fa:	ea40 000e 	orr.w	r0, r0, lr
 80083fe:	fa21 f102 	lsr.w	r1, r1, r2
 8008402:	4414      	add	r4, r2
 8008404:	e6c1      	b.n	800818a <__adddf3+0xe6>
 8008406:	bf00      	nop

08008408 <__aeabi_dmul>:
 8008408:	b570      	push	{r4, r5, r6, lr}
 800840a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800840e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008412:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008416:	bf1d      	ittte	ne
 8008418:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800841c:	ea94 0f0c 	teqne	r4, ip
 8008420:	ea95 0f0c 	teqne	r5, ip
 8008424:	f000 f8de 	bleq	80085e4 <__aeabi_dmul+0x1dc>
 8008428:	442c      	add	r4, r5
 800842a:	ea81 0603 	eor.w	r6, r1, r3
 800842e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8008432:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008436:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800843a:	bf18      	it	ne
 800843c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8008440:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008444:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008448:	d038      	beq.n	80084bc <__aeabi_dmul+0xb4>
 800844a:	fba0 ce02 	umull	ip, lr, r0, r2
 800844e:	f04f 0500 	mov.w	r5, #0
 8008452:	fbe1 e502 	umlal	lr, r5, r1, r2
 8008456:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800845a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800845e:	f04f 0600 	mov.w	r6, #0
 8008462:	fbe1 5603 	umlal	r5, r6, r1, r3
 8008466:	f09c 0f00 	teq	ip, #0
 800846a:	bf18      	it	ne
 800846c:	f04e 0e01 	orrne.w	lr, lr, #1
 8008470:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8008474:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8008478:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800847c:	d204      	bcs.n	8008488 <__aeabi_dmul+0x80>
 800847e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8008482:	416d      	adcs	r5, r5
 8008484:	eb46 0606 	adc.w	r6, r6, r6
 8008488:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800848c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8008490:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8008494:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8008498:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800849c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80084a0:	bf88      	it	hi
 80084a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80084a6:	d81e      	bhi.n	80084e6 <__aeabi_dmul+0xde>
 80084a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80084ac:	bf08      	it	eq
 80084ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80084b2:	f150 0000 	adcs.w	r0, r0, #0
 80084b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80084ba:	bd70      	pop	{r4, r5, r6, pc}
 80084bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80084c0:	ea46 0101 	orr.w	r1, r6, r1
 80084c4:	ea40 0002 	orr.w	r0, r0, r2
 80084c8:	ea81 0103 	eor.w	r1, r1, r3
 80084cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80084d0:	bfc2      	ittt	gt
 80084d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80084d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80084da:	bd70      	popgt	{r4, r5, r6, pc}
 80084dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80084e0:	f04f 0e00 	mov.w	lr, #0
 80084e4:	3c01      	subs	r4, #1
 80084e6:	f300 80ab 	bgt.w	8008640 <__aeabi_dmul+0x238>
 80084ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80084ee:	bfde      	ittt	le
 80084f0:	2000      	movle	r0, #0
 80084f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80084f6:	bd70      	pople	{r4, r5, r6, pc}
 80084f8:	f1c4 0400 	rsb	r4, r4, #0
 80084fc:	3c20      	subs	r4, #32
 80084fe:	da35      	bge.n	800856c <__aeabi_dmul+0x164>
 8008500:	340c      	adds	r4, #12
 8008502:	dc1b      	bgt.n	800853c <__aeabi_dmul+0x134>
 8008504:	f104 0414 	add.w	r4, r4, #20
 8008508:	f1c4 0520 	rsb	r5, r4, #32
 800850c:	fa00 f305 	lsl.w	r3, r0, r5
 8008510:	fa20 f004 	lsr.w	r0, r0, r4
 8008514:	fa01 f205 	lsl.w	r2, r1, r5
 8008518:	ea40 0002 	orr.w	r0, r0, r2
 800851c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8008520:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008524:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008528:	fa21 f604 	lsr.w	r6, r1, r4
 800852c:	eb42 0106 	adc.w	r1, r2, r6
 8008530:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008534:	bf08      	it	eq
 8008536:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800853a:	bd70      	pop	{r4, r5, r6, pc}
 800853c:	f1c4 040c 	rsb	r4, r4, #12
 8008540:	f1c4 0520 	rsb	r5, r4, #32
 8008544:	fa00 f304 	lsl.w	r3, r0, r4
 8008548:	fa20 f005 	lsr.w	r0, r0, r5
 800854c:	fa01 f204 	lsl.w	r2, r1, r4
 8008550:	ea40 0002 	orr.w	r0, r0, r2
 8008554:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008558:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800855c:	f141 0100 	adc.w	r1, r1, #0
 8008560:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008564:	bf08      	it	eq
 8008566:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800856a:	bd70      	pop	{r4, r5, r6, pc}
 800856c:	f1c4 0520 	rsb	r5, r4, #32
 8008570:	fa00 f205 	lsl.w	r2, r0, r5
 8008574:	ea4e 0e02 	orr.w	lr, lr, r2
 8008578:	fa20 f304 	lsr.w	r3, r0, r4
 800857c:	fa01 f205 	lsl.w	r2, r1, r5
 8008580:	ea43 0302 	orr.w	r3, r3, r2
 8008584:	fa21 f004 	lsr.w	r0, r1, r4
 8008588:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800858c:	fa21 f204 	lsr.w	r2, r1, r4
 8008590:	ea20 0002 	bic.w	r0, r0, r2
 8008594:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8008598:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800859c:	bf08      	it	eq
 800859e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80085a2:	bd70      	pop	{r4, r5, r6, pc}
 80085a4:	f094 0f00 	teq	r4, #0
 80085a8:	d10f      	bne.n	80085ca <__aeabi_dmul+0x1c2>
 80085aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80085ae:	0040      	lsls	r0, r0, #1
 80085b0:	eb41 0101 	adc.w	r1, r1, r1
 80085b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80085b8:	bf08      	it	eq
 80085ba:	3c01      	subeq	r4, #1
 80085bc:	d0f7      	beq.n	80085ae <__aeabi_dmul+0x1a6>
 80085be:	ea41 0106 	orr.w	r1, r1, r6
 80085c2:	f095 0f00 	teq	r5, #0
 80085c6:	bf18      	it	ne
 80085c8:	4770      	bxne	lr
 80085ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80085ce:	0052      	lsls	r2, r2, #1
 80085d0:	eb43 0303 	adc.w	r3, r3, r3
 80085d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80085d8:	bf08      	it	eq
 80085da:	3d01      	subeq	r5, #1
 80085dc:	d0f7      	beq.n	80085ce <__aeabi_dmul+0x1c6>
 80085de:	ea43 0306 	orr.w	r3, r3, r6
 80085e2:	4770      	bx	lr
 80085e4:	ea94 0f0c 	teq	r4, ip
 80085e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80085ec:	bf18      	it	ne
 80085ee:	ea95 0f0c 	teqne	r5, ip
 80085f2:	d00c      	beq.n	800860e <__aeabi_dmul+0x206>
 80085f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80085f8:	bf18      	it	ne
 80085fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80085fe:	d1d1      	bne.n	80085a4 <__aeabi_dmul+0x19c>
 8008600:	ea81 0103 	eor.w	r1, r1, r3
 8008604:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008608:	f04f 0000 	mov.w	r0, #0
 800860c:	bd70      	pop	{r4, r5, r6, pc}
 800860e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008612:	bf06      	itte	eq
 8008614:	4610      	moveq	r0, r2
 8008616:	4619      	moveq	r1, r3
 8008618:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800861c:	d019      	beq.n	8008652 <__aeabi_dmul+0x24a>
 800861e:	ea94 0f0c 	teq	r4, ip
 8008622:	d102      	bne.n	800862a <__aeabi_dmul+0x222>
 8008624:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008628:	d113      	bne.n	8008652 <__aeabi_dmul+0x24a>
 800862a:	ea95 0f0c 	teq	r5, ip
 800862e:	d105      	bne.n	800863c <__aeabi_dmul+0x234>
 8008630:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008634:	bf1c      	itt	ne
 8008636:	4610      	movne	r0, r2
 8008638:	4619      	movne	r1, r3
 800863a:	d10a      	bne.n	8008652 <__aeabi_dmul+0x24a>
 800863c:	ea81 0103 	eor.w	r1, r1, r3
 8008640:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008644:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8008648:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800864c:	f04f 0000 	mov.w	r0, #0
 8008650:	bd70      	pop	{r4, r5, r6, pc}
 8008652:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8008656:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800865a:	bd70      	pop	{r4, r5, r6, pc}

0800865c <__aeabi_ddiv>:
 800865c:	b570      	push	{r4, r5, r6, lr}
 800865e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8008662:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008666:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800866a:	bf1d      	ittte	ne
 800866c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8008670:	ea94 0f0c 	teqne	r4, ip
 8008674:	ea95 0f0c 	teqne	r5, ip
 8008678:	f000 f8a7 	bleq	80087ca <__aeabi_ddiv+0x16e>
 800867c:	eba4 0405 	sub.w	r4, r4, r5
 8008680:	ea81 0e03 	eor.w	lr, r1, r3
 8008684:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008688:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800868c:	f000 8088 	beq.w	80087a0 <__aeabi_ddiv+0x144>
 8008690:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008694:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8008698:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800869c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80086a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80086a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80086a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80086ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80086b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80086b4:	429d      	cmp	r5, r3
 80086b6:	bf08      	it	eq
 80086b8:	4296      	cmpeq	r6, r2
 80086ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80086be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80086c2:	d202      	bcs.n	80086ca <__aeabi_ddiv+0x6e>
 80086c4:	085b      	lsrs	r3, r3, #1
 80086c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80086ca:	1ab6      	subs	r6, r6, r2
 80086cc:	eb65 0503 	sbc.w	r5, r5, r3
 80086d0:	085b      	lsrs	r3, r3, #1
 80086d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80086d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80086da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80086de:	ebb6 0e02 	subs.w	lr, r6, r2
 80086e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80086e6:	bf22      	ittt	cs
 80086e8:	1ab6      	subcs	r6, r6, r2
 80086ea:	4675      	movcs	r5, lr
 80086ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80086f0:	085b      	lsrs	r3, r3, #1
 80086f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80086f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80086fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80086fe:	bf22      	ittt	cs
 8008700:	1ab6      	subcs	r6, r6, r2
 8008702:	4675      	movcs	r5, lr
 8008704:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008708:	085b      	lsrs	r3, r3, #1
 800870a:	ea4f 0232 	mov.w	r2, r2, rrx
 800870e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008712:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008716:	bf22      	ittt	cs
 8008718:	1ab6      	subcs	r6, r6, r2
 800871a:	4675      	movcs	r5, lr
 800871c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008720:	085b      	lsrs	r3, r3, #1
 8008722:	ea4f 0232 	mov.w	r2, r2, rrx
 8008726:	ebb6 0e02 	subs.w	lr, r6, r2
 800872a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800872e:	bf22      	ittt	cs
 8008730:	1ab6      	subcs	r6, r6, r2
 8008732:	4675      	movcs	r5, lr
 8008734:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008738:	ea55 0e06 	orrs.w	lr, r5, r6
 800873c:	d018      	beq.n	8008770 <__aeabi_ddiv+0x114>
 800873e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8008742:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8008746:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800874a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800874e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8008752:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8008756:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800875a:	d1c0      	bne.n	80086de <__aeabi_ddiv+0x82>
 800875c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008760:	d10b      	bne.n	800877a <__aeabi_ddiv+0x11e>
 8008762:	ea41 0100 	orr.w	r1, r1, r0
 8008766:	f04f 0000 	mov.w	r0, #0
 800876a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800876e:	e7b6      	b.n	80086de <__aeabi_ddiv+0x82>
 8008770:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008774:	bf04      	itt	eq
 8008776:	4301      	orreq	r1, r0
 8008778:	2000      	moveq	r0, #0
 800877a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800877e:	bf88      	it	hi
 8008780:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008784:	f63f aeaf 	bhi.w	80084e6 <__aeabi_dmul+0xde>
 8008788:	ebb5 0c03 	subs.w	ip, r5, r3
 800878c:	bf04      	itt	eq
 800878e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8008792:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008796:	f150 0000 	adcs.w	r0, r0, #0
 800879a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800879e:	bd70      	pop	{r4, r5, r6, pc}
 80087a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80087a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80087a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80087ac:	bfc2      	ittt	gt
 80087ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80087b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80087b6:	bd70      	popgt	{r4, r5, r6, pc}
 80087b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80087bc:	f04f 0e00 	mov.w	lr, #0
 80087c0:	3c01      	subs	r4, #1
 80087c2:	e690      	b.n	80084e6 <__aeabi_dmul+0xde>
 80087c4:	ea45 0e06 	orr.w	lr, r5, r6
 80087c8:	e68d      	b.n	80084e6 <__aeabi_dmul+0xde>
 80087ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80087ce:	ea94 0f0c 	teq	r4, ip
 80087d2:	bf08      	it	eq
 80087d4:	ea95 0f0c 	teqeq	r5, ip
 80087d8:	f43f af3b 	beq.w	8008652 <__aeabi_dmul+0x24a>
 80087dc:	ea94 0f0c 	teq	r4, ip
 80087e0:	d10a      	bne.n	80087f8 <__aeabi_ddiv+0x19c>
 80087e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80087e6:	f47f af34 	bne.w	8008652 <__aeabi_dmul+0x24a>
 80087ea:	ea95 0f0c 	teq	r5, ip
 80087ee:	f47f af25 	bne.w	800863c <__aeabi_dmul+0x234>
 80087f2:	4610      	mov	r0, r2
 80087f4:	4619      	mov	r1, r3
 80087f6:	e72c      	b.n	8008652 <__aeabi_dmul+0x24a>
 80087f8:	ea95 0f0c 	teq	r5, ip
 80087fc:	d106      	bne.n	800880c <__aeabi_ddiv+0x1b0>
 80087fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008802:	f43f aefd 	beq.w	8008600 <__aeabi_dmul+0x1f8>
 8008806:	4610      	mov	r0, r2
 8008808:	4619      	mov	r1, r3
 800880a:	e722      	b.n	8008652 <__aeabi_dmul+0x24a>
 800880c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008810:	bf18      	it	ne
 8008812:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008816:	f47f aec5 	bne.w	80085a4 <__aeabi_dmul+0x19c>
 800881a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800881e:	f47f af0d 	bne.w	800863c <__aeabi_dmul+0x234>
 8008822:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008826:	f47f aeeb 	bne.w	8008600 <__aeabi_dmul+0x1f8>
 800882a:	e712      	b.n	8008652 <__aeabi_dmul+0x24a>

0800882c <__gedf2>:
 800882c:	f04f 3cff 	mov.w	ip, #4294967295
 8008830:	e006      	b.n	8008840 <__cmpdf2+0x4>
 8008832:	bf00      	nop

08008834 <__ledf2>:
 8008834:	f04f 0c01 	mov.w	ip, #1
 8008838:	e002      	b.n	8008840 <__cmpdf2+0x4>
 800883a:	bf00      	nop

0800883c <__cmpdf2>:
 800883c:	f04f 0c01 	mov.w	ip, #1
 8008840:	f84d cd04 	str.w	ip, [sp, #-4]!
 8008844:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008848:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800884c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008850:	bf18      	it	ne
 8008852:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8008856:	d01b      	beq.n	8008890 <__cmpdf2+0x54>
 8008858:	b001      	add	sp, #4
 800885a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800885e:	bf0c      	ite	eq
 8008860:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8008864:	ea91 0f03 	teqne	r1, r3
 8008868:	bf02      	ittt	eq
 800886a:	ea90 0f02 	teqeq	r0, r2
 800886e:	2000      	moveq	r0, #0
 8008870:	4770      	bxeq	lr
 8008872:	f110 0f00 	cmn.w	r0, #0
 8008876:	ea91 0f03 	teq	r1, r3
 800887a:	bf58      	it	pl
 800887c:	4299      	cmppl	r1, r3
 800887e:	bf08      	it	eq
 8008880:	4290      	cmpeq	r0, r2
 8008882:	bf2c      	ite	cs
 8008884:	17d8      	asrcs	r0, r3, #31
 8008886:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800888a:	f040 0001 	orr.w	r0, r0, #1
 800888e:	4770      	bx	lr
 8008890:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008894:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008898:	d102      	bne.n	80088a0 <__cmpdf2+0x64>
 800889a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800889e:	d107      	bne.n	80088b0 <__cmpdf2+0x74>
 80088a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80088a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088a8:	d1d6      	bne.n	8008858 <__cmpdf2+0x1c>
 80088aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80088ae:	d0d3      	beq.n	8008858 <__cmpdf2+0x1c>
 80088b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80088b4:	4770      	bx	lr
 80088b6:	bf00      	nop

080088b8 <__aeabi_cdrcmple>:
 80088b8:	4684      	mov	ip, r0
 80088ba:	4610      	mov	r0, r2
 80088bc:	4662      	mov	r2, ip
 80088be:	468c      	mov	ip, r1
 80088c0:	4619      	mov	r1, r3
 80088c2:	4663      	mov	r3, ip
 80088c4:	e000      	b.n	80088c8 <__aeabi_cdcmpeq>
 80088c6:	bf00      	nop

080088c8 <__aeabi_cdcmpeq>:
 80088c8:	b501      	push	{r0, lr}
 80088ca:	f7ff ffb7 	bl	800883c <__cmpdf2>
 80088ce:	2800      	cmp	r0, #0
 80088d0:	bf48      	it	mi
 80088d2:	f110 0f00 	cmnmi.w	r0, #0
 80088d6:	bd01      	pop	{r0, pc}

080088d8 <__aeabi_dcmpeq>:
 80088d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80088dc:	f7ff fff4 	bl	80088c8 <__aeabi_cdcmpeq>
 80088e0:	bf0c      	ite	eq
 80088e2:	2001      	moveq	r0, #1
 80088e4:	2000      	movne	r0, #0
 80088e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80088ea:	bf00      	nop

080088ec <__aeabi_dcmplt>:
 80088ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80088f0:	f7ff ffea 	bl	80088c8 <__aeabi_cdcmpeq>
 80088f4:	bf34      	ite	cc
 80088f6:	2001      	movcc	r0, #1
 80088f8:	2000      	movcs	r0, #0
 80088fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80088fe:	bf00      	nop

08008900 <__aeabi_dcmple>:
 8008900:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008904:	f7ff ffe0 	bl	80088c8 <__aeabi_cdcmpeq>
 8008908:	bf94      	ite	ls
 800890a:	2001      	movls	r0, #1
 800890c:	2000      	movhi	r0, #0
 800890e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008912:	bf00      	nop

08008914 <__aeabi_dcmpge>:
 8008914:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008918:	f7ff ffce 	bl	80088b8 <__aeabi_cdrcmple>
 800891c:	bf94      	ite	ls
 800891e:	2001      	movls	r0, #1
 8008920:	2000      	movhi	r0, #0
 8008922:	f85d fb08 	ldr.w	pc, [sp], #8
 8008926:	bf00      	nop

08008928 <__aeabi_dcmpgt>:
 8008928:	f84d ed08 	str.w	lr, [sp, #-8]!
 800892c:	f7ff ffc4 	bl	80088b8 <__aeabi_cdrcmple>
 8008930:	bf34      	ite	cc
 8008932:	2001      	movcc	r0, #1
 8008934:	2000      	movcs	r0, #0
 8008936:	f85d fb08 	ldr.w	pc, [sp], #8
 800893a:	bf00      	nop

0800893c <__aeabi_d2iz>:
 800893c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008940:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8008944:	d215      	bcs.n	8008972 <__aeabi_d2iz+0x36>
 8008946:	d511      	bpl.n	800896c <__aeabi_d2iz+0x30>
 8008948:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800894c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008950:	d912      	bls.n	8008978 <__aeabi_d2iz+0x3c>
 8008952:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008956:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800895a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800895e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008962:	fa23 f002 	lsr.w	r0, r3, r2
 8008966:	bf18      	it	ne
 8008968:	4240      	negne	r0, r0
 800896a:	4770      	bx	lr
 800896c:	f04f 0000 	mov.w	r0, #0
 8008970:	4770      	bx	lr
 8008972:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008976:	d105      	bne.n	8008984 <__aeabi_d2iz+0x48>
 8008978:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800897c:	bf08      	it	eq
 800897e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8008982:	4770      	bx	lr
 8008984:	f04f 0000 	mov.w	r0, #0
 8008988:	4770      	bx	lr
 800898a:	bf00      	nop

0800898c <__aeabi_uldivmod>:
 800898c:	b94b      	cbnz	r3, 80089a2 <__aeabi_uldivmod+0x16>
 800898e:	b942      	cbnz	r2, 80089a2 <__aeabi_uldivmod+0x16>
 8008990:	2900      	cmp	r1, #0
 8008992:	bf08      	it	eq
 8008994:	2800      	cmpeq	r0, #0
 8008996:	d002      	beq.n	800899e <__aeabi_uldivmod+0x12>
 8008998:	f04f 31ff 	mov.w	r1, #4294967295
 800899c:	4608      	mov	r0, r1
 800899e:	f000 b83b 	b.w	8008a18 <__aeabi_idiv0>
 80089a2:	b082      	sub	sp, #8
 80089a4:	46ec      	mov	ip, sp
 80089a6:	e92d 5000 	stmdb	sp!, {ip, lr}
 80089aa:	f000 f81d 	bl	80089e8 <__gnu_uldivmod_helper>
 80089ae:	f8dd e004 	ldr.w	lr, [sp, #4]
 80089b2:	b002      	add	sp, #8
 80089b4:	bc0c      	pop	{r2, r3}
 80089b6:	4770      	bx	lr

080089b8 <__gnu_ldivmod_helper>:
 80089b8:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 80089bc:	9e06      	ldr	r6, [sp, #24]
 80089be:	4614      	mov	r4, r2
 80089c0:	461d      	mov	r5, r3
 80089c2:	4680      	mov	r8, r0
 80089c4:	4689      	mov	r9, r1
 80089c6:	f000 f829 	bl	8008a1c <__divdi3>
 80089ca:	fb04 f301 	mul.w	r3, r4, r1
 80089ce:	fb00 3305 	mla	r3, r0, r5, r3
 80089d2:	fba4 4500 	umull	r4, r5, r4, r0
 80089d6:	441d      	add	r5, r3
 80089d8:	ebb8 0404 	subs.w	r4, r8, r4
 80089dc:	eb69 0505 	sbc.w	r5, r9, r5
 80089e0:	e9c6 4500 	strd	r4, r5, [r6]
 80089e4:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

080089e8 <__gnu_uldivmod_helper>:
 80089e8:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 80089ec:	9e06      	ldr	r6, [sp, #24]
 80089ee:	4614      	mov	r4, r2
 80089f0:	4680      	mov	r8, r0
 80089f2:	4689      	mov	r9, r1
 80089f4:	461d      	mov	r5, r3
 80089f6:	f000 f95d 	bl	8008cb4 <__udivdi3>
 80089fa:	fb00 f505 	mul.w	r5, r0, r5
 80089fe:	fb04 5301 	mla	r3, r4, r1, r5
 8008a02:	fba0 4504 	umull	r4, r5, r0, r4
 8008a06:	441d      	add	r5, r3
 8008a08:	ebb8 0404 	subs.w	r4, r8, r4
 8008a0c:	eb69 0505 	sbc.w	r5, r9, r5
 8008a10:	e9c6 4500 	strd	r4, r5, [r6]
 8008a14:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

08008a18 <__aeabi_idiv0>:
 8008a18:	4770      	bx	lr
 8008a1a:	bf00      	nop

08008a1c <__divdi3>:
 8008a1c:	2900      	cmp	r1, #0
 8008a1e:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008a22:	f2c0 809f 	blt.w	8008b64 <__divdi3+0x148>
 8008a26:	2400      	movs	r4, #0
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	f2c0 8096 	blt.w	8008b5a <__divdi3+0x13e>
 8008a2e:	4615      	mov	r5, r2
 8008a30:	4606      	mov	r6, r0
 8008a32:	460f      	mov	r7, r1
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d13e      	bne.n	8008ab6 <__divdi3+0x9a>
 8008a38:	428a      	cmp	r2, r1
 8008a3a:	d957      	bls.n	8008aec <__divdi3+0xd0>
 8008a3c:	fab2 f382 	clz	r3, r2
 8008a40:	b14b      	cbz	r3, 8008a56 <__divdi3+0x3a>
 8008a42:	f1c3 0220 	rsb	r2, r3, #32
 8008a46:	fa01 f703 	lsl.w	r7, r1, r3
 8008a4a:	fa20 f202 	lsr.w	r2, r0, r2
 8008a4e:	409d      	lsls	r5, r3
 8008a50:	4317      	orrs	r7, r2
 8008a52:	fa00 f603 	lsl.w	r6, r0, r3
 8008a56:	0c29      	lsrs	r1, r5, #16
 8008a58:	fbb7 f2f1 	udiv	r2, r7, r1
 8008a5c:	0c33      	lsrs	r3, r6, #16
 8008a5e:	fb01 7c12 	mls	ip, r1, r2, r7
 8008a62:	b2a8      	uxth	r0, r5
 8008a64:	ea43 470c 	orr.w	r7, r3, ip, lsl #16
 8008a68:	fb00 f302 	mul.w	r3, r0, r2
 8008a6c:	42bb      	cmp	r3, r7
 8008a6e:	d909      	bls.n	8008a84 <__divdi3+0x68>
 8008a70:	197f      	adds	r7, r7, r5
 8008a72:	f102 3cff 	add.w	ip, r2, #4294967295
 8008a76:	f080 8101 	bcs.w	8008c7c <__divdi3+0x260>
 8008a7a:	42bb      	cmp	r3, r7
 8008a7c:	f240 80fe 	bls.w	8008c7c <__divdi3+0x260>
 8008a80:	3a02      	subs	r2, #2
 8008a82:	442f      	add	r7, r5
 8008a84:	1aff      	subs	r7, r7, r3
 8008a86:	fbb7 f3f1 	udiv	r3, r7, r1
 8008a8a:	b2b6      	uxth	r6, r6
 8008a8c:	fb01 7113 	mls	r1, r1, r3, r7
 8008a90:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
 8008a94:	fb00 f003 	mul.w	r0, r0, r3
 8008a98:	4288      	cmp	r0, r1
 8008a9a:	d908      	bls.n	8008aae <__divdi3+0x92>
 8008a9c:	1949      	adds	r1, r1, r5
 8008a9e:	f103 37ff 	add.w	r7, r3, #4294967295
 8008aa2:	f080 80ed 	bcs.w	8008c80 <__divdi3+0x264>
 8008aa6:	4288      	cmp	r0, r1
 8008aa8:	f240 80ea 	bls.w	8008c80 <__divdi3+0x264>
 8008aac:	3b02      	subs	r3, #2
 8008aae:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	e003      	b.n	8008abe <__divdi3+0xa2>
 8008ab6:	428b      	cmp	r3, r1
 8008ab8:	d90a      	bls.n	8008ad0 <__divdi3+0xb4>
 8008aba:	2300      	movs	r3, #0
 8008abc:	461a      	mov	r2, r3
 8008abe:	4610      	mov	r0, r2
 8008ac0:	4619      	mov	r1, r3
 8008ac2:	b114      	cbz	r4, 8008aca <__divdi3+0xae>
 8008ac4:	4240      	negs	r0, r0
 8008ac6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008aca:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008ace:	4770      	bx	lr
 8008ad0:	fab3 f883 	clz	r8, r3
 8008ad4:	f1b8 0f00 	cmp.w	r8, #0
 8008ad8:	f040 8084 	bne.w	8008be4 <__divdi3+0x1c8>
 8008adc:	428b      	cmp	r3, r1
 8008ade:	d302      	bcc.n	8008ae6 <__divdi3+0xca>
 8008ae0:	4282      	cmp	r2, r0
 8008ae2:	f200 80de 	bhi.w	8008ca2 <__divdi3+0x286>
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	2201      	movs	r2, #1
 8008aea:	e7e8      	b.n	8008abe <__divdi3+0xa2>
 8008aec:	b912      	cbnz	r2, 8008af4 <__divdi3+0xd8>
 8008aee:	2301      	movs	r3, #1
 8008af0:	fbb3 f5f2 	udiv	r5, r3, r2
 8008af4:	fab5 f285 	clz	r2, r5
 8008af8:	2a00      	cmp	r2, #0
 8008afa:	d139      	bne.n	8008b70 <__divdi3+0x154>
 8008afc:	1b7f      	subs	r7, r7, r5
 8008afe:	0c28      	lsrs	r0, r5, #16
 8008b00:	fa1f fc85 	uxth.w	ip, r5
 8008b04:	2301      	movs	r3, #1
 8008b06:	fbb7 f1f0 	udiv	r1, r7, r0
 8008b0a:	0c32      	lsrs	r2, r6, #16
 8008b0c:	fb00 7711 	mls	r7, r0, r1, r7
 8008b10:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 8008b14:	fb0c f201 	mul.w	r2, ip, r1
 8008b18:	42ba      	cmp	r2, r7
 8008b1a:	d907      	bls.n	8008b2c <__divdi3+0x110>
 8008b1c:	197f      	adds	r7, r7, r5
 8008b1e:	f101 38ff 	add.w	r8, r1, #4294967295
 8008b22:	d202      	bcs.n	8008b2a <__divdi3+0x10e>
 8008b24:	42ba      	cmp	r2, r7
 8008b26:	f200 80c1 	bhi.w	8008cac <__divdi3+0x290>
 8008b2a:	4641      	mov	r1, r8
 8008b2c:	1abf      	subs	r7, r7, r2
 8008b2e:	fbb7 f2f0 	udiv	r2, r7, r0
 8008b32:	b2b6      	uxth	r6, r6
 8008b34:	fb00 7012 	mls	r0, r0, r2, r7
 8008b38:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
 8008b3c:	fb0c fc02 	mul.w	ip, ip, r2
 8008b40:	4584      	cmp	ip, r0
 8008b42:	d907      	bls.n	8008b54 <__divdi3+0x138>
 8008b44:	1940      	adds	r0, r0, r5
 8008b46:	f102 37ff 	add.w	r7, r2, #4294967295
 8008b4a:	d202      	bcs.n	8008b52 <__divdi3+0x136>
 8008b4c:	4584      	cmp	ip, r0
 8008b4e:	f200 80ab 	bhi.w	8008ca8 <__divdi3+0x28c>
 8008b52:	463a      	mov	r2, r7
 8008b54:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8008b58:	e7b1      	b.n	8008abe <__divdi3+0xa2>
 8008b5a:	43e4      	mvns	r4, r4
 8008b5c:	4252      	negs	r2, r2
 8008b5e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008b62:	e764      	b.n	8008a2e <__divdi3+0x12>
 8008b64:	4240      	negs	r0, r0
 8008b66:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008b6a:	f04f 34ff 	mov.w	r4, #4294967295
 8008b6e:	e75b      	b.n	8008a28 <__divdi3+0xc>
 8008b70:	4095      	lsls	r5, r2
 8008b72:	f1c2 0320 	rsb	r3, r2, #32
 8008b76:	fa27 f103 	lsr.w	r1, r7, r3
 8008b7a:	0c28      	lsrs	r0, r5, #16
 8008b7c:	fa26 f303 	lsr.w	r3, r6, r3
 8008b80:	4097      	lsls	r7, r2
 8008b82:	fbb1 f8f0 	udiv	r8, r1, r0
 8008b86:	431f      	orrs	r7, r3
 8008b88:	0c3b      	lsrs	r3, r7, #16
 8008b8a:	fb00 1118 	mls	r1, r0, r8, r1
 8008b8e:	fa1f fc85 	uxth.w	ip, r5
 8008b92:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8008b96:	fb0c f308 	mul.w	r3, ip, r8
 8008b9a:	428b      	cmp	r3, r1
 8008b9c:	fa06 f602 	lsl.w	r6, r6, r2
 8008ba0:	d908      	bls.n	8008bb4 <__divdi3+0x198>
 8008ba2:	1949      	adds	r1, r1, r5
 8008ba4:	f108 32ff 	add.w	r2, r8, #4294967295
 8008ba8:	d279      	bcs.n	8008c9e <__divdi3+0x282>
 8008baa:	428b      	cmp	r3, r1
 8008bac:	d977      	bls.n	8008c9e <__divdi3+0x282>
 8008bae:	f1a8 0802 	sub.w	r8, r8, #2
 8008bb2:	4429      	add	r1, r5
 8008bb4:	1ac9      	subs	r1, r1, r3
 8008bb6:	fbb1 f3f0 	udiv	r3, r1, r0
 8008bba:	b2bf      	uxth	r7, r7
 8008bbc:	fb00 1113 	mls	r1, r0, r3, r1
 8008bc0:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8008bc4:	fb0c f203 	mul.w	r2, ip, r3
 8008bc8:	42ba      	cmp	r2, r7
 8008bca:	d907      	bls.n	8008bdc <__divdi3+0x1c0>
 8008bcc:	197f      	adds	r7, r7, r5
 8008bce:	f103 31ff 	add.w	r1, r3, #4294967295
 8008bd2:	d260      	bcs.n	8008c96 <__divdi3+0x27a>
 8008bd4:	42ba      	cmp	r2, r7
 8008bd6:	d95e      	bls.n	8008c96 <__divdi3+0x27a>
 8008bd8:	3b02      	subs	r3, #2
 8008bda:	442f      	add	r7, r5
 8008bdc:	1abf      	subs	r7, r7, r2
 8008bde:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008be2:	e790      	b.n	8008b06 <__divdi3+0xea>
 8008be4:	f1c8 0220 	rsb	r2, r8, #32
 8008be8:	fa03 fc08 	lsl.w	ip, r3, r8
 8008bec:	fa25 f302 	lsr.w	r3, r5, r2
 8008bf0:	ea43 0c0c 	orr.w	ip, r3, ip
 8008bf4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8008bf8:	fa21 f302 	lsr.w	r3, r1, r2
 8008bfc:	fa01 f708 	lsl.w	r7, r1, r8
 8008c00:	fa20 f202 	lsr.w	r2, r0, r2
 8008c04:	fbb3 f1f9 	udiv	r1, r3, r9
 8008c08:	4317      	orrs	r7, r2
 8008c0a:	fb09 3311 	mls	r3, r9, r1, r3
 8008c0e:	0c3a      	lsrs	r2, r7, #16
 8008c10:	fa1f fb8c 	uxth.w	fp, ip
 8008c14:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8008c18:	fb0b fa01 	mul.w	sl, fp, r1
 8008c1c:	459a      	cmp	sl, r3
 8008c1e:	fa05 f008 	lsl.w	r0, r5, r8
 8008c22:	d908      	bls.n	8008c36 <__divdi3+0x21a>
 8008c24:	eb13 030c 	adds.w	r3, r3, ip
 8008c28:	f101 32ff 	add.w	r2, r1, #4294967295
 8008c2c:	d235      	bcs.n	8008c9a <__divdi3+0x27e>
 8008c2e:	459a      	cmp	sl, r3
 8008c30:	d933      	bls.n	8008c9a <__divdi3+0x27e>
 8008c32:	3902      	subs	r1, #2
 8008c34:	4463      	add	r3, ip
 8008c36:	ebca 0303 	rsb	r3, sl, r3
 8008c3a:	fbb3 f2f9 	udiv	r2, r3, r9
 8008c3e:	fb09 3312 	mls	r3, r9, r2, r3
 8008c42:	b2bf      	uxth	r7, r7
 8008c44:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
 8008c48:	fb0b f902 	mul.w	r9, fp, r2
 8008c4c:	45b9      	cmp	r9, r7
 8008c4e:	d908      	bls.n	8008c62 <__divdi3+0x246>
 8008c50:	eb17 070c 	adds.w	r7, r7, ip
 8008c54:	f102 33ff 	add.w	r3, r2, #4294967295
 8008c58:	d21b      	bcs.n	8008c92 <__divdi3+0x276>
 8008c5a:	45b9      	cmp	r9, r7
 8008c5c:	d919      	bls.n	8008c92 <__divdi3+0x276>
 8008c5e:	3a02      	subs	r2, #2
 8008c60:	4467      	add	r7, ip
 8008c62:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
 8008c66:	fba5 0100 	umull	r0, r1, r5, r0
 8008c6a:	ebc9 0707 	rsb	r7, r9, r7
 8008c6e:	428f      	cmp	r7, r1
 8008c70:	f04f 0300 	mov.w	r3, #0
 8008c74:	d30a      	bcc.n	8008c8c <__divdi3+0x270>
 8008c76:	d005      	beq.n	8008c84 <__divdi3+0x268>
 8008c78:	462a      	mov	r2, r5
 8008c7a:	e720      	b.n	8008abe <__divdi3+0xa2>
 8008c7c:	4662      	mov	r2, ip
 8008c7e:	e701      	b.n	8008a84 <__divdi3+0x68>
 8008c80:	463b      	mov	r3, r7
 8008c82:	e714      	b.n	8008aae <__divdi3+0x92>
 8008c84:	fa06 f608 	lsl.w	r6, r6, r8
 8008c88:	4286      	cmp	r6, r0
 8008c8a:	d2f5      	bcs.n	8008c78 <__divdi3+0x25c>
 8008c8c:	1e6a      	subs	r2, r5, #1
 8008c8e:	2300      	movs	r3, #0
 8008c90:	e715      	b.n	8008abe <__divdi3+0xa2>
 8008c92:	461a      	mov	r2, r3
 8008c94:	e7e5      	b.n	8008c62 <__divdi3+0x246>
 8008c96:	460b      	mov	r3, r1
 8008c98:	e7a0      	b.n	8008bdc <__divdi3+0x1c0>
 8008c9a:	4611      	mov	r1, r2
 8008c9c:	e7cb      	b.n	8008c36 <__divdi3+0x21a>
 8008c9e:	4690      	mov	r8, r2
 8008ca0:	e788      	b.n	8008bb4 <__divdi3+0x198>
 8008ca2:	4643      	mov	r3, r8
 8008ca4:	4642      	mov	r2, r8
 8008ca6:	e70a      	b.n	8008abe <__divdi3+0xa2>
 8008ca8:	3a02      	subs	r2, #2
 8008caa:	e753      	b.n	8008b54 <__divdi3+0x138>
 8008cac:	3902      	subs	r1, #2
 8008cae:	442f      	add	r7, r5
 8008cb0:	e73c      	b.n	8008b2c <__divdi3+0x110>
 8008cb2:	bf00      	nop

08008cb4 <__udivdi3>:
 8008cb4:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008cb8:	4614      	mov	r4, r2
 8008cba:	4605      	mov	r5, r0
 8008cbc:	460e      	mov	r6, r1
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d143      	bne.n	8008d4a <__udivdi3+0x96>
 8008cc2:	428a      	cmp	r2, r1
 8008cc4:	d953      	bls.n	8008d6e <__udivdi3+0xba>
 8008cc6:	fab2 f782 	clz	r7, r2
 8008cca:	b157      	cbz	r7, 8008ce2 <__udivdi3+0x2e>
 8008ccc:	f1c7 0620 	rsb	r6, r7, #32
 8008cd0:	fa20 f606 	lsr.w	r6, r0, r6
 8008cd4:	fa01 f307 	lsl.w	r3, r1, r7
 8008cd8:	fa02 f407 	lsl.w	r4, r2, r7
 8008cdc:	431e      	orrs	r6, r3
 8008cde:	fa00 f507 	lsl.w	r5, r0, r7
 8008ce2:	0c21      	lsrs	r1, r4, #16
 8008ce4:	fbb6 f2f1 	udiv	r2, r6, r1
 8008ce8:	0c2b      	lsrs	r3, r5, #16
 8008cea:	fb01 6712 	mls	r7, r1, r2, r6
 8008cee:	b2a0      	uxth	r0, r4
 8008cf0:	ea43 4607 	orr.w	r6, r3, r7, lsl #16
 8008cf4:	fb00 f302 	mul.w	r3, r0, r2
 8008cf8:	42b3      	cmp	r3, r6
 8008cfa:	d909      	bls.n	8008d10 <__udivdi3+0x5c>
 8008cfc:	1936      	adds	r6, r6, r4
 8008cfe:	f102 37ff 	add.w	r7, r2, #4294967295
 8008d02:	f080 80f6 	bcs.w	8008ef2 <__udivdi3+0x23e>
 8008d06:	42b3      	cmp	r3, r6
 8008d08:	f240 80f3 	bls.w	8008ef2 <__udivdi3+0x23e>
 8008d0c:	3a02      	subs	r2, #2
 8008d0e:	4426      	add	r6, r4
 8008d10:	1af6      	subs	r6, r6, r3
 8008d12:	fbb6 f3f1 	udiv	r3, r6, r1
 8008d16:	b2ad      	uxth	r5, r5
 8008d18:	fb01 6113 	mls	r1, r1, r3, r6
 8008d1c:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
 8008d20:	fb00 f003 	mul.w	r0, r0, r3
 8008d24:	4288      	cmp	r0, r1
 8008d26:	d908      	bls.n	8008d3a <__udivdi3+0x86>
 8008d28:	1909      	adds	r1, r1, r4
 8008d2a:	f103 36ff 	add.w	r6, r3, #4294967295
 8008d2e:	f080 80e2 	bcs.w	8008ef6 <__udivdi3+0x242>
 8008d32:	4288      	cmp	r0, r1
 8008d34:	f240 80df 	bls.w	8008ef6 <__udivdi3+0x242>
 8008d38:	3b02      	subs	r3, #2
 8008d3a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8008d3e:	2300      	movs	r3, #0
 8008d40:	4610      	mov	r0, r2
 8008d42:	4619      	mov	r1, r3
 8008d44:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008d48:	4770      	bx	lr
 8008d4a:	428b      	cmp	r3, r1
 8008d4c:	d84a      	bhi.n	8008de4 <__udivdi3+0x130>
 8008d4e:	fab3 f683 	clz	r6, r3
 8008d52:	2e00      	cmp	r6, #0
 8008d54:	d14d      	bne.n	8008df2 <__udivdi3+0x13e>
 8008d56:	428b      	cmp	r3, r1
 8008d58:	d302      	bcc.n	8008d60 <__udivdi3+0xac>
 8008d5a:	4282      	cmp	r2, r0
 8008d5c:	f200 80d6 	bhi.w	8008f0c <__udivdi3+0x258>
 8008d60:	2300      	movs	r3, #0
 8008d62:	2201      	movs	r2, #1
 8008d64:	4610      	mov	r0, r2
 8008d66:	4619      	mov	r1, r3
 8008d68:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008d6c:	4770      	bx	lr
 8008d6e:	b912      	cbnz	r2, 8008d76 <__udivdi3+0xc2>
 8008d70:	2401      	movs	r4, #1
 8008d72:	fbb4 f4f2 	udiv	r4, r4, r2
 8008d76:	fab4 f284 	clz	r2, r4
 8008d7a:	2a00      	cmp	r2, #0
 8008d7c:	d17c      	bne.n	8008e78 <__udivdi3+0x1c4>
 8008d7e:	1b09      	subs	r1, r1, r4
 8008d80:	0c26      	lsrs	r6, r4, #16
 8008d82:	b2a7      	uxth	r7, r4
 8008d84:	2301      	movs	r3, #1
 8008d86:	fbb1 f0f6 	udiv	r0, r1, r6
 8008d8a:	0c2a      	lsrs	r2, r5, #16
 8008d8c:	fb06 1110 	mls	r1, r6, r0, r1
 8008d90:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 8008d94:	fb07 f200 	mul.w	r2, r7, r0
 8008d98:	428a      	cmp	r2, r1
 8008d9a:	d907      	bls.n	8008dac <__udivdi3+0xf8>
 8008d9c:	1909      	adds	r1, r1, r4
 8008d9e:	f100 3cff 	add.w	ip, r0, #4294967295
 8008da2:	d202      	bcs.n	8008daa <__udivdi3+0xf6>
 8008da4:	428a      	cmp	r2, r1
 8008da6:	f200 80c3 	bhi.w	8008f30 <__udivdi3+0x27c>
 8008daa:	4660      	mov	r0, ip
 8008dac:	1a89      	subs	r1, r1, r2
 8008dae:	fbb1 f2f6 	udiv	r2, r1, r6
 8008db2:	b2ad      	uxth	r5, r5
 8008db4:	fb06 1112 	mls	r1, r6, r2, r1
 8008db8:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8008dbc:	fb07 f702 	mul.w	r7, r7, r2
 8008dc0:	42af      	cmp	r7, r5
 8008dc2:	d908      	bls.n	8008dd6 <__udivdi3+0x122>
 8008dc4:	192c      	adds	r4, r5, r4
 8008dc6:	f102 31ff 	add.w	r1, r2, #4294967295
 8008dca:	f080 8096 	bcs.w	8008efa <__udivdi3+0x246>
 8008dce:	42a7      	cmp	r7, r4
 8008dd0:	f240 8093 	bls.w	8008efa <__udivdi3+0x246>
 8008dd4:	3a02      	subs	r2, #2
 8008dd6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8008dda:	4610      	mov	r0, r2
 8008ddc:	4619      	mov	r1, r3
 8008dde:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008de2:	4770      	bx	lr
 8008de4:	2300      	movs	r3, #0
 8008de6:	461a      	mov	r2, r3
 8008de8:	4610      	mov	r0, r2
 8008dea:	4619      	mov	r1, r3
 8008dec:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008df0:	4770      	bx	lr
 8008df2:	f1c6 0520 	rsb	r5, r6, #32
 8008df6:	fa22 f405 	lsr.w	r4, r2, r5
 8008dfa:	40b3      	lsls	r3, r6
 8008dfc:	431c      	orrs	r4, r3
 8008dfe:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008e02:	fa21 f305 	lsr.w	r3, r1, r5
 8008e06:	fa01 f706 	lsl.w	r7, r1, r6
 8008e0a:	fa20 f505 	lsr.w	r5, r0, r5
 8008e0e:	fbb3 fcf8 	udiv	ip, r3, r8
 8008e12:	432f      	orrs	r7, r5
 8008e14:	fb08 331c 	mls	r3, r8, ip, r3
 8008e18:	0c3d      	lsrs	r5, r7, #16
 8008e1a:	fa1f fa84 	uxth.w	sl, r4
 8008e1e:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8008e22:	fb0a f90c 	mul.w	r9, sl, ip
 8008e26:	4599      	cmp	r9, r3
 8008e28:	fa02 fb06 	lsl.w	fp, r2, r6
 8008e2c:	d904      	bls.n	8008e38 <__udivdi3+0x184>
 8008e2e:	191b      	adds	r3, r3, r4
 8008e30:	f10c 32ff 	add.w	r2, ip, #4294967295
 8008e34:	d36d      	bcc.n	8008f12 <__udivdi3+0x25e>
 8008e36:	4694      	mov	ip, r2
 8008e38:	ebc9 0303 	rsb	r3, r9, r3
 8008e3c:	fbb3 f5f8 	udiv	r5, r3, r8
 8008e40:	fb08 3315 	mls	r3, r8, r5, r3
 8008e44:	b2bf      	uxth	r7, r7
 8008e46:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
 8008e4a:	fb0a f805 	mul.w	r8, sl, r5
 8008e4e:	45b8      	cmp	r8, r7
 8008e50:	d904      	bls.n	8008e5c <__udivdi3+0x1a8>
 8008e52:	193f      	adds	r7, r7, r4
 8008e54:	f105 33ff 	add.w	r3, r5, #4294967295
 8008e58:	d361      	bcc.n	8008f1e <__udivdi3+0x26a>
 8008e5a:	461d      	mov	r5, r3
 8008e5c:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
 8008e60:	fbac 230b 	umull	r2, r3, ip, fp
 8008e64:	ebc8 0707 	rsb	r7, r8, r7
 8008e68:	429f      	cmp	r7, r3
 8008e6a:	f04f 0500 	mov.w	r5, #0
 8008e6e:	d349      	bcc.n	8008f04 <__udivdi3+0x250>
 8008e70:	d045      	beq.n	8008efe <__udivdi3+0x24a>
 8008e72:	4662      	mov	r2, ip
 8008e74:	462b      	mov	r3, r5
 8008e76:	e763      	b.n	8008d40 <__udivdi3+0x8c>
 8008e78:	4094      	lsls	r4, r2
 8008e7a:	f1c2 0320 	rsb	r3, r2, #32
 8008e7e:	fa21 fc03 	lsr.w	ip, r1, r3
 8008e82:	0c26      	lsrs	r6, r4, #16
 8008e84:	fa20 f303 	lsr.w	r3, r0, r3
 8008e88:	fa01 f502 	lsl.w	r5, r1, r2
 8008e8c:	fbbc f8f6 	udiv	r8, ip, r6
 8008e90:	ea43 0105 	orr.w	r1, r3, r5
 8008e94:	0c0b      	lsrs	r3, r1, #16
 8008e96:	fb06 cc18 	mls	ip, r6, r8, ip
 8008e9a:	b2a7      	uxth	r7, r4
 8008e9c:	ea43 4c0c 	orr.w	ip, r3, ip, lsl #16
 8008ea0:	fb07 f308 	mul.w	r3, r7, r8
 8008ea4:	4563      	cmp	r3, ip
 8008ea6:	fa00 f502 	lsl.w	r5, r0, r2
 8008eaa:	d909      	bls.n	8008ec0 <__udivdi3+0x20c>
 8008eac:	eb1c 0c04 	adds.w	ip, ip, r4
 8008eb0:	f108 32ff 	add.w	r2, r8, #4294967295
 8008eb4:	d23a      	bcs.n	8008f2c <__udivdi3+0x278>
 8008eb6:	4563      	cmp	r3, ip
 8008eb8:	d938      	bls.n	8008f2c <__udivdi3+0x278>
 8008eba:	f1a8 0802 	sub.w	r8, r8, #2
 8008ebe:	44a4      	add	ip, r4
 8008ec0:	ebc3 0c0c 	rsb	ip, r3, ip
 8008ec4:	fbbc f3f6 	udiv	r3, ip, r6
 8008ec8:	b289      	uxth	r1, r1
 8008eca:	fb06 cc13 	mls	ip, r6, r3, ip
 8008ece:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8008ed2:	fb07 f203 	mul.w	r2, r7, r3
 8008ed6:	428a      	cmp	r2, r1
 8008ed8:	d907      	bls.n	8008eea <__udivdi3+0x236>
 8008eda:	1909      	adds	r1, r1, r4
 8008edc:	f103 30ff 	add.w	r0, r3, #4294967295
 8008ee0:	d222      	bcs.n	8008f28 <__udivdi3+0x274>
 8008ee2:	428a      	cmp	r2, r1
 8008ee4:	d920      	bls.n	8008f28 <__udivdi3+0x274>
 8008ee6:	3b02      	subs	r3, #2
 8008ee8:	4421      	add	r1, r4
 8008eea:	1a89      	subs	r1, r1, r2
 8008eec:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008ef0:	e749      	b.n	8008d86 <__udivdi3+0xd2>
 8008ef2:	463a      	mov	r2, r7
 8008ef4:	e70c      	b.n	8008d10 <__udivdi3+0x5c>
 8008ef6:	4633      	mov	r3, r6
 8008ef8:	e71f      	b.n	8008d3a <__udivdi3+0x86>
 8008efa:	460a      	mov	r2, r1
 8008efc:	e76b      	b.n	8008dd6 <__udivdi3+0x122>
 8008efe:	40b0      	lsls	r0, r6
 8008f00:	4290      	cmp	r0, r2
 8008f02:	d2b6      	bcs.n	8008e72 <__udivdi3+0x1be>
 8008f04:	f10c 32ff 	add.w	r2, ip, #4294967295
 8008f08:	2300      	movs	r3, #0
 8008f0a:	e719      	b.n	8008d40 <__udivdi3+0x8c>
 8008f0c:	4633      	mov	r3, r6
 8008f0e:	4632      	mov	r2, r6
 8008f10:	e716      	b.n	8008d40 <__udivdi3+0x8c>
 8008f12:	4599      	cmp	r9, r3
 8008f14:	d98f      	bls.n	8008e36 <__udivdi3+0x182>
 8008f16:	f1ac 0c02 	sub.w	ip, ip, #2
 8008f1a:	4423      	add	r3, r4
 8008f1c:	e78c      	b.n	8008e38 <__udivdi3+0x184>
 8008f1e:	45b8      	cmp	r8, r7
 8008f20:	d99b      	bls.n	8008e5a <__udivdi3+0x1a6>
 8008f22:	3d02      	subs	r5, #2
 8008f24:	4427      	add	r7, r4
 8008f26:	e799      	b.n	8008e5c <__udivdi3+0x1a8>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	e7de      	b.n	8008eea <__udivdi3+0x236>
 8008f2c:	4690      	mov	r8, r2
 8008f2e:	e7c7      	b.n	8008ec0 <__udivdi3+0x20c>
 8008f30:	3802      	subs	r0, #2
 8008f32:	4421      	add	r1, r4
 8008f34:	e73a      	b.n	8008dac <__udivdi3+0xf8>
 8008f36:	bf00      	nop
 8008f38:	203d3d3d 	.word	0x203d3d3d
 8008f3c:	45534552 	.word	0x45534552
 8008f40:	3d3d2054 	.word	0x3d3d2054
 8008f44:	00000d3d 	.word	0x00000d3d
 8008f48:	74696e69 	.word	0x74696e69
 8008f4c:	6d6f6320 	.word	0x6d6f6320
 8008f50:	74656c70 	.word	0x74656c70
 8008f54:	65203b65 	.word	0x65203b65
 8008f58:	7265746e 	.word	0x7265746e
 8008f5c:	20676e69 	.word	0x20676e69
 8008f60:	6e69616d 	.word	0x6e69616d
 8008f64:	6f6f6c20 	.word	0x6f6f6c20
 8008f68:	000d2e70 	.word	0x000d2e70
 8008f6c:	68616f77 	.word	0x68616f77
 8008f70:	65687420 	.word	0x65687420
 8008f74:	202e6572 	.word	0x202e6572
 8008f78:	65697274 	.word	0x65697274
 8008f7c:	6f742064 	.word	0x6f742064
 8008f80:	69727720 	.word	0x69727720
 8008f84:	30206574 	.word	0x30206574
 8008f88:	34302578 	.word	0x34302578
 8008f8c:	6f742078 	.word	0x6f742078
 8008f90:	67657220 	.word	0x67657220
 8008f94:	32302520 	.word	0x32302520
 8008f98:	75622064 	.word	0x75622064
 8008f9c:	74692074 	.word	0x74692074
 8008fa0:	61657220 	.word	0x61657220
 8008fa4:	61622064 	.word	0x61622064
 8008fa8:	25206b63 	.word	0x25206b63
 8008fac:	0d783430 	.word	0x0d783430
 8008fb0:	0000000a 	.word	0x0000000a
 8008fb4:	74656e65 	.word	0x74656e65
 8008fb8:	696e695f 	.word	0x696e695f
 8008fbc:	0d292874 	.word	0x0d292874
 8008fc0:	00000000 	.word	0x00000000
 8008fc4:	74696177 	.word	0x74696177
 8008fc8:	20676e69 	.word	0x20676e69
 8008fcc:	20726f66 	.word	0x20726f66
 8008fd0:	20594850 	.word	0x20594850
 8008fd4:	77206f74 	.word	0x77206f74
 8008fd8:	20656b61 	.word	0x20656b61
 8008fdc:	2e2e7075 	.word	0x2e2e7075
 8008fe0:	00000d2e 	.word	0x00000d2e
 8008fe4:	656e6f64 	.word	0x656e6f64
 8008fe8:	74697720 	.word	0x74697720
 8008fec:	48502068 	.word	0x48502068
 8008ff0:	65722059 	.word	0x65722059
 8008ff4:	2e746573 	.word	0x2e746573
 8008ff8:	0000000d 	.word	0x0000000d
 8008ffc:	74746573 	.word	0x74746573
 8009000:	20676e69 	.word	0x20676e69
 8009004:	74666f73 	.word	0x74666f73
 8009008:	65726177 	.word	0x65726177
 800900c:	72747320 	.word	0x72747320
 8009010:	72207061 	.word	0x72207061
 8009014:	73696765 	.word	0x73696765
 8009018:	73726574 	.word	0x73726574
 800901c:	0d2e2e2e 	.word	0x0d2e2e2e
 8009020:	00000000 	.word	0x00000000
 8009024:	20594850 	.word	0x20594850
 8009028:	20676572 	.word	0x20676572
 800902c:	64323025 	.word	0x64323025
 8009030:	30203d20 	.word	0x30203d20
 8009034:	34302578 	.word	0x34302578
 8009038:	000a0d78 	.word	0x000a0d78

0800903c <g_eth_src_mac>:
 800903c:	00c1f3a4 00000001 6c786d64 696e695f     ........dmxl_ini
 800904c:	0d292874 00000000 63656863 6d75736b     t().....checksum
 800905c:	69616620 3a64656c 636f6c20 30206c61      failed: local 0
 800906c:	32302578 3d212078 63657220 65766965     x%02x != receive
 800907c:	78302064 78323025 00000a0d 68616f77     d 0x%02x....woah
 800908c:	65687420 70206572 6e747261 202e7265      there partner. 
 800909c:	78656e75 74636570 64206465 206c786d     unexpected dmxl 
 80090ac:	73207872 65746174 00000d21 00000112     rx state!.......

080090bc <g_tactile_palm_addrs>:
 80090bc:	66646260 74727068 007a7876 74636174     `bdfhprtvxz.tact
 80090cc:	5f656c69 64697262 725f6567 74657365     ile_bridge_reset
 80090dc:	000d2928 74636174 5f656c69 74696e69     ()..tactile_init
 80090ec:	000d2928 656e6f64 74697720 61742068     ()..done with ta
 80090fc:	6c697463 6e695f65 29287469 0000000d     ctile_init()....

0800910c <g_tactile_finger_addrs>:
 800910c:	06040200 14121008 00000016              ............

08009118 <g_tactile_sensors_per_port>:
 8009118:	0b090909 74746573 20676e69 206e6970     ....setting pin 
 8009128:	74206425 706f206f 642d6e65 6e696172     %d to open-drain
 8009138:	00000a0d 74746573 20676e69 206e6970     ....setting pin 
 8009148:	74206425 7570206f 702d6873 0d6c6c75     %d to push-pull.
 8009158:	0000000a 5f636e65 74696e69 000d2928     ....enc_init()..
 8009168:	00000043                                C...

0800916c <_global_impure_ptr>:
 800916c:	20000070                                p.. 

08009170 <zeroes.6759>:
 8009170:	30303030 30303030 30303030 30303030     0000000000000000
 8009180:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
 8009190:	33323130 37363534 42413938 46454443     0123456789ABCDEF
 80091a0:	00000000 33323130 37363534 62613938     ....0123456789ab
 80091b0:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
 80091c0:	00000030                                0...

080091c4 <blanks.6758>:
 80091c4:	20202020 20202020 20202020 20202020                     
 80091d4:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
 80091e4:	49534f50 00000058 0000002e              POSIX.......

080091f0 <p05.5288>:
 80091f0:	00000005 00000019 0000007d 00000000     ........}.......

08009200 <__mprec_tens>:
 8009200:	00000000 3ff00000 00000000 40240000     .......?......$@
 8009210:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 8009220:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 8009230:	00000000 412e8480 00000000 416312d0     .......A......cA
 8009240:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 8009250:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
 8009260:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
 8009270:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
 8009280:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
 8009290:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
 80092a0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
 80092b0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
 80092c0:	79d99db4 44ea7843                       ...yCx.D

080092c8 <__mprec_bigtens>:
 80092c8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
 80092d8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
 80092e8:	7f73bf3c 75154fdd                       <.s..O.u

080092f0 <__mprec_tinytens>:
 80092f0:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
 8009300:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
 8009310:	64ac6f43 0ac80628                       Co.d(...

08009318 <zeroes.6702>:
 8009318:	30303030 30303030 30303030 30303030     0000000000000000

08009328 <blanks.6701>:
 8009328:	20202020 20202020 20202020 20202020                     

08009338 <_init>:
 8009338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800933a:	bf00      	nop
 800933c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800933e:	bc08      	pop	{r3}
 8009340:	469e      	mov	lr, r3
 8009342:	4770      	bx	lr

08009344 <__init_array_start>:
 8009344:	08003b4d 	.word	0x08003b4d

08009348 <__frame_dummy_init_array_entry>:
 8009348:	08000425                                %...

0800934c <_fini>:
 800934c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800934e:	bf00      	nop
 8009350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009352:	bc08      	pop	{r3}
 8009354:	469e      	mov	lr, r3
 8009356:	4770      	bx	lr

08009358 <__fini_array_start>:
 8009358:	08000401 	.word	0x08000401
